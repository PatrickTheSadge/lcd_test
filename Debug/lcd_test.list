
lcd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006cd8  08006cd8  00016cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e4  080070e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070ec  080070ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080070f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000000c4  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000890f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000192f  00000000  00000000  00028b1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  0002a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e0  00000000  00000000  0002ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021507  00000000  00000000  0002b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af5f  00000000  00000000  0004c9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4894  00000000  00000000  00057946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011c1da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003410  00000000  00000000  0011c22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cc0 	.word	0x08006cc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006cc0 	.word	0x08006cc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
static void LCD1602_EnablePulse(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <LCD1602_EnablePulse+0x38>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0c      	ldr	r2, [pc, #48]	; (8000fc8 <LCD1602_EnablePulse+0x3c>)
 8000f96:	8811      	ldrh	r1, [r2, #0]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 faec 	bl	8002578 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f97c 	bl	80012a0 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <LCD1602_EnablePulse+0x38>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <LCD1602_EnablePulse+0x3c>)
 8000fae:	8811      	ldrh	r1, [r2, #0]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fae0 	bl	8002578 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 8000fb8:	203c      	movs	r0, #60	; 0x3c
 8000fba:	f000 f971 	bl	80012a0 <LCD1602_TIM_MicorSecDelay>
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001fc 	.word	0x200001fc
 8000fc8:	20000202 	.word	0x20000202

08000fcc <LCD1602_RS>:
//2) RS control
static void LCD1602_RS(bool state)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d008      	beq.n	8000fee <LCD1602_RS+0x22>
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <LCD1602_RS+0x3c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	; (800100c <LCD1602_RS+0x40>)
 8000fe2:	8811      	ldrh	r1, [r2, #0]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fac6 	bl	8002578 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000fec:	e007      	b.n	8000ffe <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <LCD1602_RS+0x3c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a06      	ldr	r2, [pc, #24]	; (800100c <LCD1602_RS+0x40>)
 8000ff4:	8811      	ldrh	r1, [r2, #0]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 fabd 	bl	8002578 <HAL_GPIO_WritePin>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200001fc 	.word	0x200001fc
 800100c:	20000200 	.word	0x20000200

08001010 <LCD1602_write>:

//3) Write Parallel interface
static void LCD1602_write(uint8_t byte)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8001028:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <LCD1602_write+0x1a0>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d15a      	bne.n	80010e6 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001030:	4b60      	ldr	r3, [pc, #384]	; (80011b4 <LCD1602_write+0x1a4>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	4b60      	ldr	r3, [pc, #384]	; (80011b8 <LCD1602_write+0x1a8>)
 8001036:	8819      	ldrh	r1, [r3, #0]
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	f001 fa99 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001046:	4b5b      	ldr	r3, [pc, #364]	; (80011b4 <LCD1602_write+0x1a4>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <LCD1602_write+0x1ac>)
 800104c:	8819      	ldrh	r1, [r3, #0]
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	b2db      	uxtb	r3, r3
 8001056:	461a      	mov	r2, r3
 8001058:	f001 fa8e 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800105c:	4b55      	ldr	r3, [pc, #340]	; (80011b4 <LCD1602_write+0x1a4>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <LCD1602_write+0x1b0>)
 8001062:	8819      	ldrh	r1, [r3, #0]
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	b2db      	uxtb	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	f001 fa83 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001072:	4b50      	ldr	r3, [pc, #320]	; (80011b4 <LCD1602_write+0x1a4>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <LCD1602_write+0x1b4>)
 8001078:	8819      	ldrh	r1, [r3, #0]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	f001 fa78 	bl	8002578 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <LCD1602_write+0x1b8>)
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	4b4f      	ldr	r3, [pc, #316]	; (80011cc <LCD1602_write+0x1bc>)
 800108e:	8819      	ldrh	r1, [r3, #0]
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	f001 fa6d 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800109e:	4b4a      	ldr	r3, [pc, #296]	; (80011c8 <LCD1602_write+0x1b8>)
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <LCD1602_write+0x1c0>)
 80010a4:	8819      	ldrh	r1, [r3, #0]
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	f001 fa62 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80010b4:	4b44      	ldr	r3, [pc, #272]	; (80011c8 <LCD1602_write+0x1b8>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	4b46      	ldr	r3, [pc, #280]	; (80011d4 <LCD1602_write+0x1c4>)
 80010ba:	8819      	ldrh	r1, [r3, #0]
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	f001 fa57 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <LCD1602_write+0x1b8>)
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <LCD1602_write+0x1c8>)
 80010d0:	8819      	ldrh	r1, [r3, #0]
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	f001 fa4c 	bl	8002578 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 80010e0:	f7ff ff54 	bl	8000f8c <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 80010e4:	e05f      	b.n	80011a6 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 80010e6:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <LCD1602_write+0x1a0>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d15b      	bne.n	80011a6 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80010ee:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <LCD1602_write+0x1b8>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <LCD1602_write+0x1bc>)
 80010f4:	8819      	ldrh	r1, [r3, #0]
 80010f6:	7bbb      	ldrb	r3, [r7, #14]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	f001 fa3a 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001104:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <LCD1602_write+0x1b8>)
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <LCD1602_write+0x1c0>)
 800110a:	8819      	ldrh	r1, [r3, #0]
 800110c:	7bbb      	ldrb	r3, [r7, #14]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	b2db      	uxtb	r3, r3
 8001114:	461a      	mov	r2, r3
 8001116:	f001 fa2f 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <LCD1602_write+0x1b8>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <LCD1602_write+0x1c4>)
 8001120:	8819      	ldrh	r1, [r3, #0]
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	b2db      	uxtb	r3, r3
 800112a:	461a      	mov	r2, r3
 800112c:	f001 fa24 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <LCD1602_write+0x1b8>)
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <LCD1602_write+0x1c8>)
 8001136:	8819      	ldrh	r1, [r3, #0]
 8001138:	7bbb      	ldrb	r3, [r7, #14]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	461a      	mov	r2, r3
 8001142:	f001 fa19 	bl	8002578 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8001146:	f7ff ff21 	bl	8000f8c <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <LCD1602_write+0x1b8>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <LCD1602_write+0x1bc>)
 8001150:	8819      	ldrh	r1, [r3, #0]
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	f001 fa0c 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <LCD1602_write+0x1b8>)
 8001162:	6818      	ldr	r0, [r3, #0]
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <LCD1602_write+0x1c0>)
 8001166:	8819      	ldrh	r1, [r3, #0]
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	f001 fa01 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <LCD1602_write+0x1b8>)
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <LCD1602_write+0x1c4>)
 800117c:	8819      	ldrh	r1, [r3, #0]
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	b2db      	uxtb	r3, r3
 8001186:	461a      	mov	r2, r3
 8001188:	f001 f9f6 	bl	8002578 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <LCD1602_write+0x1b8>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <LCD1602_write+0x1c8>)
 8001192:	8819      	ldrh	r1, [r3, #0]
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	f001 f9eb 	bl	8002578 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 80011a2:	f7ff fef3 	bl	8000f8c <LCD1602_EnablePulse>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000204 	.word	0x20000204
 80011b8:	20000208 	.word	0x20000208
 80011bc:	2000020a 	.word	0x2000020a
 80011c0:	2000020c 	.word	0x2000020c
 80011c4:	2000020e 	.word	0x2000020e
 80011c8:	20000210 	.word	0x20000210
 80011cc:	20000214 	.word	0x20000214
 80011d0:	20000216 	.word	0x20000216
 80011d4:	20000218 	.word	0x20000218
 80011d8:	2000021a 	.word	0x2000021a
 80011dc:	00000000 	.word	0x00000000

080011e0 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
static void LCD1602_TIM_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 80011e6:	1d3a      	adds	r2, r7, #4
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fe20 	bl	8003e34 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d103      	bne.n	8001202 <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 80011fa:	f002 fe07 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 80011fe:	61f8      	str	r0, [r7, #28]
 8001200:	e004      	b.n	800120c <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8001202:	f002 fe03 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8001206:	4603      	mov	r3, r0
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 800120c:	69f8      	ldr	r0, [r7, #28]
 800120e:	f7ff f979 	bl	8000504 <__aeabi_ui2d>
 8001212:	a321      	add	r3, pc, #132	; (adr r3, 8001298 <LCD1602_TIM_Config+0xb8>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff f9ee 	bl	80005f8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fcc0 	bl	8000ba8 <__aeabi_d2uiz>
 8001228:	4603      	mov	r3, r0
 800122a:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <LCD1602_TIM_Config+0xb0>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <LCD1602_TIM_Config+0xb0>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a15      	ldr	r2, [pc, #84]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 800123e:	f023 0310 	bic.w	r3, r3, #16
 8001242:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 8001256:	f023 0304 	bic.w	r3, r3, #4
 800125a:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8001268:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b01      	subs	r3, #1
 800126e:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 8001272:	2209      	movs	r2, #9
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 8001278:	2201      	movs	r2, #1
 800127a:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <LCD1602_TIM_Config+0xb4>)
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6113      	str	r3, [r2, #16]
}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40000400 	.word	0x40000400
 8001298:	a0b5ed8d 	.word	0xa0b5ed8d
 800129c:	3eb0c6f7 	.word	0x3eb0c6f7

080012a0 <LCD1602_TIM_MicorSecDelay>:
static void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 80012a8:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 80012c8:	bf00      	nop
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d1f9      	bne.n	80012ca <LCD1602_TIM_MicorSecDelay+0x2a>
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	40000400 	.word	0x40000400

080012e8 <LCD1602_writeCommand>:
//5) Write command
static void LCD1602_writeCommand(uint8_t command)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff fe6a 	bl	8000fcc <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe88 	bl	8001010 <LCD1602_write>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <LCD1602_writeData>:
//6) Write 8 bits data
static void LCD1602_writeData(uint8_t data)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff fe5a 	bl	8000fcc <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe78 	bl	8001010 <LCD1602_write>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <LCD1602_Begin8BIT>:
}

//Public functions
//1) LCD begin 8 bits function
void LCD1602_Begin8BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_LSBs0to3, uint16_t D0, uint16_t D1, uint16_t D2, uint16_t D3, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	460b      	mov	r3, r1
 8001334:	817b      	strh	r3, [r7, #10]
 8001336:	4613      	mov	r3, r2
 8001338:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 800133a:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <LCD1602_Begin8BIT+0xbc>)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8001340:	4a29      	ldr	r2, [pc, #164]	; (80013e8 <LCD1602_Begin8BIT+0xc0>)
 8001342:	897b      	ldrh	r3, [r7, #10]
 8001344:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 8001346:	4a29      	ldr	r2, [pc, #164]	; (80013ec <LCD1602_Begin8BIT+0xc4>)
 8001348:	893b      	ldrh	r3, [r7, #8]
 800134a:	8013      	strh	r3, [r2, #0]
	PORT_LSB = PORT_LSBs0to3;
 800134c:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <LCD1602_Begin8BIT+0xc8>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
	D0_PIN = D0;
 8001352:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <LCD1602_Begin8BIT+0xcc>)
 8001354:	8b3b      	ldrh	r3, [r7, #24]
 8001356:	8013      	strh	r3, [r2, #0]
	D1_PIN = D1;
 8001358:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <LCD1602_Begin8BIT+0xd0>)
 800135a:	8bbb      	ldrh	r3, [r7, #28]
 800135c:	8013      	strh	r3, [r2, #0]
	D2_PIN = D2;
 800135e:	4a27      	ldr	r2, [pc, #156]	; (80013fc <LCD1602_Begin8BIT+0xd4>)
 8001360:	8c3b      	ldrh	r3, [r7, #32]
 8001362:	8013      	strh	r3, [r2, #0]
	D3_PIN = D3;
 8001364:	4a26      	ldr	r2, [pc, #152]	; (8001400 <LCD1602_Begin8BIT+0xd8>)
 8001366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001368:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 800136a:	4a26      	ldr	r2, [pc, #152]	; (8001404 <LCD1602_Begin8BIT+0xdc>)
 800136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800136e:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8001370:	4a25      	ldr	r2, [pc, #148]	; (8001408 <LCD1602_Begin8BIT+0xe0>)
 8001372:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001374:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8001376:	4a25      	ldr	r2, [pc, #148]	; (800140c <LCD1602_Begin8BIT+0xe4>)
 8001378:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800137a:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 800137c:	4a24      	ldr	r2, [pc, #144]	; (8001410 <LCD1602_Begin8BIT+0xe8>)
 800137e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001380:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 8001382:	4a24      	ldr	r2, [pc, #144]	; (8001414 <LCD1602_Begin8BIT+0xec>)
 8001384:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001386:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8001388:	f7ff ff2a 	bl	80011e0 <LCD1602_TIM_Config>
	//Set the mode to 8 bits
	mode_8_4_I2C = 1;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <LCD1602_Begin8BIT+0xf0>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
	//Function set variable to 8 bits mode
	FunctionSet = 0x38;
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <LCD1602_Begin8BIT+0xf4>)
 8001394:	2238      	movs	r2, #56	; 0x38
 8001396:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8001398:	2014      	movs	r0, #20
 800139a:	f000 fe47 	bl	800202c <HAL_Delay>
	//2. Attentions sequence
	LCD1602_writeCommand(0x30);
 800139e:	2030      	movs	r0, #48	; 0x30
 80013a0:	f7ff ffa2 	bl	80012e8 <LCD1602_writeCommand>
	HAL_Delay(5);
 80013a4:	2005      	movs	r0, #5
 80013a6:	f000 fe41 	bl	800202c <HAL_Delay>
	LCD1602_writeCommand(0x30);
 80013aa:	2030      	movs	r0, #48	; 0x30
 80013ac:	f7ff ff9c 	bl	80012e8 <LCD1602_writeCommand>
	HAL_Delay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f000 fe3b 	bl	800202c <HAL_Delay>
	LCD1602_writeCommand(0x30);
 80013b6:	2030      	movs	r0, #48	; 0x30
 80013b8:	f7ff ff96 	bl	80012e8 <LCD1602_writeCommand>
	HAL_Delay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f000 fe35 	bl	800202c <HAL_Delay>
	//3. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N | LCD_FUNCTION_DL);
 80013c2:	2038      	movs	r0, #56	; 0x38
 80013c4:	f7ff ff90 	bl	80012e8 <LCD1602_writeCommand>
	//4. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80013c8:	200f      	movs	r0, #15
 80013ca:	f7ff ff8d 	bl	80012e8 <LCD1602_writeCommand>
	//5. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ff8a 	bl	80012e8 <LCD1602_writeCommand>
	HAL_Delay(2);
 80013d4:	2002      	movs	r0, #2
 80013d6:	f000 fe29 	bl	800202c <HAL_Delay>
}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001fc 	.word	0x200001fc
 80013e8:	20000200 	.word	0x20000200
 80013ec:	20000202 	.word	0x20000202
 80013f0:	20000204 	.word	0x20000204
 80013f4:	20000208 	.word	0x20000208
 80013f8:	2000020a 	.word	0x2000020a
 80013fc:	2000020c 	.word	0x2000020c
 8001400:	2000020e 	.word	0x2000020e
 8001404:	20000210 	.word	0x20000210
 8001408:	20000214 	.word	0x20000214
 800140c:	20000216 	.word	0x20000216
 8001410:	20000218 	.word	0x20000218
 8001414:	2000021a 	.word	0x2000021a
 8001418:	20000000 	.word	0x20000000
 800141c:	20000002 	.word	0x20000002

08001420 <LCD1602_print>:
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
	HAL_Delay(3);
}
//3) LCD print string
void LCD1602_print(char string[])
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e009      	b.n	8001442 <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff66 	bl	8001308 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!=NULL; i++)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	3301      	adds	r3, #1
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d805      	bhi.n	8001454 <LCD1602_print+0x34>
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1ec      	bne.n	800142e <LCD1602_print+0xe>
	}
}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	460a      	mov	r2, r1
 8001466:	71fb      	strb	r3, [r7, #7]
 8001468:	4613      	mov	r3, r2
 800146a:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	3b01      	subs	r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d108      	bne.n	8001490 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001484:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff2d 	bl	80012e8 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 800148e:	e007      	b.n	80014a0 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001496:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff24 	bl	80012e8 <LCD1602_writeCommand>
}	
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <LCD1602_2ndLine>:
void LCD1602_1stLine(void)
{
	LCD1602_setCursor(1,1);
}
void LCD1602_2ndLine(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	LCD1602_setCursor(2,1);
 80014ac:	2101      	movs	r1, #1
 80014ae:	2002      	movs	r0, #2
 80014b0:	f7ff ffd4 	bl	800145c <LCD1602_setCursor>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <LCD1602_noCursor>:
	FunctionSet &= ~(0x08);
	LCD1602_writeCommand(FunctionSet);
}
//6) Cursor ON/OFF
void LCD1602_noCursor(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x02);
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <LCD1602_noCursor+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f023 0302 	bic.w	r3, r3, #2
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <LCD1602_noCursor+0x20>)
 80014c8:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80014ca:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <LCD1602_noCursor+0x20>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff0a 	bl	80012e8 <LCD1602_writeCommand>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000001 	.word	0x20000001

080014dc <LCD1602_noBlink>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(3);
}
//8) Blinking cursor
void LCD1602_noBlink(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x01);
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <LCD1602_noBlink+0x20>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <LCD1602_noBlink+0x20>)
 80014ec:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80014ee:	4b03      	ldr	r3, [pc, #12]	; (80014fc <LCD1602_noBlink+0x20>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fef8 	bl	80012e8 <LCD1602_writeCommand>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000001 	.word	0x20000001

08001500 <LCD1602_PrintFloat>:
	sprintf(numStr,"%d", number);
	LCD1602_print(numStr);
}
//2. Float
void LCD1602_PrintFloat(float number, int decimalPoints)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af02      	add	r7, sp, #8
 8001506:	ed87 0a01 	vstr	s0, [r7, #4]
 800150a:	6038      	str	r0, [r7, #0]
	char numStr[16];
	sprintf(numStr,"%.*f",decimalPoints, number);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff f81b 	bl	8000548 <__aeabi_f2d>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	f107 0008 	add.w	r0, r7, #8
 800151a:	e9cd 2300 	strd	r2, r3, [sp]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	4905      	ldr	r1, [pc, #20]	; (8001538 <LCD1602_PrintFloat+0x38>)
 8001522:	f003 f955 	bl	80047d0 <siprintf>
	LCD1602_print(numStr);
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff78 	bl	8001420 <LCD1602_print>
}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	08006cdc 	.word	0x08006cdc

0800153c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	; 0x30
 8001540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
 8001556:	4ba4      	ldr	r3, [pc, #656]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4aa3      	ldr	r2, [pc, #652]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 800155c:	f043 0310 	orr.w	r3, r3, #16
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4ba1      	ldr	r3, [pc, #644]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0310 	and.w	r3, r3, #16
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	4b9d      	ldr	r3, [pc, #628]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a9c      	ldr	r2, [pc, #624]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b9a      	ldr	r3, [pc, #616]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	4b96      	ldr	r3, [pc, #600]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a95      	ldr	r2, [pc, #596]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 8001594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b93      	ldr	r3, [pc, #588]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b8f      	ldr	r3, [pc, #572]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a8e      	ldr	r2, [pc, #568]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b8c      	ldr	r3, [pc, #560]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a87      	ldr	r2, [pc, #540]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b85      	ldr	r3, [pc, #532]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	4b81      	ldr	r3, [pc, #516]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a80      	ldr	r2, [pc, #512]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 80015e8:	f043 0308 	orr.w	r3, r3, #8
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b7e      	ldr	r3, [pc, #504]	; (80017e8 <MX_GPIO_Init+0x2ac>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RS_Pin|E_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2168      	movs	r1, #104	; 0x68
 80015fe:	487b      	ldr	r0, [pc, #492]	; (80017ec <MX_GPIO_Init+0x2b0>)
 8001600:	f000 ffba 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2101      	movs	r1, #1
 8001608:	4879      	ldr	r0, [pc, #484]	; (80017f0 <MX_GPIO_Init+0x2b4>)
 800160a:	f000 ffb5 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D0_Pin|D1_Pin|D2_Pin|D3_Pin, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001614:	4877      	ldr	r0, [pc, #476]	; (80017f4 <MX_GPIO_Init+0x2b8>)
 8001616:	f000 ffaf 	bl	8002578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800161a:	2200      	movs	r2, #0
 800161c:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001620:	4875      	ldr	r0, [pc, #468]	; (80017f8 <MX_GPIO_Init+0x2bc>)
 8001622:	f000 ffa9 	bl	8002578 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RS_Pin|E_Pin;
 8001626:	2368      	movs	r3, #104	; 0x68
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001636:	f107 031c 	add.w	r3, r7, #28
 800163a:	4619      	mov	r1, r3
 800163c:	486b      	ldr	r0, [pc, #428]	; (80017ec <MX_GPIO_Init+0x2b0>)
 800163e:	f000 fdff 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001642:	2301      	movs	r3, #1
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4865      	ldr	r0, [pc, #404]	; (80017f0 <MX_GPIO_Init+0x2b4>)
 800165a:	f000 fdf1 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800165e:	2308      	movs	r3, #8
 8001660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	2300      	movs	r3, #0
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800166e:	2305      	movs	r3, #5
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	4619      	mov	r1, r3
 8001678:	485d      	ldr	r0, [pc, #372]	; (80017f0 <MX_GPIO_Init+0x2b4>)
 800167a:	f000 fde1 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800167e:	2301      	movs	r3, #1
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001682:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	485a      	ldr	r0, [pc, #360]	; (80017fc <MX_GPIO_Init+0x2c0>)
 8001694:	f000 fdd4 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001698:	2310      	movs	r3, #16
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016a8:	2306      	movs	r3, #6
 80016aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	4852      	ldr	r0, [pc, #328]	; (80017fc <MX_GPIO_Init+0x2c0>)
 80016b4:	f000 fdc4 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016b8:	23e0      	movs	r3, #224	; 0xe0
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016c8:	2305      	movs	r3, #5
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	4619      	mov	r1, r3
 80016d2:	484a      	ldr	r0, [pc, #296]	; (80017fc <MX_GPIO_Init+0x2c0>)
 80016d4:	f000 fdb4 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80016d8:	2304      	movs	r3, #4
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4842      	ldr	r0, [pc, #264]	; (80017f4 <MX_GPIO_Init+0x2b8>)
 80016ec:	f000 fda8 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80016f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001702:	2305      	movs	r3, #5
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4839      	ldr	r0, [pc, #228]	; (80017f4 <MX_GPIO_Init+0x2b8>)
 800170e:	f000 fd97 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin;
 8001712:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	4832      	ldr	r0, [pc, #200]	; (80017f4 <MX_GPIO_Init+0x2b8>)
 800172c:	f000 fd88 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001730:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001734:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001736:	2301      	movs	r3, #1
 8001738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	482b      	ldr	r0, [pc, #172]	; (80017f8 <MX_GPIO_Init+0x2bc>)
 800174a:	f000 fd79 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800174e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001760:	2306      	movs	r3, #6
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4821      	ldr	r0, [pc, #132]	; (80017f0 <MX_GPIO_Init+0x2b4>)
 800176c:	f000 fd68 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	481d      	ldr	r0, [pc, #116]	; (80017fc <MX_GPIO_Init+0x2c0>)
 8001786:	f000 fd5b 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800178a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800179c:	230a      	movs	r3, #10
 800179e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	4815      	ldr	r0, [pc, #84]	; (80017fc <MX_GPIO_Init+0x2c0>)
 80017a8:	f000 fd4a 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80017ac:	2320      	movs	r3, #32
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	480e      	ldr	r0, [pc, #56]	; (80017f8 <MX_GPIO_Init+0x2bc>)
 80017c0:	f000 fd3e 	bl	8002240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017c8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <MX_GPIO_Init+0x2b0>)
 80017da:	f000 fd31 	bl	8002240 <HAL_GPIO_Init>

}
 80017de:	bf00      	nop
 80017e0:	3730      	adds	r7, #48	; 0x30
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40020000 	.word	0x40020000

08001800 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <MX_I2C1_Init+0x50>)
 8001806:	4a13      	ldr	r2, [pc, #76]	; (8001854 <MX_I2C1_Init+0x54>)
 8001808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <MX_I2C1_Init+0x50>)
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <MX_I2C1_Init+0x58>)
 800180e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MX_I2C1_Init+0x50>)
 800181e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <MX_I2C1_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_I2C1_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <MX_I2C1_Init+0x50>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_I2C1_Init+0x50>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800183c:	4804      	ldr	r0, [pc, #16]	; (8001850 <MX_I2C1_Init+0x50>)
 800183e:	f000 feb5 	bl	80025ac <HAL_I2C_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001848:	f000 fa24 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2000021c 	.word	0x2000021c
 8001854:	40005400 	.word	0x40005400
 8001858:	000186a0 	.word	0x000186a0

0800185c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_I2C_MspInit+0x84>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d12c      	bne.n	80018d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_I2C_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_I2C_MspInit+0x88>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_I2C_MspInit+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800189a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a0:	2312      	movs	r3, #18
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ac:	2304      	movs	r3, #4
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	480c      	ldr	r0, [pc, #48]	; (80018e8 <HAL_I2C_MspInit+0x8c>)
 80018b8:	f000 fcc2 	bl	8002240 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_I2C_MspInit+0x88>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a07      	ldr	r2, [pc, #28]	; (80018e4 <HAL_I2C_MspInit+0x88>)
 80018c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_I2C_MspInit+0x88>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40005400 	.word	0x40005400
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020400 	.word	0x40020400
 80018ec:	00000000 	.word	0x00000000

080018f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f6:	f000 fb27 	bl	8001f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018fa:	f000 f903 	bl	8001b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fe:	f7ff fe1d 	bl	800153c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001902:	f7ff ff7d 	bl	8001800 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD1602_Begin8BIT(RS_GPIO_Port, RS_Pin, E_Pin, D0_GPIO_Port, D0_Pin, D1_Pin, D2_Pin, D3_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8001906:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800190a:	9308      	str	r3, [sp, #32]
 800190c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001910:	9307      	str	r3, [sp, #28]
 8001912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001916:	9306      	str	r3, [sp, #24]
 8001918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191c:	9305      	str	r3, [sp, #20]
 800191e:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <main+0x1d8>)
 8001920:	9304      	str	r3, [sp, #16]
 8001922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001926:	9303      	str	r3, [sp, #12]
 8001928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800192c:	9302      	str	r3, [sp, #8]
 800192e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	4b64      	ldr	r3, [pc, #400]	; (8001acc <main+0x1dc>)
 800193c:	2240      	movs	r2, #64	; 0x40
 800193e:	2120      	movs	r1, #32
 8001940:	4863      	ldr	r0, [pc, #396]	; (8001ad0 <main+0x1e0>)
 8001942:	f7ff fcf1 	bl	8001328 <LCD1602_Begin8BIT>
  LCD1602_noBlink();
 8001946:	f7ff fdc9 	bl	80014dc <LCD1602_noBlink>
  LCD1602_noCursor();
 800194a:	f7ff fdb5 	bl	80014b8 <LCD1602_noCursor>


  i2cBuf[0] = 0x18;
 800194e:	4b61      	ldr	r3, [pc, #388]	; (8001ad4 <main+0x1e4>)
 8001950:	2218      	movs	r2, #24
 8001952:	701a      	strb	r2, [r3, #0]
  //init accelerometer for +-16g
  HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x1C, 1, i2cBuf, 1, 10);
 8001954:	230a      	movs	r3, #10
 8001956:	9302      	str	r3, [sp, #8]
 8001958:	2301      	movs	r3, #1
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	4b5d      	ldr	r3, [pc, #372]	; (8001ad4 <main+0x1e4>)
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2301      	movs	r3, #1
 8001962:	221c      	movs	r2, #28
 8001964:	21d0      	movs	r1, #208	; 0xd0
 8001966:	485c      	ldr	r0, [pc, #368]	; (8001ad8 <main+0x1e8>)
 8001968:	f000 ff64 	bl	8002834 <HAL_I2C_Mem_Write>

  i2cBuf[0] = 0x18;
 800196c:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <main+0x1e4>)
 800196e:	2218      	movs	r2, #24
 8001970:	701a      	strb	r2, [r3, #0]
  //init accelerometer for +-2000 dps
  HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x1B, 1, i2cBuf, 1, 10);
 8001972:	230a      	movs	r3, #10
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2301      	movs	r3, #1
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	4b56      	ldr	r3, [pc, #344]	; (8001ad4 <main+0x1e4>)
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	221b      	movs	r2, #27
 8001982:	21d0      	movs	r1, #208	; 0xd0
 8001984:	4854      	ldr	r0, [pc, #336]	; (8001ad8 <main+0x1e8>)
 8001986:	f000 ff55 	bl	8002834 <HAL_I2C_Mem_Write>

  LCD1602_print("x:");
 800198a:	4854      	ldr	r0, [pc, #336]	; (8001adc <main+0x1ec>)
 800198c:	f7ff fd48 	bl	8001420 <LCD1602_print>
  LCD1602_setCursor(1, 10);
 8001990:	210a      	movs	r1, #10
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff fd62 	bl	800145c <LCD1602_setCursor>
  LCD1602_print("z:");
 8001998:	4851      	ldr	r0, [pc, #324]	; (8001ae0 <main+0x1f0>)
 800199a:	f7ff fd41 	bl	8001420 <LCD1602_print>
  LCD1602_2ndLine();
 800199e:	f7ff fd83 	bl	80014a8 <LCD1602_2ndLine>
  LCD1602_print("y:");
 80019a2:	4850      	ldr	r0, [pc, #320]	; (8001ae4 <main+0x1f4>)
 80019a4:	f7ff fd3c 	bl	8001420 <LCD1602_print>
	  /*getRotationMEM(&ax, &ay, &az);
	  Xaccel = ax/16.384;
	  Yaccel = ay/16.384;
	  Zaccel = az/16.384;*/

	  getCompasMEM(&ax, &ay, &az);
 80019a8:	4a4f      	ldr	r2, [pc, #316]	; (8001ae8 <main+0x1f8>)
 80019aa:	4950      	ldr	r1, [pc, #320]	; (8001aec <main+0x1fc>)
 80019ac:	4850      	ldr	r0, [pc, #320]	; (8001af0 <main+0x200>)
 80019ae:	f000 f913 	bl	8001bd8 <getCompasMEM>
	  Xaccel = ax/1.7066666666666666666666666666667;
 80019b2:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <main+0x200>)
 80019b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdb3 	bl	8000524 <__aeabi_i2d>
 80019be:	a340      	add	r3, pc, #256	; (adr r3, 8001ac0 <main+0x1d0>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe ff42 	bl	800084c <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f90a 	bl	8000be8 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a47      	ldr	r2, [pc, #284]	; (8001af4 <main+0x204>)
 80019d8:	6013      	str	r3, [r2, #0]
	  Yaccel = ay/1.7066666666666666666666666666667;
 80019da:	4b44      	ldr	r3, [pc, #272]	; (8001aec <main+0x1fc>)
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd9f 	bl	8000524 <__aeabi_i2d>
 80019e6:	a336      	add	r3, pc, #216	; (adr r3, 8001ac0 <main+0x1d0>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe ff2e 	bl	800084c <__aeabi_ddiv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f8f6 	bl	8000be8 <__aeabi_d2f>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a3e      	ldr	r2, [pc, #248]	; (8001af8 <main+0x208>)
 8001a00:	6013      	str	r3, [r2, #0]
	  Zaccel = az/1.7066666666666666666666666666667;
 8001a02:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <main+0x1f8>)
 8001a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd8b 	bl	8000524 <__aeabi_i2d>
 8001a0e:	a32c      	add	r3, pc, #176	; (adr r3, 8001ac0 <main+0x1d0>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe ff1a 	bl	800084c <__aeabi_ddiv>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f8e2 	bl	8000be8 <__aeabi_d2f>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4a35      	ldr	r2, [pc, #212]	; (8001afc <main+0x20c>)
 8001a28:	6013      	str	r3, [r2, #0]

	  LCD1602_setCursor(1, 3);
 8001a2a:	2103      	movs	r1, #3
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f7ff fd15 	bl	800145c <LCD1602_setCursor>
	  if(Xaccel > 0) LCD1602_print(" ");
 8001a32:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <main+0x204>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	dd02      	ble.n	8001a48 <main+0x158>
 8001a42:	482f      	ldr	r0, [pc, #188]	; (8001b00 <main+0x210>)
 8001a44:	f7ff fcec 	bl	8001420 <LCD1602_print>
	  LCD1602_PrintFloat(Xaccel, 2);
 8001a48:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <main+0x204>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	2002      	movs	r0, #2
 8001a50:	eeb0 0a67 	vmov.f32	s0, s15
 8001a54:	f7ff fd54 	bl	8001500 <LCD1602_PrintFloat>


	  LCD1602_setCursor(1, 12);
 8001a58:	210c      	movs	r1, #12
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff fcfe 	bl	800145c <LCD1602_setCursor>
	  if(Zaccel > 0) LCD1602_print(" ");
 8001a60:	4b26      	ldr	r3, [pc, #152]	; (8001afc <main+0x20c>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	dd02      	ble.n	8001a76 <main+0x186>
 8001a70:	4823      	ldr	r0, [pc, #140]	; (8001b00 <main+0x210>)
 8001a72:	f7ff fcd5 	bl	8001420 <LCD1602_print>
	  LCD1602_PrintFloat(Zaccel, 2);
 8001a76:	4b21      	ldr	r3, [pc, #132]	; (8001afc <main+0x20c>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a82:	f7ff fd3d 	bl	8001500 <LCD1602_PrintFloat>


	  LCD1602_setCursor(2, 3);
 8001a86:	2103      	movs	r1, #3
 8001a88:	2002      	movs	r0, #2
 8001a8a:	f7ff fce7 	bl	800145c <LCD1602_setCursor>
	  if(Yaccel > 0) LCD1602_print(" ");
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <main+0x208>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	dd02      	ble.n	8001aa4 <main+0x1b4>
 8001a9e:	4818      	ldr	r0, [pc, #96]	; (8001b00 <main+0x210>)
 8001aa0:	f7ff fcbe 	bl	8001420 <LCD1602_print>
	  LCD1602_PrintFloat(Yaccel, 2);
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <main+0x208>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	2002      	movs	r0, #2
 8001aac:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab0:	f7ff fd26 	bl	8001500 <LCD1602_PrintFloat>

	  HAL_Delay((int)(1000/10));
 8001ab4:	2064      	movs	r0, #100	; 0x64
 8001ab6:	f000 fab9 	bl	800202c <HAL_Delay>
	  getCompasMEM(&ax, &ay, &az);
 8001aba:	e775      	b.n	80019a8 <main+0xb8>
 8001abc:	f3af 8000 	nop.w
 8001ac0:	b4e81b4f 	.word	0xb4e81b4f
 8001ac4:	3ffb4e81 	.word	0x3ffb4e81
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	20000270 	.word	0x20000270
 8001ad8:	2000021c 	.word	0x2000021c
 8001adc:	08006ce4 	.word	0x08006ce4
 8001ae0:	08006ce8 	.word	0x08006ce8
 8001ae4:	08006cec 	.word	0x08006cec
 8001ae8:	2000027c 	.word	0x2000027c
 8001aec:	2000027a 	.word	0x2000027a
 8001af0:	20000278 	.word	0x20000278
 8001af4:	20000280 	.word	0x20000280
 8001af8:	20000284 	.word	0x20000284
 8001afc:	20000288 	.word	0x20000288
 8001b00:	08006cf0 	.word	0x08006cf0

08001b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b094      	sub	sp, #80	; 0x50
 8001b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b0a:	f107 0320 	add.w	r3, r7, #32
 8001b0e:	2230      	movs	r2, #48	; 0x30
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 f9ea 	bl	8003eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <SystemClock_Config+0xcc>)
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <SystemClock_Config+0xcc>)
 8001b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b36:	6413      	str	r3, [r2, #64]	; 0x40
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <SystemClock_Config+0xcc>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <SystemClock_Config+0xd0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <SystemClock_Config+0xd0>)
 8001b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <SystemClock_Config+0xd0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b60:	2302      	movs	r3, #2
 8001b62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b64:	2301      	movs	r3, #1
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b68:	2310      	movs	r3, #16
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b74:	2308      	movs	r3, #8
 8001b76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001b78:	2332      	movs	r3, #50	; 0x32
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b80:	2307      	movs	r3, #7
 8001b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b84:	f107 0320 	add.w	r3, r7, #32
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 fccf 	bl	800352c <HAL_RCC_OscConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b94:	f000 f87e 	bl	8001c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b98:	230f      	movs	r3, #15
 8001b9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ba4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ba8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 ff30 	bl	8003a1c <HAL_RCC_ClockConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bc2:	f000 f867 	bl	8001c94 <Error_Handler>
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	3750      	adds	r7, #80	; 0x50
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40007000 	.word	0x40007000

08001bd8 <getCompasMEM>:

	return;
}

void getCompasMEM(int16_t* x, int16_t* y, int16_t* z)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af04      	add	r7, sp, #16
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	i2cBuf[0] = 0x02;
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <getCompasMEM+0xb0>)
 8001be6:	2202      	movs	r2, #2
 8001be8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, mpu9265Address, 0x37, 1, i2cBuf, 1, 100);
 8001bea:	2364      	movs	r3, #100	; 0x64
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <getCompasMEM+0xb0>)
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	2237      	movs	r2, #55	; 0x37
 8001bfa:	21d0      	movs	r1, #208	; 0xd0
 8001bfc:	4823      	ldr	r0, [pc, #140]	; (8001c8c <getCompasMEM+0xb4>)
 8001bfe:	f000 fe19 	bl	8002834 <HAL_I2C_Mem_Write>

	i2cBuf[0] = 0x01;
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <getCompasMEM+0xb0>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0x0C<<1, 0x0A, 1, i2cBuf, 1, 100);
 8001c08:	2364      	movs	r3, #100	; 0x64
 8001c0a:	9302      	str	r3, [sp, #8]
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <getCompasMEM+0xb0>)
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2301      	movs	r3, #1
 8001c16:	220a      	movs	r2, #10
 8001c18:	2118      	movs	r1, #24
 8001c1a:	481c      	ldr	r0, [pc, #112]	; (8001c8c <getCompasMEM+0xb4>)
 8001c1c:	f000 fe0a 	bl	8002834 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001c20:	2064      	movs	r0, #100	; 0x64
 8001c22:	f000 fa03 	bl	800202c <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, 0x0C<<1, 0x03, 1, &i2cBuf[1], 6, 100);
 8001c26:	2364      	movs	r3, #100	; 0x64
 8001c28:	9302      	str	r3, [sp, #8]
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <getCompasMEM+0xb8>)
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2301      	movs	r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	2118      	movs	r1, #24
 8001c38:	4814      	ldr	r0, [pc, #80]	; (8001c8c <getCompasMEM+0xb4>)
 8001c3a:	f000 fef5 	bl	8002a28 <HAL_I2C_Mem_Read>

	*x = ((int16_t)i2cBuf[2]<<8) | i2cBuf[1];
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <getCompasMEM+0xb0>)
 8001c40:	789b      	ldrb	r3, [r3, #2]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	b21a      	sxth	r2, r3
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <getCompasMEM+0xb0>)
 8001c48:	785b      	ldrb	r3, [r3, #1]
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	801a      	strh	r2, [r3, #0]
	*y = ((int16_t)i2cBuf[4]<<8) | i2cBuf[3];
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <getCompasMEM+0xb0>)
 8001c56:	791b      	ldrb	r3, [r3, #4]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <getCompasMEM+0xb0>)
 8001c5e:	78db      	ldrb	r3, [r3, #3]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	801a      	strh	r2, [r3, #0]
	*z = ((int16_t)i2cBuf[6]<<8) | i2cBuf[5];
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <getCompasMEM+0xb0>)
 8001c6c:	799b      	ldrb	r3, [r3, #6]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <getCompasMEM+0xb0>)
 8001c74:	795b      	ldrb	r3, [r3, #5]
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	801a      	strh	r2, [r3, #0]

	return;
 8001c80:	bf00      	nop
}
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000270 	.word	0x20000270
 8001c8c:	2000021c 	.word	0x2000021c
 8001c90:	20000271 	.word	0x20000271

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c98:	b672      	cpsid	i
}
 8001c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <Error_Handler+0x8>
	...

08001ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_MspInit+0x4c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a0f      	ldr	r2, [pc, #60]	; (8001cec <HAL_MspInit+0x4c>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_MspInit+0x4c>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_MspInit+0x4c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_MspInit+0x4c>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_MspInit+0x4c>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cde:	2007      	movs	r0, #7
 8001ce0:	f000 fa7a 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <HardFault_Handler+0x4>

08001cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <MemManage_Handler+0x4>

08001d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <BusFault_Handler+0x4>

08001d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <UsageFault_Handler+0x4>

08001d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d3c:	f000 f956 	bl	8001fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return 1;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_kill>:

int _kill(int pid, int sig)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d5e:	f002 f89b 	bl	8003e98 <__errno>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2216      	movs	r2, #22
 8001d66:	601a      	str	r2, [r3, #0]
  return -1;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_exit>:

void _exit (int status)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ffe7 	bl	8001d54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d86:	e7fe      	b.n	8001d86 <_exit+0x12>

08001d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e00a      	b.n	8001db0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d9a:	f3af 8000 	nop.w
 8001d9e:	4601      	mov	r1, r0
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	b2ca      	uxtb	r2, r1
 8001da8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbf0      	blt.n	8001d9a <_read+0x12>
  }

  return len;
 8001db8:	687b      	ldr	r3, [r7, #4]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e009      	b.n	8001de8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	60ba      	str	r2, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf1      	blt.n	8001dd4 <_write+0x12>
  }
  return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_close>:

int _close(int file)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e22:	605a      	str	r2, [r3, #4]
  return 0;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_isatty>:

int _isatty(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d207      	bcs.n	8001ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e94:	f002 f800 	bl	8003e98 <__errno>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e009      	b.n	8001eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_sbrk+0x64>)
 8001eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20020000 	.word	0x20020000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	2000028c 	.word	0x2000028c
 8001ecc:	200002a8 	.word	0x200002a8

08001ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <SystemInit+0x20>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <SystemInit+0x20>)
 8001edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ef8:	480d      	ldr	r0, [pc, #52]	; (8001f30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001efa:	490e      	ldr	r1, [pc, #56]	; (8001f34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f00:	e002      	b.n	8001f08 <LoopCopyDataInit>

08001f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f06:	3304      	adds	r3, #4

08001f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f0c:	d3f9      	bcc.n	8001f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f10:	4c0b      	ldr	r4, [pc, #44]	; (8001f40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f14:	e001      	b.n	8001f1a <LoopFillZerobss>

08001f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f18:	3204      	adds	r2, #4

08001f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f1c:	d3fb      	bcc.n	8001f16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f1e:	f7ff ffd7 	bl	8001ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f22:	f001 ffbf 	bl	8003ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f26:	f7ff fce3 	bl	80018f0 <main>
  bx  lr    
 8001f2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f34:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f38:	080070f4 	.word	0x080070f4
  ldr r2, =_sbss
 8001f3c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f40:	200002a4 	.word	0x200002a4

08001f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC_IRQHandler>
	...

08001f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <HAL_Init+0x40>)
 8001f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_Init+0x40>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_Init+0x40>)
 8001f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a07      	ldr	r2, [pc, #28]	; (8001f88 <HAL_Init+0x40>)
 8001f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f70:	2003      	movs	r0, #3
 8001f72:	f000 f931 	bl	80021d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f76:	2000      	movs	r0, #0
 8001f78:	f000 f808 	bl	8001f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f7c:	f7ff fe90 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023c00 	.word	0x40023c00

08001f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_InitTick+0x54>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_InitTick+0x58>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f93b 	bl	8002226 <HAL_SYSTICK_Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e00e      	b.n	8001fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	d80a      	bhi.n	8001fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	f000 f911 	bl	80021ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fcc:	4a06      	ldr	r2, [pc, #24]	; (8001fe8 <HAL_InitTick+0x5c>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	2000000c 	.word	0x2000000c
 8001fe8:	20000008 	.word	0x20000008

08001fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_IncTick+0x20>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x24>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_IncTick+0x24>)
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	2000000c 	.word	0x2000000c
 8002010:	20000290 	.word	0x20000290

08002014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return uwTick;
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <HAL_GetTick+0x14>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	4618      	mov	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000290 	.word	0x20000290

0800202c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff ffee 	bl	8002014 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d005      	beq.n	8002052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_Delay+0x44>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002052:	bf00      	nop
 8002054:	f7ff ffde 	bl	8002014 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d8f7      	bhi.n	8002054 <HAL_Delay+0x28>
  {
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000000c 	.word	0x2000000c

08002074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002090:	4013      	ands	r3, r2
 8002092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800209c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a6:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	60d3      	str	r3, [r2, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <__NVIC_GetPriorityGrouping+0x18>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 0307 	and.w	r3, r3, #7
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	6039      	str	r1, [r7, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db0a      	blt.n	8002102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	490c      	ldr	r1, [pc, #48]	; (8002124 <__NVIC_SetPriority+0x4c>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	0112      	lsls	r2, r2, #4
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	440b      	add	r3, r1
 80020fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002100:	e00a      	b.n	8002118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	4908      	ldr	r1, [pc, #32]	; (8002128 <__NVIC_SetPriority+0x50>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	3b04      	subs	r3, #4
 8002110:	0112      	lsls	r2, r2, #4
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	440b      	add	r3, r1
 8002116:	761a      	strb	r2, [r3, #24]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000e100 	.word	0xe000e100
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	bf28      	it	cs
 800214a:	2304      	movcs	r3, #4
 800214c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3304      	adds	r3, #4
 8002152:	2b06      	cmp	r3, #6
 8002154:	d902      	bls.n	800215c <NVIC_EncodePriority+0x30>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3b03      	subs	r3, #3
 800215a:	e000      	b.n	800215e <NVIC_EncodePriority+0x32>
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002160:	f04f 32ff 	mov.w	r2, #4294967295
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002174:	f04f 31ff 	mov.w	r1, #4294967295
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa01 f303 	lsl.w	r3, r1, r3
 800217e:	43d9      	mvns	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	4313      	orrs	r3, r2
         );
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a4:	d301      	bcc.n	80021aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00f      	b.n	80021ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <SysTick_Config+0x40>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b2:	210f      	movs	r1, #15
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f7ff ff8e 	bl	80020d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <SysTick_Config+0x40>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <SysTick_Config+0x40>)
 80021c4:	2207      	movs	r2, #7
 80021c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	e000e010 	.word	0xe000e010

080021d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff47 	bl	8002074 <__NVIC_SetPriorityGrouping>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002200:	f7ff ff5c 	bl	80020bc <__NVIC_GetPriorityGrouping>
 8002204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff ff8e 	bl	800212c <NVIC_EncodePriority>
 8002210:	4602      	mov	r2, r0
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff5d 	bl	80020d8 <__NVIC_SetPriority>
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7ff ffb0 	bl	8002194 <SysTick_Config>
 8002234:	4603      	mov	r3, r0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e16b      	b.n	8002534 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	429a      	cmp	r2, r3
 8002276:	f040 815a 	bne.w	800252e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d005      	beq.n	8002292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800228e:	2b02      	cmp	r3, #2
 8002290:	d130      	bne.n	80022f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	2203      	movs	r2, #3
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c8:	2201      	movs	r2, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 0201 	and.w	r2, r3, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d017      	beq.n	8002330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d123      	bne.n	8002384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	220f      	movs	r2, #15
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80b4 	beq.w	800252e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b60      	ldr	r3, [pc, #384]	; (800254c <HAL_GPIO_Init+0x30c>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a5f      	ldr	r2, [pc, #380]	; (800254c <HAL_GPIO_Init+0x30c>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b5d      	ldr	r3, [pc, #372]	; (800254c <HAL_GPIO_Init+0x30c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023e2:	4a5b      	ldr	r2, [pc, #364]	; (8002550 <HAL_GPIO_Init+0x310>)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_GPIO_Init+0x314>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02b      	beq.n	8002466 <HAL_GPIO_Init+0x226>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a51      	ldr	r2, [pc, #324]	; (8002558 <HAL_GPIO_Init+0x318>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d025      	beq.n	8002462 <HAL_GPIO_Init+0x222>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a50      	ldr	r2, [pc, #320]	; (800255c <HAL_GPIO_Init+0x31c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d01f      	beq.n	800245e <HAL_GPIO_Init+0x21e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4f      	ldr	r2, [pc, #316]	; (8002560 <HAL_GPIO_Init+0x320>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x21a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <HAL_GPIO_Init+0x324>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d013      	beq.n	8002456 <HAL_GPIO_Init+0x216>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4d      	ldr	r2, [pc, #308]	; (8002568 <HAL_GPIO_Init+0x328>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00d      	beq.n	8002452 <HAL_GPIO_Init+0x212>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4c      	ldr	r2, [pc, #304]	; (800256c <HAL_GPIO_Init+0x32c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d007      	beq.n	800244e <HAL_GPIO_Init+0x20e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4b      	ldr	r2, [pc, #300]	; (8002570 <HAL_GPIO_Init+0x330>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d101      	bne.n	800244a <HAL_GPIO_Init+0x20a>
 8002446:	2307      	movs	r3, #7
 8002448:	e00e      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800244a:	2308      	movs	r3, #8
 800244c:	e00c      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800244e:	2306      	movs	r3, #6
 8002450:	e00a      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002452:	2305      	movs	r3, #5
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002456:	2304      	movs	r3, #4
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x228>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x228>
 8002466:	2300      	movs	r3, #0
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f002 0203 	and.w	r2, r2, #3
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4093      	lsls	r3, r2
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002478:	4935      	ldr	r1, [pc, #212]	; (8002550 <HAL_GPIO_Init+0x310>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002486:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <HAL_GPIO_Init+0x334>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024aa:	4a32      	ldr	r2, [pc, #200]	; (8002574 <HAL_GPIO_Init+0x334>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b0:	4b30      	ldr	r3, [pc, #192]	; (8002574 <HAL_GPIO_Init+0x334>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d4:	4a27      	ldr	r2, [pc, #156]	; (8002574 <HAL_GPIO_Init+0x334>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024da:	4b26      	ldr	r3, [pc, #152]	; (8002574 <HAL_GPIO_Init+0x334>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fe:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <HAL_GPIO_Init+0x334>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_GPIO_Init+0x334>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002528:	4a12      	ldr	r2, [pc, #72]	; (8002574 <HAL_GPIO_Init+0x334>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	f67f ae90 	bls.w	800225c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40013800 	.word	0x40013800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020400 	.word	0x40020400
 800255c:	40020800 	.word	0x40020800
 8002560:	40020c00 	.word	0x40020c00
 8002564:	40021000 	.word	0x40021000
 8002568:	40021400 	.word	0x40021400
 800256c:	40021800 	.word	0x40021800
 8002570:	40021c00 	.word	0x40021c00
 8002574:	40013c00 	.word	0x40013c00

08002578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
 8002584:	4613      	mov	r3, r2
 8002586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002594:	e003      	b.n	800259e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002596:	887b      	ldrh	r3, [r7, #2]
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e12b      	b.n	8002816 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff f942 	bl	800185c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	; 0x24
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800260e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002610:	f001 fbfc 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8002614:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4a81      	ldr	r2, [pc, #516]	; (8002820 <HAL_I2C_Init+0x274>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d807      	bhi.n	8002630 <HAL_I2C_Init+0x84>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4a80      	ldr	r2, [pc, #512]	; (8002824 <HAL_I2C_Init+0x278>)
 8002624:	4293      	cmp	r3, r2
 8002626:	bf94      	ite	ls
 8002628:	2301      	movls	r3, #1
 800262a:	2300      	movhi	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	e006      	b.n	800263e <HAL_I2C_Init+0x92>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4a7d      	ldr	r2, [pc, #500]	; (8002828 <HAL_I2C_Init+0x27c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	bf94      	ite	ls
 8002638:	2301      	movls	r3, #1
 800263a:	2300      	movhi	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0e7      	b.n	8002816 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a78      	ldr	r2, [pc, #480]	; (800282c <HAL_I2C_Init+0x280>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0c9b      	lsrs	r3, r3, #18
 8002650:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	430a      	orrs	r2, r1
 8002664:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4a6a      	ldr	r2, [pc, #424]	; (8002820 <HAL_I2C_Init+0x274>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d802      	bhi.n	8002680 <HAL_I2C_Init+0xd4>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	3301      	adds	r3, #1
 800267e:	e009      	b.n	8002694 <HAL_I2C_Init+0xe8>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	4a69      	ldr	r2, [pc, #420]	; (8002830 <HAL_I2C_Init+0x284>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	099b      	lsrs	r3, r3, #6
 8002692:	3301      	adds	r3, #1
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	430b      	orrs	r3, r1
 800269a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	495c      	ldr	r1, [pc, #368]	; (8002820 <HAL_I2C_Init+0x274>)
 80026b0:	428b      	cmp	r3, r1
 80026b2:	d819      	bhi.n	80026e8 <HAL_I2C_Init+0x13c>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e59      	subs	r1, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c2:	1c59      	adds	r1, r3, #1
 80026c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026c8:	400b      	ands	r3, r1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_I2C_Init+0x138>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1e59      	subs	r1, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e2:	e051      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 80026e4:	2304      	movs	r3, #4
 80026e6:	e04f      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d111      	bne.n	8002714 <HAL_I2C_Init+0x168>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1e58      	subs	r0, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	440b      	add	r3, r1
 80026fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002702:	3301      	adds	r3, #1
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	2b00      	cmp	r3, #0
 800270a:	bf0c      	ite	eq
 800270c:	2301      	moveq	r3, #1
 800270e:	2300      	movne	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	e012      	b.n	800273a <HAL_I2C_Init+0x18e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1e58      	subs	r0, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	0099      	lsls	r1, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	fbb0 f3f3 	udiv	r3, r0, r3
 800272a:	3301      	adds	r3, #1
 800272c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Init+0x196>
 800273e:	2301      	movs	r3, #1
 8002740:	e022      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10e      	bne.n	8002768 <HAL_I2C_Init+0x1bc>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1e58      	subs	r0, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	440b      	add	r3, r1
 8002758:	fbb0 f3f3 	udiv	r3, r0, r3
 800275c:	3301      	adds	r3, #1
 800275e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002766:	e00f      	b.n	8002788 <HAL_I2C_Init+0x1dc>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e58      	subs	r0, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	0099      	lsls	r1, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	fbb0 f3f3 	udiv	r3, r0, r3
 800277e:	3301      	adds	r3, #1
 8002780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	6809      	ldr	r1, [r1, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6911      	ldr	r1, [r2, #16]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	4311      	orrs	r1, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	000186a0 	.word	0x000186a0
 8002824:	001e847f 	.word	0x001e847f
 8002828:	003d08ff 	.word	0x003d08ff
 800282c:	431bde83 	.word	0x431bde83
 8002830:	10624dd3 	.word	0x10624dd3

08002834 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	4608      	mov	r0, r1
 800283e:	4611      	mov	r1, r2
 8002840:	461a      	mov	r2, r3
 8002842:	4603      	mov	r3, r0
 8002844:	817b      	strh	r3, [r7, #10]
 8002846:	460b      	mov	r3, r1
 8002848:	813b      	strh	r3, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284e:	f7ff fbe1 	bl	8002014 <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b20      	cmp	r3, #32
 800285e:	f040 80d9 	bne.w	8002a14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2319      	movs	r3, #25
 8002868:	2201      	movs	r2, #1
 800286a:	496d      	ldr	r1, [pc, #436]	; (8002a20 <HAL_I2C_Mem_Write+0x1ec>)
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fc7f 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
 800287a:	e0cc      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_I2C_Mem_Write+0x56>
 8002886:	2302      	movs	r3, #2
 8002888:	e0c5      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d007      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2221      	movs	r2, #33	; 0x21
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2240      	movs	r2, #64	; 0x40
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <HAL_I2C_Mem_Write+0x1f0>)
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028f2:	88f8      	ldrh	r0, [r7, #6]
 80028f4:	893a      	ldrh	r2, [r7, #8]
 80028f6:	8979      	ldrh	r1, [r7, #10]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4603      	mov	r3, r0
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 fab6 	bl	8002e74 <I2C_RequestMemoryWrite>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d052      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e081      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fd00 	bl	800331c <I2C_WaitOnTXEFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b04      	cmp	r3, #4
 8002928:	d107      	bne.n	800293a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06b      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b04      	cmp	r3, #4
 800297a:	d11b      	bne.n	80029b4 <HAL_I2C_Mem_Write+0x180>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d017      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1aa      	bne.n	8002912 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fcec 	bl	800339e <I2C_WaitOnBTFFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d107      	bne.n	80029e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e016      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	e000      	b.n	8002a16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
  }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000

08002a28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	; 0x30
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	813b      	strh	r3, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a42:	f7ff fae7 	bl	8002014 <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	f040 8208 	bne.w	8002e66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2319      	movs	r3, #25
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	497b      	ldr	r1, [pc, #492]	; (8002c4c <HAL_I2C_Mem_Read+0x224>)
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fb85 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e1fb      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_I2C_Mem_Read+0x56>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e1f4      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d007      	beq.n	8002aa4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2222      	movs	r2, #34	; 0x22
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2240      	movs	r2, #64	; 0x40
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a5b      	ldr	r2, [pc, #364]	; (8002c50 <HAL_I2C_Mem_Read+0x228>)
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ae6:	88f8      	ldrh	r0, [r7, #6]
 8002ae8:	893a      	ldrh	r2, [r7, #8]
 8002aea:	8979      	ldrh	r1, [r7, #10]
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4603      	mov	r3, r0
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fa52 	bl	8002fa0 <I2C_RequestMemoryRead>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e1b0      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d113      	bne.n	8002b36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	623b      	str	r3, [r7, #32]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	e184      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d11b      	bne.n	8002b76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e164      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d11b      	bne.n	8002bb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	e144      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bcc:	e138      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	f200 80f1 	bhi.w	8002dba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d123      	bne.n	8002c28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fc1b 	bl	8003420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e139      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c26:	e10b      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d14e      	bne.n	8002cce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	2200      	movs	r2, #0
 8002c38:	4906      	ldr	r1, [pc, #24]	; (8002c54 <HAL_I2C_Mem_Read+0x22c>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fa98 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e10e      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
 8002c4a:	bf00      	nop
 8002c4c:	00100002 	.word	0x00100002
 8002c50:	ffff0000 	.word	0xffff0000
 8002c54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ccc:	e0b8      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4966      	ldr	r1, [pc, #408]	; (8002e70 <HAL_I2C_Mem_Read+0x448>)
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fa49 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0bf      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691a      	ldr	r2, [r3, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	2200      	movs	r2, #0
 8002d32:	494f      	ldr	r1, [pc, #316]	; (8002e70 <HAL_I2C_Mem_Read+0x448>)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fa1b 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e091      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002db8:	e042      	b.n	8002e40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fb2e 	bl	8003420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e04c      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d118      	bne.n	8002e40 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f aec2 	bne.w	8002bce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
  }
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3728      	adds	r7, #40	; 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	00010004 	.word	0x00010004

08002e74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	817b      	strh	r3, [r7, #10]
 8002e86:	460b      	mov	r3, r1
 8002e88:	813b      	strh	r3, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f960 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00d      	beq.n	8002ed2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec4:	d103      	bne.n	8002ece <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e05f      	b.n	8002f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ed2:	897b      	ldrh	r3, [r7, #10]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ee0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	6a3a      	ldr	r2, [r7, #32]
 8002ee6:	492d      	ldr	r1, [pc, #180]	; (8002f9c <I2C_RequestMemoryWrite+0x128>)
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f998 	bl	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e04c      	b.n	8002f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f10:	6a39      	ldr	r1, [r7, #32]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa02 	bl	800331c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d107      	bne.n	8002f36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e02b      	b.n	8002f92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f40:	893b      	ldrh	r3, [r7, #8]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	611a      	str	r2, [r3, #16]
 8002f4a:	e021      	b.n	8002f90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f4c:	893b      	ldrh	r3, [r7, #8]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	6a39      	ldr	r1, [r7, #32]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 f9dc 	bl	800331c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00d      	beq.n	8002f86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d107      	bne.n	8002f82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e005      	b.n	8002f92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f86:	893b      	ldrh	r3, [r7, #8]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	00010002 	.word	0x00010002

08002fa0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	4608      	mov	r0, r1
 8002faa:	4611      	mov	r1, r2
 8002fac:	461a      	mov	r2, r3
 8002fae:	4603      	mov	r3, r0
 8002fb0:	817b      	strh	r3, [r7, #10]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	813b      	strh	r3, [r7, #8]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f8c2 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003000:	d103      	bne.n	800300a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0aa      	b.n	8003164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800300e:	897b      	ldrh	r3, [r7, #10]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800301c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	4952      	ldr	r1, [pc, #328]	; (800316c <I2C_RequestMemoryRead+0x1cc>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f8fa 	bl	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e097      	b.n	8003164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800304a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304c:	6a39      	ldr	r1, [r7, #32]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f964 	bl	800331c <I2C_WaitOnTXEFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00d      	beq.n	8003076 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	2b04      	cmp	r3, #4
 8003060:	d107      	bne.n	8003072 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003070:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e076      	b.n	8003164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800307c:	893b      	ldrh	r3, [r7, #8]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	611a      	str	r2, [r3, #16]
 8003086:	e021      	b.n	80030cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003088:	893b      	ldrh	r3, [r7, #8]
 800308a:	0a1b      	lsrs	r3, r3, #8
 800308c:	b29b      	uxth	r3, r3
 800308e:	b2da      	uxtb	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003098:	6a39      	ldr	r1, [r7, #32]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f93e 	bl	800331c <I2C_WaitOnTXEFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d107      	bne.n	80030be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e050      	b.n	8003164 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030c2:	893b      	ldrh	r3, [r7, #8]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ce:	6a39      	ldr	r1, [r7, #32]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f923 	bl	800331c <I2C_WaitOnTXEFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d107      	bne.n	80030f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e035      	b.n	8003164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003106:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	2200      	movs	r2, #0
 8003110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 f82b 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312e:	d103      	bne.n	8003138 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e013      	b.n	8003164 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800313c:	897b      	ldrh	r3, [r7, #10]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	6a3a      	ldr	r2, [r7, #32]
 8003150:	4906      	ldr	r1, [pc, #24]	; (800316c <I2C_RequestMemoryRead+0x1cc>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f863 	bl	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	00010002 	.word	0x00010002

08003170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003180:	e025      	b.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d021      	beq.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fe ff43 	bl	8002014 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f043 0220 	orr.w	r2, r3, #32
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e023      	b.n	8003216 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d10d      	bne.n	80031f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	43da      	mvns	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4013      	ands	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2300      	movne	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	e00c      	b.n	800320e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	429a      	cmp	r2, r3
 8003212:	d0b6      	beq.n	8003182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800322c:	e051      	b.n	80032d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d123      	bne.n	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003256:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0204 	orr.w	r2, r3, #4
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e046      	b.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d021      	beq.n	80032d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328e:	f7fe fec1 	bl	8002014 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	429a      	cmp	r2, r3
 800329c:	d302      	bcc.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d116      	bne.n	80032d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e020      	b.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d10c      	bne.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4013      	ands	r3, r2
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf14      	ite	ne
 80032ee:	2301      	movne	r3, #1
 80032f0:	2300      	moveq	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	e00b      	b.n	800330e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	43da      	mvns	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d18d      	bne.n	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003328:	e02d      	b.n	8003386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8ce 	bl	80034cc <I2C_IsAcknowledgeFailed>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e02d      	b.n	8003396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d021      	beq.n	8003386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003342:	f7fe fe67 	bl	8002014 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d116      	bne.n	8003386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e007      	b.n	8003396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d1ca      	bne.n	800332a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033aa:	e02d      	b.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f88d 	bl	80034cc <I2C_IsAcknowledgeFailed>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e02d      	b.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c2:	d021      	beq.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c4:	f7fe fe26 	bl	8002014 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d1ca      	bne.n	80033ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800342c:	e042      	b.n	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b10      	cmp	r3, #16
 800343a:	d119      	bne.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0210 	mvn.w	r2, #16
 8003444:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e029      	b.n	80034c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003470:	f7fe fdd0 	bl	8002014 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	429a      	cmp	r2, r3
 800347e:	d302      	bcc.n	8003486 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d1b5      	bne.n	800342e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	d11b      	bne.n	800351c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e267      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d075      	beq.n	8003636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354a:	4b88      	ldr	r3, [pc, #544]	; (800376c <HAL_RCC_OscConfig+0x240>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b04      	cmp	r3, #4
 8003554:	d00c      	beq.n	8003570 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003556:	4b85      	ldr	r3, [pc, #532]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800355e:	2b08      	cmp	r3, #8
 8003560:	d112      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003562:	4b82      	ldr	r3, [pc, #520]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800356e:	d10b      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	4b7e      	ldr	r3, [pc, #504]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05b      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d157      	bne.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e242      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_OscConfig+0x74>
 8003592:	4b76      	ldr	r3, [pc, #472]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a75      	ldr	r2, [pc, #468]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e01d      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x98>
 80035aa:	4b70      	ldr	r3, [pc, #448]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6f      	ldr	r2, [pc, #444]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b6d      	ldr	r3, [pc, #436]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6c      	ldr	r2, [pc, #432]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035c4:	4b69      	ldr	r3, [pc, #420]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a68      	ldr	r2, [pc, #416]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b66      	ldr	r3, [pc, #408]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a65      	ldr	r2, [pc, #404]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fd16 	bl	8002014 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe fd12 	bl	8002014 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	; 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e207      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b5b      	ldr	r3, [pc, #364]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0xc0>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe fd02 	bl	8002014 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe fcfe 	bl	8002014 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1f3      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	4b51      	ldr	r3, [pc, #324]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d063      	beq.n	800370a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003642:	4b4a      	ldr	r3, [pc, #296]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003656:	2b08      	cmp	r3, #8
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365a:	4b44      	ldr	r3, [pc, #272]	; (800376c <HAL_RCC_OscConfig+0x240>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	4b41      	ldr	r3, [pc, #260]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1c7      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b3b      	ldr	r3, [pc, #236]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4937      	ldr	r1, [pc, #220]	; (800376c <HAL_RCC_OscConfig+0x240>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	e03a      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369c:	4b34      	ldr	r3, [pc, #208]	; (8003770 <HAL_RCC_OscConfig+0x244>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe fcb7 	bl	8002014 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe fcb3 	bl	8002014 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1a8      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	4b2b      	ldr	r3, [pc, #172]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4925      	ldr	r1, [pc, #148]	; (800376c <HAL_RCC_OscConfig+0x240>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_OscConfig+0x244>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fc96 	bl	8002014 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fe fc92 	bl	8002014 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e187      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4b1b      	ldr	r3, [pc, #108]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCC_OscConfig+0x248>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe fc76 	bl	8002014 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fc72 	bl	8002014 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e167      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_OscConfig+0x240>)
 8003740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x200>
 800374a:	e01b      	b.n	8003784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <HAL_RCC_OscConfig+0x248>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fe fc5f 	bl	8002014 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	e00e      	b.n	8003778 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800375a:	f7fe fc5b 	bl	8002014 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d907      	bls.n	8003778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e150      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
 800376c:	40023800 	.word	0x40023800
 8003770:	42470000 	.word	0x42470000
 8003774:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003778:	4b88      	ldr	r3, [pc, #544]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ea      	bne.n	800375a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8097 	beq.w	80038c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003796:	4b81      	ldr	r3, [pc, #516]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	4b7d      	ldr	r3, [pc, #500]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a7c      	ldr	r2, [pc, #496]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
 80037b2:	4b7a      	ldr	r3, [pc, #488]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c2:	4b77      	ldr	r3, [pc, #476]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d118      	bne.n	8003800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ce:	4b74      	ldr	r3, [pc, #464]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a73      	ldr	r2, [pc, #460]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037da:	f7fe fc1b 	bl	8002014 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e2:	f7fe fc17 	bl	8002014 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e10c      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	4b6a      	ldr	r3, [pc, #424]	; (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x2ea>
 8003808:	4b64      	ldr	r3, [pc, #400]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4a63      	ldr	r2, [pc, #396]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	; 0x70
 8003814:	e01c      	b.n	8003850 <HAL_RCC_OscConfig+0x324>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x30c>
 800381e:	4b5f      	ldr	r3, [pc, #380]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	4a5e      	ldr	r2, [pc, #376]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6713      	str	r3, [r2, #112]	; 0x70
 800382a:	4b5c      	ldr	r3, [pc, #368]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a5b      	ldr	r2, [pc, #364]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0x324>
 8003838:	4b58      	ldr	r3, [pc, #352]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4a57      	ldr	r2, [pc, #348]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	; 0x70
 8003844:	4b55      	ldr	r3, [pc, #340]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	4a54      	ldr	r2, [pc, #336]	; (800399c <HAL_RCC_OscConfig+0x470>)
 800384a:	f023 0304 	bic.w	r3, r3, #4
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fe fbdc 	bl	8002014 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fe fbd8 	bl	8002014 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0cb      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	4b49      	ldr	r3, [pc, #292]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <HAL_RCC_OscConfig+0x334>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003884:	f7fe fbc6 	bl	8002014 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe fbc2 	bl	8002014 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0b5      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a2:	4b3e      	ldr	r3, [pc, #248]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ee      	bne.n	800388c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b39      	ldr	r3, [pc, #228]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	4a38      	ldr	r2, [pc, #224]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a1 	beq.w	8003a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ca:	4b34      	ldr	r3, [pc, #208]	; (800399c <HAL_RCC_OscConfig+0x470>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d05c      	beq.n	8003990 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d141      	bne.n	8003962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <HAL_RCC_OscConfig+0x478>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fb96 	bl	8002014 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe fb92 	bl	8002014 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e087      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	491b      	ldr	r1, [pc, #108]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003934:	4b1b      	ldr	r3, [pc, #108]	; (80039a4 <HAL_RCC_OscConfig+0x478>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7fe fb6b 	bl	8002014 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003942:	f7fe fb67 	bl	8002014 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e05c      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x416>
 8003960:	e054      	b.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <HAL_RCC_OscConfig+0x478>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe fb54 	bl	8002014 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003970:	f7fe fb50 	bl	8002014 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e045      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <HAL_RCC_OscConfig+0x470>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x444>
 800398e:	e03d      	b.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e038      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
 800399c:	40023800 	.word	0x40023800
 80039a0:	40007000 	.word	0x40007000
 80039a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x4ec>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d028      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d121      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d11a      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039d8:	4013      	ands	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d111      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	3b01      	subs	r3, #1
 80039f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0cc      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b68      	ldr	r3, [pc, #416]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d90c      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b65      	ldr	r3, [pc, #404]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b63      	ldr	r3, [pc, #396]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b8      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a70:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a58      	ldr	r2, [pc, #352]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a88:	4b53      	ldr	r3, [pc, #332]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b50      	ldr	r3, [pc, #320]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	494d      	ldr	r1, [pc, #308]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d044      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d119      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e067      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4934      	ldr	r1, [pc, #208]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe fa82 	bl	8002014 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fe fa7e 	bl	8002014 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e04f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 020c 	and.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1eb      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d20c      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e032      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4916      	ldr	r1, [pc, #88]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8e:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	490e      	ldr	r1, [pc, #56]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ba2:	f000 f821 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	490a      	ldr	r1, [pc, #40]	; (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe f9e2 	bl	8001f8c <HAL_InitTick>

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	08006cf4 	.word	0x08006cf4
 8003be0:	20000004 	.word	0x20000004
 8003be4:	20000008 	.word	0x20000008

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bec:	b094      	sub	sp, #80	; 0x50
 8003bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c00:	4b79      	ldr	r3, [pc, #484]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d00d      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x40>
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	f200 80e1 	bhi.w	8003dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x34>
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1a:	e0db      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b73      	ldr	r3, [pc, #460]	; (8003dec <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c20:	e0db      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c22:	4b73      	ldr	r3, [pc, #460]	; (8003df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c26:	e0d8      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c28:	4b6f      	ldr	r3, [pc, #444]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c30:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c32:	4b6d      	ldr	r3, [pc, #436]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d063      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3e:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	2200      	movs	r2, #0
 8003c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30
 8003c52:	2300      	movs	r3, #0
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
 8003c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	0159      	lsls	r1, r3, #5
 8003c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6c:	0150      	lsls	r0, r2, #5
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4621      	mov	r1, r4
 8003c74:	1a51      	subs	r1, r2, r1
 8003c76:	6139      	str	r1, [r7, #16]
 8003c78:	4629      	mov	r1, r5
 8003c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	018b      	lsls	r3, r1, #6
 8003c90:	4651      	mov	r1, sl
 8003c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c96:	4651      	mov	r1, sl
 8003c98:	018a      	lsls	r2, r1, #6
 8003c9a:	4651      	mov	r1, sl
 8003c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cba:	4690      	mov	r8, r2
 8003cbc:	4699      	mov	r9, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	eb18 0303 	adds.w	r3, r8, r3
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	eb49 0303 	adc.w	r3, r9, r3
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	024b      	lsls	r3, r1, #9
 8003cde:	4621      	mov	r1, r4
 8003ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	024a      	lsls	r2, r1, #9
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cee:	2200      	movs	r2, #0
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cf8:	f7fc ffc6 	bl	8000c88 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4613      	mov	r3, r2
 8003d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d04:	e058      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d06:	4b38      	ldr	r3, [pc, #224]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	4611      	mov	r1, r2
 8003d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d16:	623b      	str	r3, [r7, #32]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	f04f 0000 	mov.w	r0, #0
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	0159      	lsls	r1, r3, #5
 8003d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d32:	0150      	lsls	r0, r2, #5
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4641      	mov	r1, r8
 8003d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d3e:	4649      	mov	r1, r9
 8003d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d58:	ebb2 040a 	subs.w	r4, r2, sl
 8003d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	00eb      	lsls	r3, r5, #3
 8003d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6e:	00e2      	lsls	r2, r4, #3
 8003d70:	4614      	mov	r4, r2
 8003d72:	461d      	mov	r5, r3
 8003d74:	4643      	mov	r3, r8
 8003d76:	18e3      	adds	r3, r4, r3
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	eb45 0303 	adc.w	r3, r5, r3
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d8e:	4629      	mov	r1, r5
 8003d90:	028b      	lsls	r3, r1, #10
 8003d92:	4621      	mov	r1, r4
 8003d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d98:	4621      	mov	r1, r4
 8003d9a:	028a      	lsls	r2, r1, #10
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	61fa      	str	r2, [r7, #28]
 8003da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dac:	f7fc ff6c 	bl	8000c88 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4613      	mov	r3, r2
 8003db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dd2:	e002      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_GetSysClockFreq+0x204>)
 8003dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3750      	adds	r7, #80	; 0x50
 8003de0:	46bd      	mov	sp, r7
 8003de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	00f42400 	.word	0x00f42400
 8003df0:	007a1200 	.word	0x007a1200

08003df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df8:	4b03      	ldr	r3, [pc, #12]	; (8003e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000004 	.word	0x20000004

08003e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e10:	f7ff fff0 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	0a9b      	lsrs	r3, r3, #10
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	4903      	ldr	r1, [pc, #12]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e22:	5ccb      	ldrb	r3, [r1, r3]
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	08006d04 	.word	0x08006d04

08003e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	220f      	movs	r2, #15
 8003e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0203 	and.w	r2, r3, #3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e68:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_RCC_GetClockConfig+0x60>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0207 	and.w	r2, r3, #7
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	601a      	str	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40023c00 	.word	0x40023c00

08003e98 <__errno>:
 8003e98:	4b01      	ldr	r3, [pc, #4]	; (8003ea0 <__errno+0x8>)
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000010 	.word	0x20000010

08003ea4 <__libc_init_array>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	4d0d      	ldr	r5, [pc, #52]	; (8003edc <__libc_init_array+0x38>)
 8003ea8:	4c0d      	ldr	r4, [pc, #52]	; (8003ee0 <__libc_init_array+0x3c>)
 8003eaa:	1b64      	subs	r4, r4, r5
 8003eac:	10a4      	asrs	r4, r4, #2
 8003eae:	2600      	movs	r6, #0
 8003eb0:	42a6      	cmp	r6, r4
 8003eb2:	d109      	bne.n	8003ec8 <__libc_init_array+0x24>
 8003eb4:	4d0b      	ldr	r5, [pc, #44]	; (8003ee4 <__libc_init_array+0x40>)
 8003eb6:	4c0c      	ldr	r4, [pc, #48]	; (8003ee8 <__libc_init_array+0x44>)
 8003eb8:	f002 ff02 	bl	8006cc0 <_init>
 8003ebc:	1b64      	subs	r4, r4, r5
 8003ebe:	10a4      	asrs	r4, r4, #2
 8003ec0:	2600      	movs	r6, #0
 8003ec2:	42a6      	cmp	r6, r4
 8003ec4:	d105      	bne.n	8003ed2 <__libc_init_array+0x2e>
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ecc:	4798      	blx	r3
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7ee      	b.n	8003eb0 <__libc_init_array+0xc>
 8003ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed6:	4798      	blx	r3
 8003ed8:	3601      	adds	r6, #1
 8003eda:	e7f2      	b.n	8003ec2 <__libc_init_array+0x1e>
 8003edc:	080070ec 	.word	0x080070ec
 8003ee0:	080070ec 	.word	0x080070ec
 8003ee4:	080070ec 	.word	0x080070ec
 8003ee8:	080070f0 	.word	0x080070f0

08003eec <memset>:
 8003eec:	4402      	add	r2, r0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d100      	bne.n	8003ef6 <memset+0xa>
 8003ef4:	4770      	bx	lr
 8003ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8003efa:	e7f9      	b.n	8003ef0 <memset+0x4>

08003efc <__cvt>:
 8003efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	ec55 4b10 	vmov	r4, r5, d0
 8003f04:	2d00      	cmp	r5, #0
 8003f06:	460e      	mov	r6, r1
 8003f08:	4619      	mov	r1, r3
 8003f0a:	462b      	mov	r3, r5
 8003f0c:	bfbb      	ittet	lt
 8003f0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f12:	461d      	movlt	r5, r3
 8003f14:	2300      	movge	r3, #0
 8003f16:	232d      	movlt	r3, #45	; 0x2d
 8003f18:	700b      	strb	r3, [r1, #0]
 8003f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003f20:	4691      	mov	r9, r2
 8003f22:	f023 0820 	bic.w	r8, r3, #32
 8003f26:	bfbc      	itt	lt
 8003f28:	4622      	movlt	r2, r4
 8003f2a:	4614      	movlt	r4, r2
 8003f2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f30:	d005      	beq.n	8003f3e <__cvt+0x42>
 8003f32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003f36:	d100      	bne.n	8003f3a <__cvt+0x3e>
 8003f38:	3601      	adds	r6, #1
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	e000      	b.n	8003f40 <__cvt+0x44>
 8003f3e:	2103      	movs	r1, #3
 8003f40:	ab03      	add	r3, sp, #12
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	ab02      	add	r3, sp, #8
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	ec45 4b10 	vmov	d0, r4, r5
 8003f4c:	4653      	mov	r3, sl
 8003f4e:	4632      	mov	r2, r6
 8003f50:	f000 fcea 	bl	8004928 <_dtoa_r>
 8003f54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003f58:	4607      	mov	r7, r0
 8003f5a:	d102      	bne.n	8003f62 <__cvt+0x66>
 8003f5c:	f019 0f01 	tst.w	r9, #1
 8003f60:	d022      	beq.n	8003fa8 <__cvt+0xac>
 8003f62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003f66:	eb07 0906 	add.w	r9, r7, r6
 8003f6a:	d110      	bne.n	8003f8e <__cvt+0x92>
 8003f6c:	783b      	ldrb	r3, [r7, #0]
 8003f6e:	2b30      	cmp	r3, #48	; 0x30
 8003f70:	d10a      	bne.n	8003f88 <__cvt+0x8c>
 8003f72:	2200      	movs	r2, #0
 8003f74:	2300      	movs	r3, #0
 8003f76:	4620      	mov	r0, r4
 8003f78:	4629      	mov	r1, r5
 8003f7a:	f7fc fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f7e:	b918      	cbnz	r0, 8003f88 <__cvt+0x8c>
 8003f80:	f1c6 0601 	rsb	r6, r6, #1
 8003f84:	f8ca 6000 	str.w	r6, [sl]
 8003f88:	f8da 3000 	ldr.w	r3, [sl]
 8003f8c:	4499      	add	r9, r3
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2300      	movs	r3, #0
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fc fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f9a:	b108      	cbz	r0, 8003fa0 <__cvt+0xa4>
 8003f9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003fa0:	2230      	movs	r2, #48	; 0x30
 8003fa2:	9b03      	ldr	r3, [sp, #12]
 8003fa4:	454b      	cmp	r3, r9
 8003fa6:	d307      	bcc.n	8003fb8 <__cvt+0xbc>
 8003fa8:	9b03      	ldr	r3, [sp, #12]
 8003faa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003fac:	1bdb      	subs	r3, r3, r7
 8003fae:	4638      	mov	r0, r7
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	b004      	add	sp, #16
 8003fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fb8:	1c59      	adds	r1, r3, #1
 8003fba:	9103      	str	r1, [sp, #12]
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e7f0      	b.n	8003fa2 <__cvt+0xa6>

08003fc0 <__exponent>:
 8003fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2900      	cmp	r1, #0
 8003fc6:	bfb8      	it	lt
 8003fc8:	4249      	neglt	r1, r1
 8003fca:	f803 2b02 	strb.w	r2, [r3], #2
 8003fce:	bfb4      	ite	lt
 8003fd0:	222d      	movlt	r2, #45	; 0x2d
 8003fd2:	222b      	movge	r2, #43	; 0x2b
 8003fd4:	2909      	cmp	r1, #9
 8003fd6:	7042      	strb	r2, [r0, #1]
 8003fd8:	dd2a      	ble.n	8004030 <__exponent+0x70>
 8003fda:	f10d 0407 	add.w	r4, sp, #7
 8003fde:	46a4      	mov	ip, r4
 8003fe0:	270a      	movs	r7, #10
 8003fe2:	46a6      	mov	lr, r4
 8003fe4:	460a      	mov	r2, r1
 8003fe6:	fb91 f6f7 	sdiv	r6, r1, r7
 8003fea:	fb07 1516 	mls	r5, r7, r6, r1
 8003fee:	3530      	adds	r5, #48	; 0x30
 8003ff0:	2a63      	cmp	r2, #99	; 0x63
 8003ff2:	f104 34ff 	add.w	r4, r4, #4294967295
 8003ff6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	dcf1      	bgt.n	8003fe2 <__exponent+0x22>
 8003ffe:	3130      	adds	r1, #48	; 0x30
 8004000:	f1ae 0502 	sub.w	r5, lr, #2
 8004004:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004008:	1c44      	adds	r4, r0, #1
 800400a:	4629      	mov	r1, r5
 800400c:	4561      	cmp	r1, ip
 800400e:	d30a      	bcc.n	8004026 <__exponent+0x66>
 8004010:	f10d 0209 	add.w	r2, sp, #9
 8004014:	eba2 020e 	sub.w	r2, r2, lr
 8004018:	4565      	cmp	r5, ip
 800401a:	bf88      	it	hi
 800401c:	2200      	movhi	r2, #0
 800401e:	4413      	add	r3, r2
 8004020:	1a18      	subs	r0, r3, r0
 8004022:	b003      	add	sp, #12
 8004024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800402a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800402e:	e7ed      	b.n	800400c <__exponent+0x4c>
 8004030:	2330      	movs	r3, #48	; 0x30
 8004032:	3130      	adds	r1, #48	; 0x30
 8004034:	7083      	strb	r3, [r0, #2]
 8004036:	70c1      	strb	r1, [r0, #3]
 8004038:	1d03      	adds	r3, r0, #4
 800403a:	e7f1      	b.n	8004020 <__exponent+0x60>

0800403c <_printf_float>:
 800403c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004040:	ed2d 8b02 	vpush	{d8}
 8004044:	b08d      	sub	sp, #52	; 0x34
 8004046:	460c      	mov	r4, r1
 8004048:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800404c:	4616      	mov	r6, r2
 800404e:	461f      	mov	r7, r3
 8004050:	4605      	mov	r5, r0
 8004052:	f001 fa57 	bl	8005504 <_localeconv_r>
 8004056:	f8d0 a000 	ldr.w	sl, [r0]
 800405a:	4650      	mov	r0, sl
 800405c:	f7fc f8b8 	bl	80001d0 <strlen>
 8004060:	2300      	movs	r3, #0
 8004062:	930a      	str	r3, [sp, #40]	; 0x28
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	9305      	str	r3, [sp, #20]
 8004068:	f8d8 3000 	ldr.w	r3, [r8]
 800406c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004070:	3307      	adds	r3, #7
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	f103 0208 	add.w	r2, r3, #8
 800407a:	f8c8 2000 	str.w	r2, [r8]
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004086:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800408a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800408e:	9307      	str	r3, [sp, #28]
 8004090:	f8cd 8018 	str.w	r8, [sp, #24]
 8004094:	ee08 0a10 	vmov	s16, r0
 8004098:	4b9f      	ldr	r3, [pc, #636]	; (8004318 <_printf_float+0x2dc>)
 800409a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800409e:	f04f 32ff 	mov.w	r2, #4294967295
 80040a2:	f7fc fd43 	bl	8000b2c <__aeabi_dcmpun>
 80040a6:	bb88      	cbnz	r0, 800410c <_printf_float+0xd0>
 80040a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040ac:	4b9a      	ldr	r3, [pc, #616]	; (8004318 <_printf_float+0x2dc>)
 80040ae:	f04f 32ff 	mov.w	r2, #4294967295
 80040b2:	f7fc fd1d 	bl	8000af0 <__aeabi_dcmple>
 80040b6:	bb48      	cbnz	r0, 800410c <_printf_float+0xd0>
 80040b8:	2200      	movs	r2, #0
 80040ba:	2300      	movs	r3, #0
 80040bc:	4640      	mov	r0, r8
 80040be:	4649      	mov	r1, r9
 80040c0:	f7fc fd0c 	bl	8000adc <__aeabi_dcmplt>
 80040c4:	b110      	cbz	r0, 80040cc <_printf_float+0x90>
 80040c6:	232d      	movs	r3, #45	; 0x2d
 80040c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040cc:	4b93      	ldr	r3, [pc, #588]	; (800431c <_printf_float+0x2e0>)
 80040ce:	4894      	ldr	r0, [pc, #592]	; (8004320 <_printf_float+0x2e4>)
 80040d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80040d4:	bf94      	ite	ls
 80040d6:	4698      	movls	r8, r3
 80040d8:	4680      	movhi	r8, r0
 80040da:	2303      	movs	r3, #3
 80040dc:	6123      	str	r3, [r4, #16]
 80040de:	9b05      	ldr	r3, [sp, #20]
 80040e0:	f023 0204 	bic.w	r2, r3, #4
 80040e4:	6022      	str	r2, [r4, #0]
 80040e6:	f04f 0900 	mov.w	r9, #0
 80040ea:	9700      	str	r7, [sp, #0]
 80040ec:	4633      	mov	r3, r6
 80040ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80040f0:	4621      	mov	r1, r4
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 f9d8 	bl	80044a8 <_printf_common>
 80040f8:	3001      	adds	r0, #1
 80040fa:	f040 8090 	bne.w	800421e <_printf_float+0x1e2>
 80040fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004102:	b00d      	add	sp, #52	; 0x34
 8004104:	ecbd 8b02 	vpop	{d8}
 8004108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410c:	4642      	mov	r2, r8
 800410e:	464b      	mov	r3, r9
 8004110:	4640      	mov	r0, r8
 8004112:	4649      	mov	r1, r9
 8004114:	f7fc fd0a 	bl	8000b2c <__aeabi_dcmpun>
 8004118:	b140      	cbz	r0, 800412c <_printf_float+0xf0>
 800411a:	464b      	mov	r3, r9
 800411c:	2b00      	cmp	r3, #0
 800411e:	bfbc      	itt	lt
 8004120:	232d      	movlt	r3, #45	; 0x2d
 8004122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004126:	487f      	ldr	r0, [pc, #508]	; (8004324 <_printf_float+0x2e8>)
 8004128:	4b7f      	ldr	r3, [pc, #508]	; (8004328 <_printf_float+0x2ec>)
 800412a:	e7d1      	b.n	80040d0 <_printf_float+0x94>
 800412c:	6863      	ldr	r3, [r4, #4]
 800412e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004132:	9206      	str	r2, [sp, #24]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	d13f      	bne.n	80041b8 <_printf_float+0x17c>
 8004138:	2306      	movs	r3, #6
 800413a:	6063      	str	r3, [r4, #4]
 800413c:	9b05      	ldr	r3, [sp, #20]
 800413e:	6861      	ldr	r1, [r4, #4]
 8004140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004144:	2300      	movs	r3, #0
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	ab0a      	add	r3, sp, #40	; 0x28
 800414a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800414e:	ab09      	add	r3, sp, #36	; 0x24
 8004150:	ec49 8b10 	vmov	d0, r8, r9
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6022      	str	r2, [r4, #0]
 8004158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800415c:	4628      	mov	r0, r5
 800415e:	f7ff fecd 	bl	8003efc <__cvt>
 8004162:	9b06      	ldr	r3, [sp, #24]
 8004164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004166:	2b47      	cmp	r3, #71	; 0x47
 8004168:	4680      	mov	r8, r0
 800416a:	d108      	bne.n	800417e <_printf_float+0x142>
 800416c:	1cc8      	adds	r0, r1, #3
 800416e:	db02      	blt.n	8004176 <_printf_float+0x13a>
 8004170:	6863      	ldr	r3, [r4, #4]
 8004172:	4299      	cmp	r1, r3
 8004174:	dd41      	ble.n	80041fa <_printf_float+0x1be>
 8004176:	f1ab 0b02 	sub.w	fp, fp, #2
 800417a:	fa5f fb8b 	uxtb.w	fp, fp
 800417e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004182:	d820      	bhi.n	80041c6 <_printf_float+0x18a>
 8004184:	3901      	subs	r1, #1
 8004186:	465a      	mov	r2, fp
 8004188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800418c:	9109      	str	r1, [sp, #36]	; 0x24
 800418e:	f7ff ff17 	bl	8003fc0 <__exponent>
 8004192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004194:	1813      	adds	r3, r2, r0
 8004196:	2a01      	cmp	r2, #1
 8004198:	4681      	mov	r9, r0
 800419a:	6123      	str	r3, [r4, #16]
 800419c:	dc02      	bgt.n	80041a4 <_printf_float+0x168>
 800419e:	6822      	ldr	r2, [r4, #0]
 80041a0:	07d2      	lsls	r2, r2, #31
 80041a2:	d501      	bpl.n	80041a8 <_printf_float+0x16c>
 80041a4:	3301      	adds	r3, #1
 80041a6:	6123      	str	r3, [r4, #16]
 80041a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d09c      	beq.n	80040ea <_printf_float+0xae>
 80041b0:	232d      	movs	r3, #45	; 0x2d
 80041b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b6:	e798      	b.n	80040ea <_printf_float+0xae>
 80041b8:	9a06      	ldr	r2, [sp, #24]
 80041ba:	2a47      	cmp	r2, #71	; 0x47
 80041bc:	d1be      	bne.n	800413c <_printf_float+0x100>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1bc      	bne.n	800413c <_printf_float+0x100>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e7b9      	b.n	800413a <_printf_float+0xfe>
 80041c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80041ca:	d118      	bne.n	80041fe <_printf_float+0x1c2>
 80041cc:	2900      	cmp	r1, #0
 80041ce:	6863      	ldr	r3, [r4, #4]
 80041d0:	dd0b      	ble.n	80041ea <_printf_float+0x1ae>
 80041d2:	6121      	str	r1, [r4, #16]
 80041d4:	b913      	cbnz	r3, 80041dc <_printf_float+0x1a0>
 80041d6:	6822      	ldr	r2, [r4, #0]
 80041d8:	07d0      	lsls	r0, r2, #31
 80041da:	d502      	bpl.n	80041e2 <_printf_float+0x1a6>
 80041dc:	3301      	adds	r3, #1
 80041de:	440b      	add	r3, r1
 80041e0:	6123      	str	r3, [r4, #16]
 80041e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80041e4:	f04f 0900 	mov.w	r9, #0
 80041e8:	e7de      	b.n	80041a8 <_printf_float+0x16c>
 80041ea:	b913      	cbnz	r3, 80041f2 <_printf_float+0x1b6>
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	07d2      	lsls	r2, r2, #31
 80041f0:	d501      	bpl.n	80041f6 <_printf_float+0x1ba>
 80041f2:	3302      	adds	r3, #2
 80041f4:	e7f4      	b.n	80041e0 <_printf_float+0x1a4>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e7f2      	b.n	80041e0 <_printf_float+0x1a4>
 80041fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80041fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004200:	4299      	cmp	r1, r3
 8004202:	db05      	blt.n	8004210 <_printf_float+0x1d4>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	6121      	str	r1, [r4, #16]
 8004208:	07d8      	lsls	r0, r3, #31
 800420a:	d5ea      	bpl.n	80041e2 <_printf_float+0x1a6>
 800420c:	1c4b      	adds	r3, r1, #1
 800420e:	e7e7      	b.n	80041e0 <_printf_float+0x1a4>
 8004210:	2900      	cmp	r1, #0
 8004212:	bfd4      	ite	le
 8004214:	f1c1 0202 	rsble	r2, r1, #2
 8004218:	2201      	movgt	r2, #1
 800421a:	4413      	add	r3, r2
 800421c:	e7e0      	b.n	80041e0 <_printf_float+0x1a4>
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	055a      	lsls	r2, r3, #21
 8004222:	d407      	bmi.n	8004234 <_printf_float+0x1f8>
 8004224:	6923      	ldr	r3, [r4, #16]
 8004226:	4642      	mov	r2, r8
 8004228:	4631      	mov	r1, r6
 800422a:	4628      	mov	r0, r5
 800422c:	47b8      	blx	r7
 800422e:	3001      	adds	r0, #1
 8004230:	d12c      	bne.n	800428c <_printf_float+0x250>
 8004232:	e764      	b.n	80040fe <_printf_float+0xc2>
 8004234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004238:	f240 80e0 	bls.w	80043fc <_printf_float+0x3c0>
 800423c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004240:	2200      	movs	r2, #0
 8004242:	2300      	movs	r3, #0
 8004244:	f7fc fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8004248:	2800      	cmp	r0, #0
 800424a:	d034      	beq.n	80042b6 <_printf_float+0x27a>
 800424c:	4a37      	ldr	r2, [pc, #220]	; (800432c <_printf_float+0x2f0>)
 800424e:	2301      	movs	r3, #1
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	f43f af51 	beq.w	80040fe <_printf_float+0xc2>
 800425c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004260:	429a      	cmp	r2, r3
 8004262:	db02      	blt.n	800426a <_printf_float+0x22e>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	07d8      	lsls	r0, r3, #31
 8004268:	d510      	bpl.n	800428c <_printf_float+0x250>
 800426a:	ee18 3a10 	vmov	r3, s16
 800426e:	4652      	mov	r2, sl
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	f43f af41 	beq.w	80040fe <_printf_float+0xc2>
 800427c:	f04f 0800 	mov.w	r8, #0
 8004280:	f104 091a 	add.w	r9, r4, #26
 8004284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004286:	3b01      	subs	r3, #1
 8004288:	4543      	cmp	r3, r8
 800428a:	dc09      	bgt.n	80042a0 <_printf_float+0x264>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	079b      	lsls	r3, r3, #30
 8004290:	f100 8105 	bmi.w	800449e <_printf_float+0x462>
 8004294:	68e0      	ldr	r0, [r4, #12]
 8004296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004298:	4298      	cmp	r0, r3
 800429a:	bfb8      	it	lt
 800429c:	4618      	movlt	r0, r3
 800429e:	e730      	b.n	8004102 <_printf_float+0xc6>
 80042a0:	2301      	movs	r3, #1
 80042a2:	464a      	mov	r2, r9
 80042a4:	4631      	mov	r1, r6
 80042a6:	4628      	mov	r0, r5
 80042a8:	47b8      	blx	r7
 80042aa:	3001      	adds	r0, #1
 80042ac:	f43f af27 	beq.w	80040fe <_printf_float+0xc2>
 80042b0:	f108 0801 	add.w	r8, r8, #1
 80042b4:	e7e6      	b.n	8004284 <_printf_float+0x248>
 80042b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	dc39      	bgt.n	8004330 <_printf_float+0x2f4>
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <_printf_float+0x2f0>)
 80042be:	2301      	movs	r3, #1
 80042c0:	4631      	mov	r1, r6
 80042c2:	4628      	mov	r0, r5
 80042c4:	47b8      	blx	r7
 80042c6:	3001      	adds	r0, #1
 80042c8:	f43f af19 	beq.w	80040fe <_printf_float+0xc2>
 80042cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042d0:	4313      	orrs	r3, r2
 80042d2:	d102      	bne.n	80042da <_printf_float+0x29e>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	07d9      	lsls	r1, r3, #31
 80042d8:	d5d8      	bpl.n	800428c <_printf_float+0x250>
 80042da:	ee18 3a10 	vmov	r3, s16
 80042de:	4652      	mov	r2, sl
 80042e0:	4631      	mov	r1, r6
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b8      	blx	r7
 80042e6:	3001      	adds	r0, #1
 80042e8:	f43f af09 	beq.w	80040fe <_printf_float+0xc2>
 80042ec:	f04f 0900 	mov.w	r9, #0
 80042f0:	f104 0a1a 	add.w	sl, r4, #26
 80042f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042f6:	425b      	negs	r3, r3
 80042f8:	454b      	cmp	r3, r9
 80042fa:	dc01      	bgt.n	8004300 <_printf_float+0x2c4>
 80042fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042fe:	e792      	b.n	8004226 <_printf_float+0x1ea>
 8004300:	2301      	movs	r3, #1
 8004302:	4652      	mov	r2, sl
 8004304:	4631      	mov	r1, r6
 8004306:	4628      	mov	r0, r5
 8004308:	47b8      	blx	r7
 800430a:	3001      	adds	r0, #1
 800430c:	f43f aef7 	beq.w	80040fe <_printf_float+0xc2>
 8004310:	f109 0901 	add.w	r9, r9, #1
 8004314:	e7ee      	b.n	80042f4 <_printf_float+0x2b8>
 8004316:	bf00      	nop
 8004318:	7fefffff 	.word	0x7fefffff
 800431c:	08006d10 	.word	0x08006d10
 8004320:	08006d14 	.word	0x08006d14
 8004324:	08006d1c 	.word	0x08006d1c
 8004328:	08006d18 	.word	0x08006d18
 800432c:	08006d20 	.word	0x08006d20
 8004330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004334:	429a      	cmp	r2, r3
 8004336:	bfa8      	it	ge
 8004338:	461a      	movge	r2, r3
 800433a:	2a00      	cmp	r2, #0
 800433c:	4691      	mov	r9, r2
 800433e:	dc37      	bgt.n	80043b0 <_printf_float+0x374>
 8004340:	f04f 0b00 	mov.w	fp, #0
 8004344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004348:	f104 021a 	add.w	r2, r4, #26
 800434c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800434e:	9305      	str	r3, [sp, #20]
 8004350:	eba3 0309 	sub.w	r3, r3, r9
 8004354:	455b      	cmp	r3, fp
 8004356:	dc33      	bgt.n	80043c0 <_printf_float+0x384>
 8004358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800435c:	429a      	cmp	r2, r3
 800435e:	db3b      	blt.n	80043d8 <_printf_float+0x39c>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	07da      	lsls	r2, r3, #31
 8004364:	d438      	bmi.n	80043d8 <_printf_float+0x39c>
 8004366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004368:	9a05      	ldr	r2, [sp, #20]
 800436a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800436c:	1a9a      	subs	r2, r3, r2
 800436e:	eba3 0901 	sub.w	r9, r3, r1
 8004372:	4591      	cmp	r9, r2
 8004374:	bfa8      	it	ge
 8004376:	4691      	movge	r9, r2
 8004378:	f1b9 0f00 	cmp.w	r9, #0
 800437c:	dc35      	bgt.n	80043ea <_printf_float+0x3ae>
 800437e:	f04f 0800 	mov.w	r8, #0
 8004382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004386:	f104 0a1a 	add.w	sl, r4, #26
 800438a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	eba3 0309 	sub.w	r3, r3, r9
 8004394:	4543      	cmp	r3, r8
 8004396:	f77f af79 	ble.w	800428c <_printf_float+0x250>
 800439a:	2301      	movs	r3, #1
 800439c:	4652      	mov	r2, sl
 800439e:	4631      	mov	r1, r6
 80043a0:	4628      	mov	r0, r5
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	f43f aeaa 	beq.w	80040fe <_printf_float+0xc2>
 80043aa:	f108 0801 	add.w	r8, r8, #1
 80043ae:	e7ec      	b.n	800438a <_printf_float+0x34e>
 80043b0:	4613      	mov	r3, r2
 80043b2:	4631      	mov	r1, r6
 80043b4:	4642      	mov	r2, r8
 80043b6:	4628      	mov	r0, r5
 80043b8:	47b8      	blx	r7
 80043ba:	3001      	adds	r0, #1
 80043bc:	d1c0      	bne.n	8004340 <_printf_float+0x304>
 80043be:	e69e      	b.n	80040fe <_printf_float+0xc2>
 80043c0:	2301      	movs	r3, #1
 80043c2:	4631      	mov	r1, r6
 80043c4:	4628      	mov	r0, r5
 80043c6:	9205      	str	r2, [sp, #20]
 80043c8:	47b8      	blx	r7
 80043ca:	3001      	adds	r0, #1
 80043cc:	f43f ae97 	beq.w	80040fe <_printf_float+0xc2>
 80043d0:	9a05      	ldr	r2, [sp, #20]
 80043d2:	f10b 0b01 	add.w	fp, fp, #1
 80043d6:	e7b9      	b.n	800434c <_printf_float+0x310>
 80043d8:	ee18 3a10 	vmov	r3, s16
 80043dc:	4652      	mov	r2, sl
 80043de:	4631      	mov	r1, r6
 80043e0:	4628      	mov	r0, r5
 80043e2:	47b8      	blx	r7
 80043e4:	3001      	adds	r0, #1
 80043e6:	d1be      	bne.n	8004366 <_printf_float+0x32a>
 80043e8:	e689      	b.n	80040fe <_printf_float+0xc2>
 80043ea:	9a05      	ldr	r2, [sp, #20]
 80043ec:	464b      	mov	r3, r9
 80043ee:	4442      	add	r2, r8
 80043f0:	4631      	mov	r1, r6
 80043f2:	4628      	mov	r0, r5
 80043f4:	47b8      	blx	r7
 80043f6:	3001      	adds	r0, #1
 80043f8:	d1c1      	bne.n	800437e <_printf_float+0x342>
 80043fa:	e680      	b.n	80040fe <_printf_float+0xc2>
 80043fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043fe:	2a01      	cmp	r2, #1
 8004400:	dc01      	bgt.n	8004406 <_printf_float+0x3ca>
 8004402:	07db      	lsls	r3, r3, #31
 8004404:	d538      	bpl.n	8004478 <_printf_float+0x43c>
 8004406:	2301      	movs	r3, #1
 8004408:	4642      	mov	r2, r8
 800440a:	4631      	mov	r1, r6
 800440c:	4628      	mov	r0, r5
 800440e:	47b8      	blx	r7
 8004410:	3001      	adds	r0, #1
 8004412:	f43f ae74 	beq.w	80040fe <_printf_float+0xc2>
 8004416:	ee18 3a10 	vmov	r3, s16
 800441a:	4652      	mov	r2, sl
 800441c:	4631      	mov	r1, r6
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	f43f ae6b 	beq.w	80040fe <_printf_float+0xc2>
 8004428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800442c:	2200      	movs	r2, #0
 800442e:	2300      	movs	r3, #0
 8004430:	f7fc fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004434:	b9d8      	cbnz	r0, 800446e <_printf_float+0x432>
 8004436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004438:	f108 0201 	add.w	r2, r8, #1
 800443c:	3b01      	subs	r3, #1
 800443e:	4631      	mov	r1, r6
 8004440:	4628      	mov	r0, r5
 8004442:	47b8      	blx	r7
 8004444:	3001      	adds	r0, #1
 8004446:	d10e      	bne.n	8004466 <_printf_float+0x42a>
 8004448:	e659      	b.n	80040fe <_printf_float+0xc2>
 800444a:	2301      	movs	r3, #1
 800444c:	4652      	mov	r2, sl
 800444e:	4631      	mov	r1, r6
 8004450:	4628      	mov	r0, r5
 8004452:	47b8      	blx	r7
 8004454:	3001      	adds	r0, #1
 8004456:	f43f ae52 	beq.w	80040fe <_printf_float+0xc2>
 800445a:	f108 0801 	add.w	r8, r8, #1
 800445e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004460:	3b01      	subs	r3, #1
 8004462:	4543      	cmp	r3, r8
 8004464:	dcf1      	bgt.n	800444a <_printf_float+0x40e>
 8004466:	464b      	mov	r3, r9
 8004468:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800446c:	e6dc      	b.n	8004228 <_printf_float+0x1ec>
 800446e:	f04f 0800 	mov.w	r8, #0
 8004472:	f104 0a1a 	add.w	sl, r4, #26
 8004476:	e7f2      	b.n	800445e <_printf_float+0x422>
 8004478:	2301      	movs	r3, #1
 800447a:	4642      	mov	r2, r8
 800447c:	e7df      	b.n	800443e <_printf_float+0x402>
 800447e:	2301      	movs	r3, #1
 8004480:	464a      	mov	r2, r9
 8004482:	4631      	mov	r1, r6
 8004484:	4628      	mov	r0, r5
 8004486:	47b8      	blx	r7
 8004488:	3001      	adds	r0, #1
 800448a:	f43f ae38 	beq.w	80040fe <_printf_float+0xc2>
 800448e:	f108 0801 	add.w	r8, r8, #1
 8004492:	68e3      	ldr	r3, [r4, #12]
 8004494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004496:	1a5b      	subs	r3, r3, r1
 8004498:	4543      	cmp	r3, r8
 800449a:	dcf0      	bgt.n	800447e <_printf_float+0x442>
 800449c:	e6fa      	b.n	8004294 <_printf_float+0x258>
 800449e:	f04f 0800 	mov.w	r8, #0
 80044a2:	f104 0919 	add.w	r9, r4, #25
 80044a6:	e7f4      	b.n	8004492 <_printf_float+0x456>

080044a8 <_printf_common>:
 80044a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ac:	4616      	mov	r6, r2
 80044ae:	4699      	mov	r9, r3
 80044b0:	688a      	ldr	r2, [r1, #8]
 80044b2:	690b      	ldr	r3, [r1, #16]
 80044b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044b8:	4293      	cmp	r3, r2
 80044ba:	bfb8      	it	lt
 80044bc:	4613      	movlt	r3, r2
 80044be:	6033      	str	r3, [r6, #0]
 80044c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044c4:	4607      	mov	r7, r0
 80044c6:	460c      	mov	r4, r1
 80044c8:	b10a      	cbz	r2, 80044ce <_printf_common+0x26>
 80044ca:	3301      	adds	r3, #1
 80044cc:	6033      	str	r3, [r6, #0]
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	0699      	lsls	r1, r3, #26
 80044d2:	bf42      	ittt	mi
 80044d4:	6833      	ldrmi	r3, [r6, #0]
 80044d6:	3302      	addmi	r3, #2
 80044d8:	6033      	strmi	r3, [r6, #0]
 80044da:	6825      	ldr	r5, [r4, #0]
 80044dc:	f015 0506 	ands.w	r5, r5, #6
 80044e0:	d106      	bne.n	80044f0 <_printf_common+0x48>
 80044e2:	f104 0a19 	add.w	sl, r4, #25
 80044e6:	68e3      	ldr	r3, [r4, #12]
 80044e8:	6832      	ldr	r2, [r6, #0]
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	42ab      	cmp	r3, r5
 80044ee:	dc26      	bgt.n	800453e <_printf_common+0x96>
 80044f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044f4:	1e13      	subs	r3, r2, #0
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	bf18      	it	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	0692      	lsls	r2, r2, #26
 80044fe:	d42b      	bmi.n	8004558 <_printf_common+0xb0>
 8004500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004504:	4649      	mov	r1, r9
 8004506:	4638      	mov	r0, r7
 8004508:	47c0      	blx	r8
 800450a:	3001      	adds	r0, #1
 800450c:	d01e      	beq.n	800454c <_printf_common+0xa4>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	68e5      	ldr	r5, [r4, #12]
 8004512:	6832      	ldr	r2, [r6, #0]
 8004514:	f003 0306 	and.w	r3, r3, #6
 8004518:	2b04      	cmp	r3, #4
 800451a:	bf08      	it	eq
 800451c:	1aad      	subeq	r5, r5, r2
 800451e:	68a3      	ldr	r3, [r4, #8]
 8004520:	6922      	ldr	r2, [r4, #16]
 8004522:	bf0c      	ite	eq
 8004524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004528:	2500      	movne	r5, #0
 800452a:	4293      	cmp	r3, r2
 800452c:	bfc4      	itt	gt
 800452e:	1a9b      	subgt	r3, r3, r2
 8004530:	18ed      	addgt	r5, r5, r3
 8004532:	2600      	movs	r6, #0
 8004534:	341a      	adds	r4, #26
 8004536:	42b5      	cmp	r5, r6
 8004538:	d11a      	bne.n	8004570 <_printf_common+0xc8>
 800453a:	2000      	movs	r0, #0
 800453c:	e008      	b.n	8004550 <_printf_common+0xa8>
 800453e:	2301      	movs	r3, #1
 8004540:	4652      	mov	r2, sl
 8004542:	4649      	mov	r1, r9
 8004544:	4638      	mov	r0, r7
 8004546:	47c0      	blx	r8
 8004548:	3001      	adds	r0, #1
 800454a:	d103      	bne.n	8004554 <_printf_common+0xac>
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004554:	3501      	adds	r5, #1
 8004556:	e7c6      	b.n	80044e6 <_printf_common+0x3e>
 8004558:	18e1      	adds	r1, r4, r3
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	2030      	movs	r0, #48	; 0x30
 800455e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004562:	4422      	add	r2, r4
 8004564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800456c:	3302      	adds	r3, #2
 800456e:	e7c7      	b.n	8004500 <_printf_common+0x58>
 8004570:	2301      	movs	r3, #1
 8004572:	4622      	mov	r2, r4
 8004574:	4649      	mov	r1, r9
 8004576:	4638      	mov	r0, r7
 8004578:	47c0      	blx	r8
 800457a:	3001      	adds	r0, #1
 800457c:	d0e6      	beq.n	800454c <_printf_common+0xa4>
 800457e:	3601      	adds	r6, #1
 8004580:	e7d9      	b.n	8004536 <_printf_common+0x8e>
	...

08004584 <_printf_i>:
 8004584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004588:	7e0f      	ldrb	r7, [r1, #24]
 800458a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800458c:	2f78      	cmp	r7, #120	; 0x78
 800458e:	4691      	mov	r9, r2
 8004590:	4680      	mov	r8, r0
 8004592:	460c      	mov	r4, r1
 8004594:	469a      	mov	sl, r3
 8004596:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800459a:	d807      	bhi.n	80045ac <_printf_i+0x28>
 800459c:	2f62      	cmp	r7, #98	; 0x62
 800459e:	d80a      	bhi.n	80045b6 <_printf_i+0x32>
 80045a0:	2f00      	cmp	r7, #0
 80045a2:	f000 80d8 	beq.w	8004756 <_printf_i+0x1d2>
 80045a6:	2f58      	cmp	r7, #88	; 0x58
 80045a8:	f000 80a3 	beq.w	80046f2 <_printf_i+0x16e>
 80045ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045b4:	e03a      	b.n	800462c <_printf_i+0xa8>
 80045b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ba:	2b15      	cmp	r3, #21
 80045bc:	d8f6      	bhi.n	80045ac <_printf_i+0x28>
 80045be:	a101      	add	r1, pc, #4	; (adr r1, 80045c4 <_printf_i+0x40>)
 80045c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045c4:	0800461d 	.word	0x0800461d
 80045c8:	08004631 	.word	0x08004631
 80045cc:	080045ad 	.word	0x080045ad
 80045d0:	080045ad 	.word	0x080045ad
 80045d4:	080045ad 	.word	0x080045ad
 80045d8:	080045ad 	.word	0x080045ad
 80045dc:	08004631 	.word	0x08004631
 80045e0:	080045ad 	.word	0x080045ad
 80045e4:	080045ad 	.word	0x080045ad
 80045e8:	080045ad 	.word	0x080045ad
 80045ec:	080045ad 	.word	0x080045ad
 80045f0:	0800473d 	.word	0x0800473d
 80045f4:	08004661 	.word	0x08004661
 80045f8:	0800471f 	.word	0x0800471f
 80045fc:	080045ad 	.word	0x080045ad
 8004600:	080045ad 	.word	0x080045ad
 8004604:	0800475f 	.word	0x0800475f
 8004608:	080045ad 	.word	0x080045ad
 800460c:	08004661 	.word	0x08004661
 8004610:	080045ad 	.word	0x080045ad
 8004614:	080045ad 	.word	0x080045ad
 8004618:	08004727 	.word	0x08004727
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	1d1a      	adds	r2, r3, #4
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	602a      	str	r2, [r5, #0]
 8004624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800462c:	2301      	movs	r3, #1
 800462e:	e0a3      	b.n	8004778 <_printf_i+0x1f4>
 8004630:	6820      	ldr	r0, [r4, #0]
 8004632:	6829      	ldr	r1, [r5, #0]
 8004634:	0606      	lsls	r6, r0, #24
 8004636:	f101 0304 	add.w	r3, r1, #4
 800463a:	d50a      	bpl.n	8004652 <_printf_i+0xce>
 800463c:	680e      	ldr	r6, [r1, #0]
 800463e:	602b      	str	r3, [r5, #0]
 8004640:	2e00      	cmp	r6, #0
 8004642:	da03      	bge.n	800464c <_printf_i+0xc8>
 8004644:	232d      	movs	r3, #45	; 0x2d
 8004646:	4276      	negs	r6, r6
 8004648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464c:	485e      	ldr	r0, [pc, #376]	; (80047c8 <_printf_i+0x244>)
 800464e:	230a      	movs	r3, #10
 8004650:	e019      	b.n	8004686 <_printf_i+0x102>
 8004652:	680e      	ldr	r6, [r1, #0]
 8004654:	602b      	str	r3, [r5, #0]
 8004656:	f010 0f40 	tst.w	r0, #64	; 0x40
 800465a:	bf18      	it	ne
 800465c:	b236      	sxthne	r6, r6
 800465e:	e7ef      	b.n	8004640 <_printf_i+0xbc>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	6820      	ldr	r0, [r4, #0]
 8004664:	1d19      	adds	r1, r3, #4
 8004666:	6029      	str	r1, [r5, #0]
 8004668:	0601      	lsls	r1, r0, #24
 800466a:	d501      	bpl.n	8004670 <_printf_i+0xec>
 800466c:	681e      	ldr	r6, [r3, #0]
 800466e:	e002      	b.n	8004676 <_printf_i+0xf2>
 8004670:	0646      	lsls	r6, r0, #25
 8004672:	d5fb      	bpl.n	800466c <_printf_i+0xe8>
 8004674:	881e      	ldrh	r6, [r3, #0]
 8004676:	4854      	ldr	r0, [pc, #336]	; (80047c8 <_printf_i+0x244>)
 8004678:	2f6f      	cmp	r7, #111	; 0x6f
 800467a:	bf0c      	ite	eq
 800467c:	2308      	moveq	r3, #8
 800467e:	230a      	movne	r3, #10
 8004680:	2100      	movs	r1, #0
 8004682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004686:	6865      	ldr	r5, [r4, #4]
 8004688:	60a5      	str	r5, [r4, #8]
 800468a:	2d00      	cmp	r5, #0
 800468c:	bfa2      	ittt	ge
 800468e:	6821      	ldrge	r1, [r4, #0]
 8004690:	f021 0104 	bicge.w	r1, r1, #4
 8004694:	6021      	strge	r1, [r4, #0]
 8004696:	b90e      	cbnz	r6, 800469c <_printf_i+0x118>
 8004698:	2d00      	cmp	r5, #0
 800469a:	d04d      	beq.n	8004738 <_printf_i+0x1b4>
 800469c:	4615      	mov	r5, r2
 800469e:	fbb6 f1f3 	udiv	r1, r6, r3
 80046a2:	fb03 6711 	mls	r7, r3, r1, r6
 80046a6:	5dc7      	ldrb	r7, [r0, r7]
 80046a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80046ac:	4637      	mov	r7, r6
 80046ae:	42bb      	cmp	r3, r7
 80046b0:	460e      	mov	r6, r1
 80046b2:	d9f4      	bls.n	800469e <_printf_i+0x11a>
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d10b      	bne.n	80046d0 <_printf_i+0x14c>
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	07de      	lsls	r6, r3, #31
 80046bc:	d508      	bpl.n	80046d0 <_printf_i+0x14c>
 80046be:	6923      	ldr	r3, [r4, #16]
 80046c0:	6861      	ldr	r1, [r4, #4]
 80046c2:	4299      	cmp	r1, r3
 80046c4:	bfde      	ittt	le
 80046c6:	2330      	movle	r3, #48	; 0x30
 80046c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046d0:	1b52      	subs	r2, r2, r5
 80046d2:	6122      	str	r2, [r4, #16]
 80046d4:	f8cd a000 	str.w	sl, [sp]
 80046d8:	464b      	mov	r3, r9
 80046da:	aa03      	add	r2, sp, #12
 80046dc:	4621      	mov	r1, r4
 80046de:	4640      	mov	r0, r8
 80046e0:	f7ff fee2 	bl	80044a8 <_printf_common>
 80046e4:	3001      	adds	r0, #1
 80046e6:	d14c      	bne.n	8004782 <_printf_i+0x1fe>
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	b004      	add	sp, #16
 80046ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f2:	4835      	ldr	r0, [pc, #212]	; (80047c8 <_printf_i+0x244>)
 80046f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046f8:	6829      	ldr	r1, [r5, #0]
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004700:	6029      	str	r1, [r5, #0]
 8004702:	061d      	lsls	r5, r3, #24
 8004704:	d514      	bpl.n	8004730 <_printf_i+0x1ac>
 8004706:	07df      	lsls	r7, r3, #31
 8004708:	bf44      	itt	mi
 800470a:	f043 0320 	orrmi.w	r3, r3, #32
 800470e:	6023      	strmi	r3, [r4, #0]
 8004710:	b91e      	cbnz	r6, 800471a <_printf_i+0x196>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	f023 0320 	bic.w	r3, r3, #32
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	2310      	movs	r3, #16
 800471c:	e7b0      	b.n	8004680 <_printf_i+0xfc>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	f043 0320 	orr.w	r3, r3, #32
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	2378      	movs	r3, #120	; 0x78
 8004728:	4828      	ldr	r0, [pc, #160]	; (80047cc <_printf_i+0x248>)
 800472a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800472e:	e7e3      	b.n	80046f8 <_printf_i+0x174>
 8004730:	0659      	lsls	r1, r3, #25
 8004732:	bf48      	it	mi
 8004734:	b2b6      	uxthmi	r6, r6
 8004736:	e7e6      	b.n	8004706 <_printf_i+0x182>
 8004738:	4615      	mov	r5, r2
 800473a:	e7bb      	b.n	80046b4 <_printf_i+0x130>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	6826      	ldr	r6, [r4, #0]
 8004740:	6961      	ldr	r1, [r4, #20]
 8004742:	1d18      	adds	r0, r3, #4
 8004744:	6028      	str	r0, [r5, #0]
 8004746:	0635      	lsls	r5, r6, #24
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	d501      	bpl.n	8004750 <_printf_i+0x1cc>
 800474c:	6019      	str	r1, [r3, #0]
 800474e:	e002      	b.n	8004756 <_printf_i+0x1d2>
 8004750:	0670      	lsls	r0, r6, #25
 8004752:	d5fb      	bpl.n	800474c <_printf_i+0x1c8>
 8004754:	8019      	strh	r1, [r3, #0]
 8004756:	2300      	movs	r3, #0
 8004758:	6123      	str	r3, [r4, #16]
 800475a:	4615      	mov	r5, r2
 800475c:	e7ba      	b.n	80046d4 <_printf_i+0x150>
 800475e:	682b      	ldr	r3, [r5, #0]
 8004760:	1d1a      	adds	r2, r3, #4
 8004762:	602a      	str	r2, [r5, #0]
 8004764:	681d      	ldr	r5, [r3, #0]
 8004766:	6862      	ldr	r2, [r4, #4]
 8004768:	2100      	movs	r1, #0
 800476a:	4628      	mov	r0, r5
 800476c:	f7fb fd38 	bl	80001e0 <memchr>
 8004770:	b108      	cbz	r0, 8004776 <_printf_i+0x1f2>
 8004772:	1b40      	subs	r0, r0, r5
 8004774:	6060      	str	r0, [r4, #4]
 8004776:	6863      	ldr	r3, [r4, #4]
 8004778:	6123      	str	r3, [r4, #16]
 800477a:	2300      	movs	r3, #0
 800477c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004780:	e7a8      	b.n	80046d4 <_printf_i+0x150>
 8004782:	6923      	ldr	r3, [r4, #16]
 8004784:	462a      	mov	r2, r5
 8004786:	4649      	mov	r1, r9
 8004788:	4640      	mov	r0, r8
 800478a:	47d0      	blx	sl
 800478c:	3001      	adds	r0, #1
 800478e:	d0ab      	beq.n	80046e8 <_printf_i+0x164>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	079b      	lsls	r3, r3, #30
 8004794:	d413      	bmi.n	80047be <_printf_i+0x23a>
 8004796:	68e0      	ldr	r0, [r4, #12]
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	4298      	cmp	r0, r3
 800479c:	bfb8      	it	lt
 800479e:	4618      	movlt	r0, r3
 80047a0:	e7a4      	b.n	80046ec <_printf_i+0x168>
 80047a2:	2301      	movs	r3, #1
 80047a4:	4632      	mov	r2, r6
 80047a6:	4649      	mov	r1, r9
 80047a8:	4640      	mov	r0, r8
 80047aa:	47d0      	blx	sl
 80047ac:	3001      	adds	r0, #1
 80047ae:	d09b      	beq.n	80046e8 <_printf_i+0x164>
 80047b0:	3501      	adds	r5, #1
 80047b2:	68e3      	ldr	r3, [r4, #12]
 80047b4:	9903      	ldr	r1, [sp, #12]
 80047b6:	1a5b      	subs	r3, r3, r1
 80047b8:	42ab      	cmp	r3, r5
 80047ba:	dcf2      	bgt.n	80047a2 <_printf_i+0x21e>
 80047bc:	e7eb      	b.n	8004796 <_printf_i+0x212>
 80047be:	2500      	movs	r5, #0
 80047c0:	f104 0619 	add.w	r6, r4, #25
 80047c4:	e7f5      	b.n	80047b2 <_printf_i+0x22e>
 80047c6:	bf00      	nop
 80047c8:	08006d22 	.word	0x08006d22
 80047cc:	08006d33 	.word	0x08006d33

080047d0 <siprintf>:
 80047d0:	b40e      	push	{r1, r2, r3}
 80047d2:	b500      	push	{lr}
 80047d4:	b09c      	sub	sp, #112	; 0x70
 80047d6:	ab1d      	add	r3, sp, #116	; 0x74
 80047d8:	9002      	str	r0, [sp, #8]
 80047da:	9006      	str	r0, [sp, #24]
 80047dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047e0:	4809      	ldr	r0, [pc, #36]	; (8004808 <siprintf+0x38>)
 80047e2:	9107      	str	r1, [sp, #28]
 80047e4:	9104      	str	r1, [sp, #16]
 80047e6:	4909      	ldr	r1, [pc, #36]	; (800480c <siprintf+0x3c>)
 80047e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ec:	9105      	str	r1, [sp, #20]
 80047ee:	6800      	ldr	r0, [r0, #0]
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	a902      	add	r1, sp, #8
 80047f4:	f001 fb76 	bl	8005ee4 <_svfiprintf_r>
 80047f8:	9b02      	ldr	r3, [sp, #8]
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	b01c      	add	sp, #112	; 0x70
 8004800:	f85d eb04 	ldr.w	lr, [sp], #4
 8004804:	b003      	add	sp, #12
 8004806:	4770      	bx	lr
 8004808:	20000010 	.word	0x20000010
 800480c:	ffff0208 	.word	0xffff0208

08004810 <quorem>:
 8004810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	6903      	ldr	r3, [r0, #16]
 8004816:	690c      	ldr	r4, [r1, #16]
 8004818:	42a3      	cmp	r3, r4
 800481a:	4607      	mov	r7, r0
 800481c:	f2c0 8081 	blt.w	8004922 <quorem+0x112>
 8004820:	3c01      	subs	r4, #1
 8004822:	f101 0814 	add.w	r8, r1, #20
 8004826:	f100 0514 	add.w	r5, r0, #20
 800482a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004838:	3301      	adds	r3, #1
 800483a:	429a      	cmp	r2, r3
 800483c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004840:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004844:	fbb2 f6f3 	udiv	r6, r2, r3
 8004848:	d331      	bcc.n	80048ae <quorem+0x9e>
 800484a:	f04f 0e00 	mov.w	lr, #0
 800484e:	4640      	mov	r0, r8
 8004850:	46ac      	mov	ip, r5
 8004852:	46f2      	mov	sl, lr
 8004854:	f850 2b04 	ldr.w	r2, [r0], #4
 8004858:	b293      	uxth	r3, r2
 800485a:	fb06 e303 	mla	r3, r6, r3, lr
 800485e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004862:	b29b      	uxth	r3, r3
 8004864:	ebaa 0303 	sub.w	r3, sl, r3
 8004868:	f8dc a000 	ldr.w	sl, [ip]
 800486c:	0c12      	lsrs	r2, r2, #16
 800486e:	fa13 f38a 	uxtah	r3, r3, sl
 8004872:	fb06 e202 	mla	r2, r6, r2, lr
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	9b00      	ldr	r3, [sp, #0]
 800487a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800487e:	b292      	uxth	r2, r2
 8004880:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004888:	f8bd 3000 	ldrh.w	r3, [sp]
 800488c:	4581      	cmp	r9, r0
 800488e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004892:	f84c 3b04 	str.w	r3, [ip], #4
 8004896:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800489a:	d2db      	bcs.n	8004854 <quorem+0x44>
 800489c:	f855 300b 	ldr.w	r3, [r5, fp]
 80048a0:	b92b      	cbnz	r3, 80048ae <quorem+0x9e>
 80048a2:	9b01      	ldr	r3, [sp, #4]
 80048a4:	3b04      	subs	r3, #4
 80048a6:	429d      	cmp	r5, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	d32e      	bcc.n	800490a <quorem+0xfa>
 80048ac:	613c      	str	r4, [r7, #16]
 80048ae:	4638      	mov	r0, r7
 80048b0:	f001 f8c4 	bl	8005a3c <__mcmp>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	db24      	blt.n	8004902 <quorem+0xf2>
 80048b8:	3601      	adds	r6, #1
 80048ba:	4628      	mov	r0, r5
 80048bc:	f04f 0c00 	mov.w	ip, #0
 80048c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80048c4:	f8d0 e000 	ldr.w	lr, [r0]
 80048c8:	b293      	uxth	r3, r2
 80048ca:	ebac 0303 	sub.w	r3, ip, r3
 80048ce:	0c12      	lsrs	r2, r2, #16
 80048d0:	fa13 f38e 	uxtah	r3, r3, lr
 80048d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048dc:	b29b      	uxth	r3, r3
 80048de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048e2:	45c1      	cmp	r9, r8
 80048e4:	f840 3b04 	str.w	r3, [r0], #4
 80048e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80048ec:	d2e8      	bcs.n	80048c0 <quorem+0xb0>
 80048ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048f6:	b922      	cbnz	r2, 8004902 <quorem+0xf2>
 80048f8:	3b04      	subs	r3, #4
 80048fa:	429d      	cmp	r5, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	d30a      	bcc.n	8004916 <quorem+0x106>
 8004900:	613c      	str	r4, [r7, #16]
 8004902:	4630      	mov	r0, r6
 8004904:	b003      	add	sp, #12
 8004906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	3b04      	subs	r3, #4
 800490e:	2a00      	cmp	r2, #0
 8004910:	d1cc      	bne.n	80048ac <quorem+0x9c>
 8004912:	3c01      	subs	r4, #1
 8004914:	e7c7      	b.n	80048a6 <quorem+0x96>
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	3b04      	subs	r3, #4
 800491a:	2a00      	cmp	r2, #0
 800491c:	d1f0      	bne.n	8004900 <quorem+0xf0>
 800491e:	3c01      	subs	r4, #1
 8004920:	e7eb      	b.n	80048fa <quorem+0xea>
 8004922:	2000      	movs	r0, #0
 8004924:	e7ee      	b.n	8004904 <quorem+0xf4>
	...

08004928 <_dtoa_r>:
 8004928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492c:	ed2d 8b04 	vpush	{d8-d9}
 8004930:	ec57 6b10 	vmov	r6, r7, d0
 8004934:	b093      	sub	sp, #76	; 0x4c
 8004936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800493c:	9106      	str	r1, [sp, #24]
 800493e:	ee10 aa10 	vmov	sl, s0
 8004942:	4604      	mov	r4, r0
 8004944:	9209      	str	r2, [sp, #36]	; 0x24
 8004946:	930c      	str	r3, [sp, #48]	; 0x30
 8004948:	46bb      	mov	fp, r7
 800494a:	b975      	cbnz	r5, 800496a <_dtoa_r+0x42>
 800494c:	2010      	movs	r0, #16
 800494e:	f000 fddd 	bl	800550c <malloc>
 8004952:	4602      	mov	r2, r0
 8004954:	6260      	str	r0, [r4, #36]	; 0x24
 8004956:	b920      	cbnz	r0, 8004962 <_dtoa_r+0x3a>
 8004958:	4ba7      	ldr	r3, [pc, #668]	; (8004bf8 <_dtoa_r+0x2d0>)
 800495a:	21ea      	movs	r1, #234	; 0xea
 800495c:	48a7      	ldr	r0, [pc, #668]	; (8004bfc <_dtoa_r+0x2d4>)
 800495e:	f001 fbd1 	bl	8006104 <__assert_func>
 8004962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004966:	6005      	str	r5, [r0, #0]
 8004968:	60c5      	str	r5, [r0, #12]
 800496a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	b151      	cbz	r1, 8004986 <_dtoa_r+0x5e>
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	604a      	str	r2, [r1, #4]
 8004974:	2301      	movs	r3, #1
 8004976:	4093      	lsls	r3, r2
 8004978:	608b      	str	r3, [r1, #8]
 800497a:	4620      	mov	r0, r4
 800497c:	f000 fe1c 	bl	80055b8 <_Bfree>
 8004980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	1e3b      	subs	r3, r7, #0
 8004988:	bfaa      	itet	ge
 800498a:	2300      	movge	r3, #0
 800498c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004990:	f8c8 3000 	strge.w	r3, [r8]
 8004994:	4b9a      	ldr	r3, [pc, #616]	; (8004c00 <_dtoa_r+0x2d8>)
 8004996:	bfbc      	itt	lt
 8004998:	2201      	movlt	r2, #1
 800499a:	f8c8 2000 	strlt.w	r2, [r8]
 800499e:	ea33 030b 	bics.w	r3, r3, fp
 80049a2:	d11b      	bne.n	80049dc <_dtoa_r+0xb4>
 80049a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80049b0:	4333      	orrs	r3, r6
 80049b2:	f000 8592 	beq.w	80054da <_dtoa_r+0xbb2>
 80049b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049b8:	b963      	cbnz	r3, 80049d4 <_dtoa_r+0xac>
 80049ba:	4b92      	ldr	r3, [pc, #584]	; (8004c04 <_dtoa_r+0x2dc>)
 80049bc:	e022      	b.n	8004a04 <_dtoa_r+0xdc>
 80049be:	4b92      	ldr	r3, [pc, #584]	; (8004c08 <_dtoa_r+0x2e0>)
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	3308      	adds	r3, #8
 80049c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	9801      	ldr	r0, [sp, #4]
 80049ca:	b013      	add	sp, #76	; 0x4c
 80049cc:	ecbd 8b04 	vpop	{d8-d9}
 80049d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d4:	4b8b      	ldr	r3, [pc, #556]	; (8004c04 <_dtoa_r+0x2dc>)
 80049d6:	9301      	str	r3, [sp, #4]
 80049d8:	3303      	adds	r3, #3
 80049da:	e7f3      	b.n	80049c4 <_dtoa_r+0x9c>
 80049dc:	2200      	movs	r2, #0
 80049de:	2300      	movs	r3, #0
 80049e0:	4650      	mov	r0, sl
 80049e2:	4659      	mov	r1, fp
 80049e4:	f7fc f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80049e8:	ec4b ab19 	vmov	d9, sl, fp
 80049ec:	4680      	mov	r8, r0
 80049ee:	b158      	cbz	r0, 8004a08 <_dtoa_r+0xe0>
 80049f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049f2:	2301      	movs	r3, #1
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 856b 	beq.w	80054d4 <_dtoa_r+0xbac>
 80049fe:	4883      	ldr	r0, [pc, #524]	; (8004c0c <_dtoa_r+0x2e4>)
 8004a00:	6018      	str	r0, [r3, #0]
 8004a02:	1e43      	subs	r3, r0, #1
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	e7df      	b.n	80049c8 <_dtoa_r+0xa0>
 8004a08:	ec4b ab10 	vmov	d0, sl, fp
 8004a0c:	aa10      	add	r2, sp, #64	; 0x40
 8004a0e:	a911      	add	r1, sp, #68	; 0x44
 8004a10:	4620      	mov	r0, r4
 8004a12:	f001 f8b9 	bl	8005b88 <__d2b>
 8004a16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004a1a:	ee08 0a10 	vmov	s16, r0
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	f000 8084 	beq.w	8004b2c <_dtoa_r+0x204>
 8004a24:	ee19 3a90 	vmov	r3, s19
 8004a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004a30:	4656      	mov	r6, sl
 8004a32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004a36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004a3e:	4b74      	ldr	r3, [pc, #464]	; (8004c10 <_dtoa_r+0x2e8>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	4630      	mov	r0, r6
 8004a44:	4639      	mov	r1, r7
 8004a46:	f7fb fc1f 	bl	8000288 <__aeabi_dsub>
 8004a4a:	a365      	add	r3, pc, #404	; (adr r3, 8004be0 <_dtoa_r+0x2b8>)
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fdd2 	bl	80005f8 <__aeabi_dmul>
 8004a54:	a364      	add	r3, pc, #400	; (adr r3, 8004be8 <_dtoa_r+0x2c0>)
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f7fb fc17 	bl	800028c <__adddf3>
 8004a5e:	4606      	mov	r6, r0
 8004a60:	4628      	mov	r0, r5
 8004a62:	460f      	mov	r7, r1
 8004a64:	f7fb fd5e 	bl	8000524 <__aeabi_i2d>
 8004a68:	a361      	add	r3, pc, #388	; (adr r3, 8004bf0 <_dtoa_r+0x2c8>)
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	f7fb fdc3 	bl	80005f8 <__aeabi_dmul>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4630      	mov	r0, r6
 8004a78:	4639      	mov	r1, r7
 8004a7a:	f7fb fc07 	bl	800028c <__adddf3>
 8004a7e:	4606      	mov	r6, r0
 8004a80:	460f      	mov	r7, r1
 8004a82:	f7fc f869 	bl	8000b58 <__aeabi_d2iz>
 8004a86:	2200      	movs	r2, #0
 8004a88:	9000      	str	r0, [sp, #0]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	4639      	mov	r1, r7
 8004a90:	f7fc f824 	bl	8000adc <__aeabi_dcmplt>
 8004a94:	b150      	cbz	r0, 8004aac <_dtoa_r+0x184>
 8004a96:	9800      	ldr	r0, [sp, #0]
 8004a98:	f7fb fd44 	bl	8000524 <__aeabi_i2d>
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	f7fc f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8004aa4:	b910      	cbnz	r0, 8004aac <_dtoa_r+0x184>
 8004aa6:	9b00      	ldr	r3, [sp, #0]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	9b00      	ldr	r3, [sp, #0]
 8004aae:	2b16      	cmp	r3, #22
 8004ab0:	d85a      	bhi.n	8004b68 <_dtoa_r+0x240>
 8004ab2:	9a00      	ldr	r2, [sp, #0]
 8004ab4:	4b57      	ldr	r3, [pc, #348]	; (8004c14 <_dtoa_r+0x2ec>)
 8004ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	ec51 0b19 	vmov	r0, r1, d9
 8004ac2:	f7fc f80b 	bl	8000adc <__aeabi_dcmplt>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d050      	beq.n	8004b6c <_dtoa_r+0x244>
 8004aca:	9b00      	ldr	r3, [sp, #0]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ad6:	1b5d      	subs	r5, r3, r5
 8004ad8:	1e6b      	subs	r3, r5, #1
 8004ada:	9305      	str	r3, [sp, #20]
 8004adc:	bf45      	ittet	mi
 8004ade:	f1c5 0301 	rsbmi	r3, r5, #1
 8004ae2:	9304      	strmi	r3, [sp, #16]
 8004ae4:	2300      	movpl	r3, #0
 8004ae6:	2300      	movmi	r3, #0
 8004ae8:	bf4c      	ite	mi
 8004aea:	9305      	strmi	r3, [sp, #20]
 8004aec:	9304      	strpl	r3, [sp, #16]
 8004aee:	9b00      	ldr	r3, [sp, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	db3d      	blt.n	8004b70 <_dtoa_r+0x248>
 8004af4:	9b05      	ldr	r3, [sp, #20]
 8004af6:	9a00      	ldr	r2, [sp, #0]
 8004af8:	920a      	str	r2, [sp, #40]	; 0x28
 8004afa:	4413      	add	r3, r2
 8004afc:	9305      	str	r3, [sp, #20]
 8004afe:	2300      	movs	r3, #0
 8004b00:	9307      	str	r3, [sp, #28]
 8004b02:	9b06      	ldr	r3, [sp, #24]
 8004b04:	2b09      	cmp	r3, #9
 8004b06:	f200 8089 	bhi.w	8004c1c <_dtoa_r+0x2f4>
 8004b0a:	2b05      	cmp	r3, #5
 8004b0c:	bfc4      	itt	gt
 8004b0e:	3b04      	subgt	r3, #4
 8004b10:	9306      	strgt	r3, [sp, #24]
 8004b12:	9b06      	ldr	r3, [sp, #24]
 8004b14:	f1a3 0302 	sub.w	r3, r3, #2
 8004b18:	bfcc      	ite	gt
 8004b1a:	2500      	movgt	r5, #0
 8004b1c:	2501      	movle	r5, #1
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	f200 8087 	bhi.w	8004c32 <_dtoa_r+0x30a>
 8004b24:	e8df f003 	tbb	[pc, r3]
 8004b28:	59383a2d 	.word	0x59383a2d
 8004b2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004b30:	441d      	add	r5, r3
 8004b32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	bfc1      	itttt	gt
 8004b3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004b3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004b42:	fa0b f303 	lslgt.w	r3, fp, r3
 8004b46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004b4a:	bfda      	itte	le
 8004b4c:	f1c3 0320 	rsble	r3, r3, #32
 8004b50:	fa06 f003 	lslle.w	r0, r6, r3
 8004b54:	4318      	orrgt	r0, r3
 8004b56:	f7fb fcd5 	bl	8000504 <__aeabi_ui2d>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4606      	mov	r6, r0
 8004b5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004b62:	3d01      	subs	r5, #1
 8004b64:	930e      	str	r3, [sp, #56]	; 0x38
 8004b66:	e76a      	b.n	8004a3e <_dtoa_r+0x116>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e7b2      	b.n	8004ad2 <_dtoa_r+0x1aa>
 8004b6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004b6e:	e7b1      	b.n	8004ad4 <_dtoa_r+0x1ac>
 8004b70:	9b04      	ldr	r3, [sp, #16]
 8004b72:	9a00      	ldr	r2, [sp, #0]
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	9304      	str	r3, [sp, #16]
 8004b78:	4253      	negs	r3, r2
 8004b7a:	9307      	str	r3, [sp, #28]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b80:	e7bf      	b.n	8004b02 <_dtoa_r+0x1da>
 8004b82:	2300      	movs	r3, #0
 8004b84:	9308      	str	r3, [sp, #32]
 8004b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	dc55      	bgt.n	8004c38 <_dtoa_r+0x310>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b92:	461a      	mov	r2, r3
 8004b94:	9209      	str	r2, [sp, #36]	; 0x24
 8004b96:	e00c      	b.n	8004bb2 <_dtoa_r+0x28a>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e7f3      	b.n	8004b84 <_dtoa_r+0x25c>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba0:	9308      	str	r3, [sp, #32]
 8004ba2:	9b00      	ldr	r3, [sp, #0]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	9302      	str	r3, [sp, #8]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	9303      	str	r3, [sp, #12]
 8004bae:	bfb8      	it	lt
 8004bb0:	2301      	movlt	r3, #1
 8004bb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	6042      	str	r2, [r0, #4]
 8004bb8:	2204      	movs	r2, #4
 8004bba:	f102 0614 	add.w	r6, r2, #20
 8004bbe:	429e      	cmp	r6, r3
 8004bc0:	6841      	ldr	r1, [r0, #4]
 8004bc2:	d93d      	bls.n	8004c40 <_dtoa_r+0x318>
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f000 fcb7 	bl	8005538 <_Balloc>
 8004bca:	9001      	str	r0, [sp, #4]
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d13b      	bne.n	8004c48 <_dtoa_r+0x320>
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <_dtoa_r+0x2f0>)
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004bd8:	e6c0      	b.n	800495c <_dtoa_r+0x34>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e7df      	b.n	8004b9e <_dtoa_r+0x276>
 8004bde:	bf00      	nop
 8004be0:	636f4361 	.word	0x636f4361
 8004be4:	3fd287a7 	.word	0x3fd287a7
 8004be8:	8b60c8b3 	.word	0x8b60c8b3
 8004bec:	3fc68a28 	.word	0x3fc68a28
 8004bf0:	509f79fb 	.word	0x509f79fb
 8004bf4:	3fd34413 	.word	0x3fd34413
 8004bf8:	08006d51 	.word	0x08006d51
 8004bfc:	08006d68 	.word	0x08006d68
 8004c00:	7ff00000 	.word	0x7ff00000
 8004c04:	08006d4d 	.word	0x08006d4d
 8004c08:	08006d44 	.word	0x08006d44
 8004c0c:	08006d21 	.word	0x08006d21
 8004c10:	3ff80000 	.word	0x3ff80000
 8004c14:	08006e58 	.word	0x08006e58
 8004c18:	08006dc3 	.word	0x08006dc3
 8004c1c:	2501      	movs	r5, #1
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9306      	str	r3, [sp, #24]
 8004c22:	9508      	str	r5, [sp, #32]
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295
 8004c28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	2312      	movs	r3, #18
 8004c30:	e7b0      	b.n	8004b94 <_dtoa_r+0x26c>
 8004c32:	2301      	movs	r3, #1
 8004c34:	9308      	str	r3, [sp, #32]
 8004c36:	e7f5      	b.n	8004c24 <_dtoa_r+0x2fc>
 8004c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c3e:	e7b8      	b.n	8004bb2 <_dtoa_r+0x28a>
 8004c40:	3101      	adds	r1, #1
 8004c42:	6041      	str	r1, [r0, #4]
 8004c44:	0052      	lsls	r2, r2, #1
 8004c46:	e7b8      	b.n	8004bba <_dtoa_r+0x292>
 8004c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c4a:	9a01      	ldr	r2, [sp, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	2b0e      	cmp	r3, #14
 8004c52:	f200 809d 	bhi.w	8004d90 <_dtoa_r+0x468>
 8004c56:	2d00      	cmp	r5, #0
 8004c58:	f000 809a 	beq.w	8004d90 <_dtoa_r+0x468>
 8004c5c:	9b00      	ldr	r3, [sp, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	dd32      	ble.n	8004cc8 <_dtoa_r+0x3a0>
 8004c62:	4ab7      	ldr	r2, [pc, #732]	; (8004f40 <_dtoa_r+0x618>)
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c70:	9b00      	ldr	r3, [sp, #0]
 8004c72:	05d8      	lsls	r0, r3, #23
 8004c74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004c78:	d516      	bpl.n	8004ca8 <_dtoa_r+0x380>
 8004c7a:	4bb2      	ldr	r3, [pc, #712]	; (8004f44 <_dtoa_r+0x61c>)
 8004c7c:	ec51 0b19 	vmov	r0, r1, d9
 8004c80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c84:	f7fb fde2 	bl	800084c <__aeabi_ddiv>
 8004c88:	f007 070f 	and.w	r7, r7, #15
 8004c8c:	4682      	mov	sl, r0
 8004c8e:	468b      	mov	fp, r1
 8004c90:	2503      	movs	r5, #3
 8004c92:	4eac      	ldr	r6, [pc, #688]	; (8004f44 <_dtoa_r+0x61c>)
 8004c94:	b957      	cbnz	r7, 8004cac <_dtoa_r+0x384>
 8004c96:	4642      	mov	r2, r8
 8004c98:	464b      	mov	r3, r9
 8004c9a:	4650      	mov	r0, sl
 8004c9c:	4659      	mov	r1, fp
 8004c9e:	f7fb fdd5 	bl	800084c <__aeabi_ddiv>
 8004ca2:	4682      	mov	sl, r0
 8004ca4:	468b      	mov	fp, r1
 8004ca6:	e028      	b.n	8004cfa <_dtoa_r+0x3d2>
 8004ca8:	2502      	movs	r5, #2
 8004caa:	e7f2      	b.n	8004c92 <_dtoa_r+0x36a>
 8004cac:	07f9      	lsls	r1, r7, #31
 8004cae:	d508      	bpl.n	8004cc2 <_dtoa_r+0x39a>
 8004cb0:	4640      	mov	r0, r8
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004cb8:	f7fb fc9e 	bl	80005f8 <__aeabi_dmul>
 8004cbc:	3501      	adds	r5, #1
 8004cbe:	4680      	mov	r8, r0
 8004cc0:	4689      	mov	r9, r1
 8004cc2:	107f      	asrs	r7, r7, #1
 8004cc4:	3608      	adds	r6, #8
 8004cc6:	e7e5      	b.n	8004c94 <_dtoa_r+0x36c>
 8004cc8:	f000 809b 	beq.w	8004e02 <_dtoa_r+0x4da>
 8004ccc:	9b00      	ldr	r3, [sp, #0]
 8004cce:	4f9d      	ldr	r7, [pc, #628]	; (8004f44 <_dtoa_r+0x61c>)
 8004cd0:	425e      	negs	r6, r3
 8004cd2:	4b9b      	ldr	r3, [pc, #620]	; (8004f40 <_dtoa_r+0x618>)
 8004cd4:	f006 020f 	and.w	r2, r6, #15
 8004cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	ec51 0b19 	vmov	r0, r1, d9
 8004ce4:	f7fb fc88 	bl	80005f8 <__aeabi_dmul>
 8004ce8:	1136      	asrs	r6, r6, #4
 8004cea:	4682      	mov	sl, r0
 8004cec:	468b      	mov	fp, r1
 8004cee:	2300      	movs	r3, #0
 8004cf0:	2502      	movs	r5, #2
 8004cf2:	2e00      	cmp	r6, #0
 8004cf4:	d17a      	bne.n	8004dec <_dtoa_r+0x4c4>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1d3      	bne.n	8004ca2 <_dtoa_r+0x37a>
 8004cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8082 	beq.w	8004e06 <_dtoa_r+0x4de>
 8004d02:	4b91      	ldr	r3, [pc, #580]	; (8004f48 <_dtoa_r+0x620>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	4650      	mov	r0, sl
 8004d08:	4659      	mov	r1, fp
 8004d0a:	f7fb fee7 	bl	8000adc <__aeabi_dcmplt>
 8004d0e:	2800      	cmp	r0, #0
 8004d10:	d079      	beq.n	8004e06 <_dtoa_r+0x4de>
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d076      	beq.n	8004e06 <_dtoa_r+0x4de>
 8004d18:	9b02      	ldr	r3, [sp, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dd36      	ble.n	8004d8c <_dtoa_r+0x464>
 8004d1e:	9b00      	ldr	r3, [sp, #0]
 8004d20:	4650      	mov	r0, sl
 8004d22:	4659      	mov	r1, fp
 8004d24:	1e5f      	subs	r7, r3, #1
 8004d26:	2200      	movs	r2, #0
 8004d28:	4b88      	ldr	r3, [pc, #544]	; (8004f4c <_dtoa_r+0x624>)
 8004d2a:	f7fb fc65 	bl	80005f8 <__aeabi_dmul>
 8004d2e:	9e02      	ldr	r6, [sp, #8]
 8004d30:	4682      	mov	sl, r0
 8004d32:	468b      	mov	fp, r1
 8004d34:	3501      	adds	r5, #1
 8004d36:	4628      	mov	r0, r5
 8004d38:	f7fb fbf4 	bl	8000524 <__aeabi_i2d>
 8004d3c:	4652      	mov	r2, sl
 8004d3e:	465b      	mov	r3, fp
 8004d40:	f7fb fc5a 	bl	80005f8 <__aeabi_dmul>
 8004d44:	4b82      	ldr	r3, [pc, #520]	; (8004f50 <_dtoa_r+0x628>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	f7fb faa0 	bl	800028c <__adddf3>
 8004d4c:	46d0      	mov	r8, sl
 8004d4e:	46d9      	mov	r9, fp
 8004d50:	4682      	mov	sl, r0
 8004d52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004d56:	2e00      	cmp	r6, #0
 8004d58:	d158      	bne.n	8004e0c <_dtoa_r+0x4e4>
 8004d5a:	4b7e      	ldr	r3, [pc, #504]	; (8004f54 <_dtoa_r+0x62c>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	4640      	mov	r0, r8
 8004d60:	4649      	mov	r1, r9
 8004d62:	f7fb fa91 	bl	8000288 <__aeabi_dsub>
 8004d66:	4652      	mov	r2, sl
 8004d68:	465b      	mov	r3, fp
 8004d6a:	4680      	mov	r8, r0
 8004d6c:	4689      	mov	r9, r1
 8004d6e:	f7fb fed3 	bl	8000b18 <__aeabi_dcmpgt>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	f040 8295 	bne.w	80052a2 <_dtoa_r+0x97a>
 8004d78:	4652      	mov	r2, sl
 8004d7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004d7e:	4640      	mov	r0, r8
 8004d80:	4649      	mov	r1, r9
 8004d82:	f7fb feab 	bl	8000adc <__aeabi_dcmplt>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	f040 8289 	bne.w	800529e <_dtoa_r+0x976>
 8004d8c:	ec5b ab19 	vmov	sl, fp, d9
 8004d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f2c0 8148 	blt.w	8005028 <_dtoa_r+0x700>
 8004d98:	9a00      	ldr	r2, [sp, #0]
 8004d9a:	2a0e      	cmp	r2, #14
 8004d9c:	f300 8144 	bgt.w	8005028 <_dtoa_r+0x700>
 8004da0:	4b67      	ldr	r3, [pc, #412]	; (8004f40 <_dtoa_r+0x618>)
 8004da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004da6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f280 80d5 	bge.w	8004f5c <_dtoa_r+0x634>
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f300 80d1 	bgt.w	8004f5c <_dtoa_r+0x634>
 8004dba:	f040 826f 	bne.w	800529c <_dtoa_r+0x974>
 8004dbe:	4b65      	ldr	r3, [pc, #404]	; (8004f54 <_dtoa_r+0x62c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	f7fb fc17 	bl	80005f8 <__aeabi_dmul>
 8004dca:	4652      	mov	r2, sl
 8004dcc:	465b      	mov	r3, fp
 8004dce:	f7fb fe99 	bl	8000b04 <__aeabi_dcmpge>
 8004dd2:	9e03      	ldr	r6, [sp, #12]
 8004dd4:	4637      	mov	r7, r6
 8004dd6:	2800      	cmp	r0, #0
 8004dd8:	f040 8245 	bne.w	8005266 <_dtoa_r+0x93e>
 8004ddc:	9d01      	ldr	r5, [sp, #4]
 8004dde:	2331      	movs	r3, #49	; 0x31
 8004de0:	f805 3b01 	strb.w	r3, [r5], #1
 8004de4:	9b00      	ldr	r3, [sp, #0]
 8004de6:	3301      	adds	r3, #1
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	e240      	b.n	800526e <_dtoa_r+0x946>
 8004dec:	07f2      	lsls	r2, r6, #31
 8004dee:	d505      	bpl.n	8004dfc <_dtoa_r+0x4d4>
 8004df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004df4:	f7fb fc00 	bl	80005f8 <__aeabi_dmul>
 8004df8:	3501      	adds	r5, #1
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	1076      	asrs	r6, r6, #1
 8004dfe:	3708      	adds	r7, #8
 8004e00:	e777      	b.n	8004cf2 <_dtoa_r+0x3ca>
 8004e02:	2502      	movs	r5, #2
 8004e04:	e779      	b.n	8004cfa <_dtoa_r+0x3d2>
 8004e06:	9f00      	ldr	r7, [sp, #0]
 8004e08:	9e03      	ldr	r6, [sp, #12]
 8004e0a:	e794      	b.n	8004d36 <_dtoa_r+0x40e>
 8004e0c:	9901      	ldr	r1, [sp, #4]
 8004e0e:	4b4c      	ldr	r3, [pc, #304]	; (8004f40 <_dtoa_r+0x618>)
 8004e10:	4431      	add	r1, r6
 8004e12:	910d      	str	r1, [sp, #52]	; 0x34
 8004e14:	9908      	ldr	r1, [sp, #32]
 8004e16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004e1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e1e:	2900      	cmp	r1, #0
 8004e20:	d043      	beq.n	8004eaa <_dtoa_r+0x582>
 8004e22:	494d      	ldr	r1, [pc, #308]	; (8004f58 <_dtoa_r+0x630>)
 8004e24:	2000      	movs	r0, #0
 8004e26:	f7fb fd11 	bl	800084c <__aeabi_ddiv>
 8004e2a:	4652      	mov	r2, sl
 8004e2c:	465b      	mov	r3, fp
 8004e2e:	f7fb fa2b 	bl	8000288 <__aeabi_dsub>
 8004e32:	9d01      	ldr	r5, [sp, #4]
 8004e34:	4682      	mov	sl, r0
 8004e36:	468b      	mov	fp, r1
 8004e38:	4649      	mov	r1, r9
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	f7fb fe8c 	bl	8000b58 <__aeabi_d2iz>
 8004e40:	4606      	mov	r6, r0
 8004e42:	f7fb fb6f 	bl	8000524 <__aeabi_i2d>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	f7fb fa1b 	bl	8000288 <__aeabi_dsub>
 8004e52:	3630      	adds	r6, #48	; 0x30
 8004e54:	f805 6b01 	strb.w	r6, [r5], #1
 8004e58:	4652      	mov	r2, sl
 8004e5a:	465b      	mov	r3, fp
 8004e5c:	4680      	mov	r8, r0
 8004e5e:	4689      	mov	r9, r1
 8004e60:	f7fb fe3c 	bl	8000adc <__aeabi_dcmplt>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d163      	bne.n	8004f30 <_dtoa_r+0x608>
 8004e68:	4642      	mov	r2, r8
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	4936      	ldr	r1, [pc, #216]	; (8004f48 <_dtoa_r+0x620>)
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f7fb fa0a 	bl	8000288 <__aeabi_dsub>
 8004e74:	4652      	mov	r2, sl
 8004e76:	465b      	mov	r3, fp
 8004e78:	f7fb fe30 	bl	8000adc <__aeabi_dcmplt>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	f040 80b5 	bne.w	8004fec <_dtoa_r+0x6c4>
 8004e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e84:	429d      	cmp	r5, r3
 8004e86:	d081      	beq.n	8004d8c <_dtoa_r+0x464>
 8004e88:	4b30      	ldr	r3, [pc, #192]	; (8004f4c <_dtoa_r+0x624>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	4650      	mov	r0, sl
 8004e8e:	4659      	mov	r1, fp
 8004e90:	f7fb fbb2 	bl	80005f8 <__aeabi_dmul>
 8004e94:	4b2d      	ldr	r3, [pc, #180]	; (8004f4c <_dtoa_r+0x624>)
 8004e96:	4682      	mov	sl, r0
 8004e98:	468b      	mov	fp, r1
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f7fb fbaa 	bl	80005f8 <__aeabi_dmul>
 8004ea4:	4680      	mov	r8, r0
 8004ea6:	4689      	mov	r9, r1
 8004ea8:	e7c6      	b.n	8004e38 <_dtoa_r+0x510>
 8004eaa:	4650      	mov	r0, sl
 8004eac:	4659      	mov	r1, fp
 8004eae:	f7fb fba3 	bl	80005f8 <__aeabi_dmul>
 8004eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eb4:	9d01      	ldr	r5, [sp, #4]
 8004eb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004eb8:	4682      	mov	sl, r0
 8004eba:	468b      	mov	fp, r1
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	f7fb fe4a 	bl	8000b58 <__aeabi_d2iz>
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	f7fb fb2d 	bl	8000524 <__aeabi_i2d>
 8004eca:	3630      	adds	r6, #48	; 0x30
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4640      	mov	r0, r8
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	f7fb f9d8 	bl	8000288 <__aeabi_dsub>
 8004ed8:	f805 6b01 	strb.w	r6, [r5], #1
 8004edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ede:	429d      	cmp	r5, r3
 8004ee0:	4680      	mov	r8, r0
 8004ee2:	4689      	mov	r9, r1
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	d124      	bne.n	8004f34 <_dtoa_r+0x60c>
 8004eea:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <_dtoa_r+0x630>)
 8004eec:	4650      	mov	r0, sl
 8004eee:	4659      	mov	r1, fp
 8004ef0:	f7fb f9cc 	bl	800028c <__adddf3>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4640      	mov	r0, r8
 8004efa:	4649      	mov	r1, r9
 8004efc:	f7fb fe0c 	bl	8000b18 <__aeabi_dcmpgt>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d173      	bne.n	8004fec <_dtoa_r+0x6c4>
 8004f04:	4652      	mov	r2, sl
 8004f06:	465b      	mov	r3, fp
 8004f08:	4913      	ldr	r1, [pc, #76]	; (8004f58 <_dtoa_r+0x630>)
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7fb f9bc 	bl	8000288 <__aeabi_dsub>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4640      	mov	r0, r8
 8004f16:	4649      	mov	r1, r9
 8004f18:	f7fb fde0 	bl	8000adc <__aeabi_dcmplt>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	f43f af35 	beq.w	8004d8c <_dtoa_r+0x464>
 8004f22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004f24:	1e6b      	subs	r3, r5, #1
 8004f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f2c:	2b30      	cmp	r3, #48	; 0x30
 8004f2e:	d0f8      	beq.n	8004f22 <_dtoa_r+0x5fa>
 8004f30:	9700      	str	r7, [sp, #0]
 8004f32:	e049      	b.n	8004fc8 <_dtoa_r+0x6a0>
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <_dtoa_r+0x624>)
 8004f36:	f7fb fb5f 	bl	80005f8 <__aeabi_dmul>
 8004f3a:	4680      	mov	r8, r0
 8004f3c:	4689      	mov	r9, r1
 8004f3e:	e7bd      	b.n	8004ebc <_dtoa_r+0x594>
 8004f40:	08006e58 	.word	0x08006e58
 8004f44:	08006e30 	.word	0x08006e30
 8004f48:	3ff00000 	.word	0x3ff00000
 8004f4c:	40240000 	.word	0x40240000
 8004f50:	401c0000 	.word	0x401c0000
 8004f54:	40140000 	.word	0x40140000
 8004f58:	3fe00000 	.word	0x3fe00000
 8004f5c:	9d01      	ldr	r5, [sp, #4]
 8004f5e:	4656      	mov	r6, sl
 8004f60:	465f      	mov	r7, fp
 8004f62:	4642      	mov	r2, r8
 8004f64:	464b      	mov	r3, r9
 8004f66:	4630      	mov	r0, r6
 8004f68:	4639      	mov	r1, r7
 8004f6a:	f7fb fc6f 	bl	800084c <__aeabi_ddiv>
 8004f6e:	f7fb fdf3 	bl	8000b58 <__aeabi_d2iz>
 8004f72:	4682      	mov	sl, r0
 8004f74:	f7fb fad6 	bl	8000524 <__aeabi_i2d>
 8004f78:	4642      	mov	r2, r8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	f7fb fb3c 	bl	80005f8 <__aeabi_dmul>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4630      	mov	r0, r6
 8004f86:	4639      	mov	r1, r7
 8004f88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004f8c:	f7fb f97c 	bl	8000288 <__aeabi_dsub>
 8004f90:	f805 6b01 	strb.w	r6, [r5], #1
 8004f94:	9e01      	ldr	r6, [sp, #4]
 8004f96:	9f03      	ldr	r7, [sp, #12]
 8004f98:	1bae      	subs	r6, r5, r6
 8004f9a:	42b7      	cmp	r7, r6
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	d135      	bne.n	800500e <_dtoa_r+0x6e6>
 8004fa2:	f7fb f973 	bl	800028c <__adddf3>
 8004fa6:	4642      	mov	r2, r8
 8004fa8:	464b      	mov	r3, r9
 8004faa:	4606      	mov	r6, r0
 8004fac:	460f      	mov	r7, r1
 8004fae:	f7fb fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 8004fb2:	b9d0      	cbnz	r0, 8004fea <_dtoa_r+0x6c2>
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	4630      	mov	r0, r6
 8004fba:	4639      	mov	r1, r7
 8004fbc:	f7fb fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fc0:	b110      	cbz	r0, 8004fc8 <_dtoa_r+0x6a0>
 8004fc2:	f01a 0f01 	tst.w	sl, #1
 8004fc6:	d110      	bne.n	8004fea <_dtoa_r+0x6c2>
 8004fc8:	4620      	mov	r0, r4
 8004fca:	ee18 1a10 	vmov	r1, s16
 8004fce:	f000 faf3 	bl	80055b8 <_Bfree>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	9800      	ldr	r0, [sp, #0]
 8004fd6:	702b      	strb	r3, [r5, #0]
 8004fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fda:	3001      	adds	r0, #1
 8004fdc:	6018      	str	r0, [r3, #0]
 8004fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f43f acf1 	beq.w	80049c8 <_dtoa_r+0xa0>
 8004fe6:	601d      	str	r5, [r3, #0]
 8004fe8:	e4ee      	b.n	80049c8 <_dtoa_r+0xa0>
 8004fea:	9f00      	ldr	r7, [sp, #0]
 8004fec:	462b      	mov	r3, r5
 8004fee:	461d      	mov	r5, r3
 8004ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ff4:	2a39      	cmp	r2, #57	; 0x39
 8004ff6:	d106      	bne.n	8005006 <_dtoa_r+0x6de>
 8004ff8:	9a01      	ldr	r2, [sp, #4]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d1f7      	bne.n	8004fee <_dtoa_r+0x6c6>
 8004ffe:	9901      	ldr	r1, [sp, #4]
 8005000:	2230      	movs	r2, #48	; 0x30
 8005002:	3701      	adds	r7, #1
 8005004:	700a      	strb	r2, [r1, #0]
 8005006:	781a      	ldrb	r2, [r3, #0]
 8005008:	3201      	adds	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	e790      	b.n	8004f30 <_dtoa_r+0x608>
 800500e:	4ba6      	ldr	r3, [pc, #664]	; (80052a8 <_dtoa_r+0x980>)
 8005010:	2200      	movs	r2, #0
 8005012:	f7fb faf1 	bl	80005f8 <__aeabi_dmul>
 8005016:	2200      	movs	r2, #0
 8005018:	2300      	movs	r3, #0
 800501a:	4606      	mov	r6, r0
 800501c:	460f      	mov	r7, r1
 800501e:	f7fb fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 8005022:	2800      	cmp	r0, #0
 8005024:	d09d      	beq.n	8004f62 <_dtoa_r+0x63a>
 8005026:	e7cf      	b.n	8004fc8 <_dtoa_r+0x6a0>
 8005028:	9a08      	ldr	r2, [sp, #32]
 800502a:	2a00      	cmp	r2, #0
 800502c:	f000 80d7 	beq.w	80051de <_dtoa_r+0x8b6>
 8005030:	9a06      	ldr	r2, [sp, #24]
 8005032:	2a01      	cmp	r2, #1
 8005034:	f300 80ba 	bgt.w	80051ac <_dtoa_r+0x884>
 8005038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800503a:	2a00      	cmp	r2, #0
 800503c:	f000 80b2 	beq.w	80051a4 <_dtoa_r+0x87c>
 8005040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005044:	9e07      	ldr	r6, [sp, #28]
 8005046:	9d04      	ldr	r5, [sp, #16]
 8005048:	9a04      	ldr	r2, [sp, #16]
 800504a:	441a      	add	r2, r3
 800504c:	9204      	str	r2, [sp, #16]
 800504e:	9a05      	ldr	r2, [sp, #20]
 8005050:	2101      	movs	r1, #1
 8005052:	441a      	add	r2, r3
 8005054:	4620      	mov	r0, r4
 8005056:	9205      	str	r2, [sp, #20]
 8005058:	f000 fb66 	bl	8005728 <__i2b>
 800505c:	4607      	mov	r7, r0
 800505e:	2d00      	cmp	r5, #0
 8005060:	dd0c      	ble.n	800507c <_dtoa_r+0x754>
 8005062:	9b05      	ldr	r3, [sp, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	dd09      	ble.n	800507c <_dtoa_r+0x754>
 8005068:	42ab      	cmp	r3, r5
 800506a:	9a04      	ldr	r2, [sp, #16]
 800506c:	bfa8      	it	ge
 800506e:	462b      	movge	r3, r5
 8005070:	1ad2      	subs	r2, r2, r3
 8005072:	9204      	str	r2, [sp, #16]
 8005074:	9a05      	ldr	r2, [sp, #20]
 8005076:	1aed      	subs	r5, r5, r3
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	9305      	str	r3, [sp, #20]
 800507c:	9b07      	ldr	r3, [sp, #28]
 800507e:	b31b      	cbz	r3, 80050c8 <_dtoa_r+0x7a0>
 8005080:	9b08      	ldr	r3, [sp, #32]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 80af 	beq.w	80051e6 <_dtoa_r+0x8be>
 8005088:	2e00      	cmp	r6, #0
 800508a:	dd13      	ble.n	80050b4 <_dtoa_r+0x78c>
 800508c:	4639      	mov	r1, r7
 800508e:	4632      	mov	r2, r6
 8005090:	4620      	mov	r0, r4
 8005092:	f000 fc09 	bl	80058a8 <__pow5mult>
 8005096:	ee18 2a10 	vmov	r2, s16
 800509a:	4601      	mov	r1, r0
 800509c:	4607      	mov	r7, r0
 800509e:	4620      	mov	r0, r4
 80050a0:	f000 fb58 	bl	8005754 <__multiply>
 80050a4:	ee18 1a10 	vmov	r1, s16
 80050a8:	4680      	mov	r8, r0
 80050aa:	4620      	mov	r0, r4
 80050ac:	f000 fa84 	bl	80055b8 <_Bfree>
 80050b0:	ee08 8a10 	vmov	s16, r8
 80050b4:	9b07      	ldr	r3, [sp, #28]
 80050b6:	1b9a      	subs	r2, r3, r6
 80050b8:	d006      	beq.n	80050c8 <_dtoa_r+0x7a0>
 80050ba:	ee18 1a10 	vmov	r1, s16
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 fbf2 	bl	80058a8 <__pow5mult>
 80050c4:	ee08 0a10 	vmov	s16, r0
 80050c8:	2101      	movs	r1, #1
 80050ca:	4620      	mov	r0, r4
 80050cc:	f000 fb2c 	bl	8005728 <__i2b>
 80050d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	4606      	mov	r6, r0
 80050d6:	f340 8088 	ble.w	80051ea <_dtoa_r+0x8c2>
 80050da:	461a      	mov	r2, r3
 80050dc:	4601      	mov	r1, r0
 80050de:	4620      	mov	r0, r4
 80050e0:	f000 fbe2 	bl	80058a8 <__pow5mult>
 80050e4:	9b06      	ldr	r3, [sp, #24]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	4606      	mov	r6, r0
 80050ea:	f340 8081 	ble.w	80051f0 <_dtoa_r+0x8c8>
 80050ee:	f04f 0800 	mov.w	r8, #0
 80050f2:	6933      	ldr	r3, [r6, #16]
 80050f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80050f8:	6918      	ldr	r0, [r3, #16]
 80050fa:	f000 fac5 	bl	8005688 <__hi0bits>
 80050fe:	f1c0 0020 	rsb	r0, r0, #32
 8005102:	9b05      	ldr	r3, [sp, #20]
 8005104:	4418      	add	r0, r3
 8005106:	f010 001f 	ands.w	r0, r0, #31
 800510a:	f000 8092 	beq.w	8005232 <_dtoa_r+0x90a>
 800510e:	f1c0 0320 	rsb	r3, r0, #32
 8005112:	2b04      	cmp	r3, #4
 8005114:	f340 808a 	ble.w	800522c <_dtoa_r+0x904>
 8005118:	f1c0 001c 	rsb	r0, r0, #28
 800511c:	9b04      	ldr	r3, [sp, #16]
 800511e:	4403      	add	r3, r0
 8005120:	9304      	str	r3, [sp, #16]
 8005122:	9b05      	ldr	r3, [sp, #20]
 8005124:	4403      	add	r3, r0
 8005126:	4405      	add	r5, r0
 8005128:	9305      	str	r3, [sp, #20]
 800512a:	9b04      	ldr	r3, [sp, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	dd07      	ble.n	8005140 <_dtoa_r+0x818>
 8005130:	ee18 1a10 	vmov	r1, s16
 8005134:	461a      	mov	r2, r3
 8005136:	4620      	mov	r0, r4
 8005138:	f000 fc10 	bl	800595c <__lshift>
 800513c:	ee08 0a10 	vmov	s16, r0
 8005140:	9b05      	ldr	r3, [sp, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	dd05      	ble.n	8005152 <_dtoa_r+0x82a>
 8005146:	4631      	mov	r1, r6
 8005148:	461a      	mov	r2, r3
 800514a:	4620      	mov	r0, r4
 800514c:	f000 fc06 	bl	800595c <__lshift>
 8005150:	4606      	mov	r6, r0
 8005152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005154:	2b00      	cmp	r3, #0
 8005156:	d06e      	beq.n	8005236 <_dtoa_r+0x90e>
 8005158:	ee18 0a10 	vmov	r0, s16
 800515c:	4631      	mov	r1, r6
 800515e:	f000 fc6d 	bl	8005a3c <__mcmp>
 8005162:	2800      	cmp	r0, #0
 8005164:	da67      	bge.n	8005236 <_dtoa_r+0x90e>
 8005166:	9b00      	ldr	r3, [sp, #0]
 8005168:	3b01      	subs	r3, #1
 800516a:	ee18 1a10 	vmov	r1, s16
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	220a      	movs	r2, #10
 8005172:	2300      	movs	r3, #0
 8005174:	4620      	mov	r0, r4
 8005176:	f000 fa41 	bl	80055fc <__multadd>
 800517a:	9b08      	ldr	r3, [sp, #32]
 800517c:	ee08 0a10 	vmov	s16, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 81b1 	beq.w	80054e8 <_dtoa_r+0xbc0>
 8005186:	2300      	movs	r3, #0
 8005188:	4639      	mov	r1, r7
 800518a:	220a      	movs	r2, #10
 800518c:	4620      	mov	r0, r4
 800518e:	f000 fa35 	bl	80055fc <__multadd>
 8005192:	9b02      	ldr	r3, [sp, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	4607      	mov	r7, r0
 8005198:	f300 808e 	bgt.w	80052b8 <_dtoa_r+0x990>
 800519c:	9b06      	ldr	r3, [sp, #24]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	dc51      	bgt.n	8005246 <_dtoa_r+0x91e>
 80051a2:	e089      	b.n	80052b8 <_dtoa_r+0x990>
 80051a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80051aa:	e74b      	b.n	8005044 <_dtoa_r+0x71c>
 80051ac:	9b03      	ldr	r3, [sp, #12]
 80051ae:	1e5e      	subs	r6, r3, #1
 80051b0:	9b07      	ldr	r3, [sp, #28]
 80051b2:	42b3      	cmp	r3, r6
 80051b4:	bfbf      	itttt	lt
 80051b6:	9b07      	ldrlt	r3, [sp, #28]
 80051b8:	9607      	strlt	r6, [sp, #28]
 80051ba:	1af2      	sublt	r2, r6, r3
 80051bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80051be:	bfb6      	itet	lt
 80051c0:	189b      	addlt	r3, r3, r2
 80051c2:	1b9e      	subge	r6, r3, r6
 80051c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	bfb8      	it	lt
 80051ca:	2600      	movlt	r6, #0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	bfb7      	itett	lt
 80051d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80051d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80051d8:	1a9d      	sublt	r5, r3, r2
 80051da:	2300      	movlt	r3, #0
 80051dc:	e734      	b.n	8005048 <_dtoa_r+0x720>
 80051de:	9e07      	ldr	r6, [sp, #28]
 80051e0:	9d04      	ldr	r5, [sp, #16]
 80051e2:	9f08      	ldr	r7, [sp, #32]
 80051e4:	e73b      	b.n	800505e <_dtoa_r+0x736>
 80051e6:	9a07      	ldr	r2, [sp, #28]
 80051e8:	e767      	b.n	80050ba <_dtoa_r+0x792>
 80051ea:	9b06      	ldr	r3, [sp, #24]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	dc18      	bgt.n	8005222 <_dtoa_r+0x8fa>
 80051f0:	f1ba 0f00 	cmp.w	sl, #0
 80051f4:	d115      	bne.n	8005222 <_dtoa_r+0x8fa>
 80051f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80051fa:	b993      	cbnz	r3, 8005222 <_dtoa_r+0x8fa>
 80051fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005200:	0d1b      	lsrs	r3, r3, #20
 8005202:	051b      	lsls	r3, r3, #20
 8005204:	b183      	cbz	r3, 8005228 <_dtoa_r+0x900>
 8005206:	9b04      	ldr	r3, [sp, #16]
 8005208:	3301      	adds	r3, #1
 800520a:	9304      	str	r3, [sp, #16]
 800520c:	9b05      	ldr	r3, [sp, #20]
 800520e:	3301      	adds	r3, #1
 8005210:	9305      	str	r3, [sp, #20]
 8005212:	f04f 0801 	mov.w	r8, #1
 8005216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	f47f af6a 	bne.w	80050f2 <_dtoa_r+0x7ca>
 800521e:	2001      	movs	r0, #1
 8005220:	e76f      	b.n	8005102 <_dtoa_r+0x7da>
 8005222:	f04f 0800 	mov.w	r8, #0
 8005226:	e7f6      	b.n	8005216 <_dtoa_r+0x8ee>
 8005228:	4698      	mov	r8, r3
 800522a:	e7f4      	b.n	8005216 <_dtoa_r+0x8ee>
 800522c:	f43f af7d 	beq.w	800512a <_dtoa_r+0x802>
 8005230:	4618      	mov	r0, r3
 8005232:	301c      	adds	r0, #28
 8005234:	e772      	b.n	800511c <_dtoa_r+0x7f4>
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc37      	bgt.n	80052ac <_dtoa_r+0x984>
 800523c:	9b06      	ldr	r3, [sp, #24]
 800523e:	2b02      	cmp	r3, #2
 8005240:	dd34      	ble.n	80052ac <_dtoa_r+0x984>
 8005242:	9b03      	ldr	r3, [sp, #12]
 8005244:	9302      	str	r3, [sp, #8]
 8005246:	9b02      	ldr	r3, [sp, #8]
 8005248:	b96b      	cbnz	r3, 8005266 <_dtoa_r+0x93e>
 800524a:	4631      	mov	r1, r6
 800524c:	2205      	movs	r2, #5
 800524e:	4620      	mov	r0, r4
 8005250:	f000 f9d4 	bl	80055fc <__multadd>
 8005254:	4601      	mov	r1, r0
 8005256:	4606      	mov	r6, r0
 8005258:	ee18 0a10 	vmov	r0, s16
 800525c:	f000 fbee 	bl	8005a3c <__mcmp>
 8005260:	2800      	cmp	r0, #0
 8005262:	f73f adbb 	bgt.w	8004ddc <_dtoa_r+0x4b4>
 8005266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005268:	9d01      	ldr	r5, [sp, #4]
 800526a:	43db      	mvns	r3, r3
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	f04f 0800 	mov.w	r8, #0
 8005272:	4631      	mov	r1, r6
 8005274:	4620      	mov	r0, r4
 8005276:	f000 f99f 	bl	80055b8 <_Bfree>
 800527a:	2f00      	cmp	r7, #0
 800527c:	f43f aea4 	beq.w	8004fc8 <_dtoa_r+0x6a0>
 8005280:	f1b8 0f00 	cmp.w	r8, #0
 8005284:	d005      	beq.n	8005292 <_dtoa_r+0x96a>
 8005286:	45b8      	cmp	r8, r7
 8005288:	d003      	beq.n	8005292 <_dtoa_r+0x96a>
 800528a:	4641      	mov	r1, r8
 800528c:	4620      	mov	r0, r4
 800528e:	f000 f993 	bl	80055b8 <_Bfree>
 8005292:	4639      	mov	r1, r7
 8005294:	4620      	mov	r0, r4
 8005296:	f000 f98f 	bl	80055b8 <_Bfree>
 800529a:	e695      	b.n	8004fc8 <_dtoa_r+0x6a0>
 800529c:	2600      	movs	r6, #0
 800529e:	4637      	mov	r7, r6
 80052a0:	e7e1      	b.n	8005266 <_dtoa_r+0x93e>
 80052a2:	9700      	str	r7, [sp, #0]
 80052a4:	4637      	mov	r7, r6
 80052a6:	e599      	b.n	8004ddc <_dtoa_r+0x4b4>
 80052a8:	40240000 	.word	0x40240000
 80052ac:	9b08      	ldr	r3, [sp, #32]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80ca 	beq.w	8005448 <_dtoa_r+0xb20>
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	9302      	str	r3, [sp, #8]
 80052b8:	2d00      	cmp	r5, #0
 80052ba:	dd05      	ble.n	80052c8 <_dtoa_r+0x9a0>
 80052bc:	4639      	mov	r1, r7
 80052be:	462a      	mov	r2, r5
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 fb4b 	bl	800595c <__lshift>
 80052c6:	4607      	mov	r7, r0
 80052c8:	f1b8 0f00 	cmp.w	r8, #0
 80052cc:	d05b      	beq.n	8005386 <_dtoa_r+0xa5e>
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 f931 	bl	8005538 <_Balloc>
 80052d6:	4605      	mov	r5, r0
 80052d8:	b928      	cbnz	r0, 80052e6 <_dtoa_r+0x9be>
 80052da:	4b87      	ldr	r3, [pc, #540]	; (80054f8 <_dtoa_r+0xbd0>)
 80052dc:	4602      	mov	r2, r0
 80052de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80052e2:	f7ff bb3b 	b.w	800495c <_dtoa_r+0x34>
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	3202      	adds	r2, #2
 80052ea:	0092      	lsls	r2, r2, #2
 80052ec:	f107 010c 	add.w	r1, r7, #12
 80052f0:	300c      	adds	r0, #12
 80052f2:	f000 f913 	bl	800551c <memcpy>
 80052f6:	2201      	movs	r2, #1
 80052f8:	4629      	mov	r1, r5
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 fb2e 	bl	800595c <__lshift>
 8005300:	9b01      	ldr	r3, [sp, #4]
 8005302:	f103 0901 	add.w	r9, r3, #1
 8005306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800530a:	4413      	add	r3, r2
 800530c:	9305      	str	r3, [sp, #20]
 800530e:	f00a 0301 	and.w	r3, sl, #1
 8005312:	46b8      	mov	r8, r7
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	4607      	mov	r7, r0
 8005318:	4631      	mov	r1, r6
 800531a:	ee18 0a10 	vmov	r0, s16
 800531e:	f7ff fa77 	bl	8004810 <quorem>
 8005322:	4641      	mov	r1, r8
 8005324:	9002      	str	r0, [sp, #8]
 8005326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800532a:	ee18 0a10 	vmov	r0, s16
 800532e:	f000 fb85 	bl	8005a3c <__mcmp>
 8005332:	463a      	mov	r2, r7
 8005334:	9003      	str	r0, [sp, #12]
 8005336:	4631      	mov	r1, r6
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fb9b 	bl	8005a74 <__mdiff>
 800533e:	68c2      	ldr	r2, [r0, #12]
 8005340:	f109 3bff 	add.w	fp, r9, #4294967295
 8005344:	4605      	mov	r5, r0
 8005346:	bb02      	cbnz	r2, 800538a <_dtoa_r+0xa62>
 8005348:	4601      	mov	r1, r0
 800534a:	ee18 0a10 	vmov	r0, s16
 800534e:	f000 fb75 	bl	8005a3c <__mcmp>
 8005352:	4602      	mov	r2, r0
 8005354:	4629      	mov	r1, r5
 8005356:	4620      	mov	r0, r4
 8005358:	9207      	str	r2, [sp, #28]
 800535a:	f000 f92d 	bl	80055b8 <_Bfree>
 800535e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005362:	ea43 0102 	orr.w	r1, r3, r2
 8005366:	9b04      	ldr	r3, [sp, #16]
 8005368:	430b      	orrs	r3, r1
 800536a:	464d      	mov	r5, r9
 800536c:	d10f      	bne.n	800538e <_dtoa_r+0xa66>
 800536e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005372:	d02a      	beq.n	80053ca <_dtoa_r+0xaa2>
 8005374:	9b03      	ldr	r3, [sp, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	dd02      	ble.n	8005380 <_dtoa_r+0xa58>
 800537a:	9b02      	ldr	r3, [sp, #8]
 800537c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005380:	f88b a000 	strb.w	sl, [fp]
 8005384:	e775      	b.n	8005272 <_dtoa_r+0x94a>
 8005386:	4638      	mov	r0, r7
 8005388:	e7ba      	b.n	8005300 <_dtoa_r+0x9d8>
 800538a:	2201      	movs	r2, #1
 800538c:	e7e2      	b.n	8005354 <_dtoa_r+0xa2c>
 800538e:	9b03      	ldr	r3, [sp, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	db04      	blt.n	800539e <_dtoa_r+0xa76>
 8005394:	9906      	ldr	r1, [sp, #24]
 8005396:	430b      	orrs	r3, r1
 8005398:	9904      	ldr	r1, [sp, #16]
 800539a:	430b      	orrs	r3, r1
 800539c:	d122      	bne.n	80053e4 <_dtoa_r+0xabc>
 800539e:	2a00      	cmp	r2, #0
 80053a0:	ddee      	ble.n	8005380 <_dtoa_r+0xa58>
 80053a2:	ee18 1a10 	vmov	r1, s16
 80053a6:	2201      	movs	r2, #1
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fad7 	bl	800595c <__lshift>
 80053ae:	4631      	mov	r1, r6
 80053b0:	ee08 0a10 	vmov	s16, r0
 80053b4:	f000 fb42 	bl	8005a3c <__mcmp>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	dc03      	bgt.n	80053c4 <_dtoa_r+0xa9c>
 80053bc:	d1e0      	bne.n	8005380 <_dtoa_r+0xa58>
 80053be:	f01a 0f01 	tst.w	sl, #1
 80053c2:	d0dd      	beq.n	8005380 <_dtoa_r+0xa58>
 80053c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80053c8:	d1d7      	bne.n	800537a <_dtoa_r+0xa52>
 80053ca:	2339      	movs	r3, #57	; 0x39
 80053cc:	f88b 3000 	strb.w	r3, [fp]
 80053d0:	462b      	mov	r3, r5
 80053d2:	461d      	mov	r5, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80053da:	2a39      	cmp	r2, #57	; 0x39
 80053dc:	d071      	beq.n	80054c2 <_dtoa_r+0xb9a>
 80053de:	3201      	adds	r2, #1
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	e746      	b.n	8005272 <_dtoa_r+0x94a>
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	dd07      	ble.n	80053f8 <_dtoa_r+0xad0>
 80053e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80053ec:	d0ed      	beq.n	80053ca <_dtoa_r+0xaa2>
 80053ee:	f10a 0301 	add.w	r3, sl, #1
 80053f2:	f88b 3000 	strb.w	r3, [fp]
 80053f6:	e73c      	b.n	8005272 <_dtoa_r+0x94a>
 80053f8:	9b05      	ldr	r3, [sp, #20]
 80053fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80053fe:	4599      	cmp	r9, r3
 8005400:	d047      	beq.n	8005492 <_dtoa_r+0xb6a>
 8005402:	ee18 1a10 	vmov	r1, s16
 8005406:	2300      	movs	r3, #0
 8005408:	220a      	movs	r2, #10
 800540a:	4620      	mov	r0, r4
 800540c:	f000 f8f6 	bl	80055fc <__multadd>
 8005410:	45b8      	cmp	r8, r7
 8005412:	ee08 0a10 	vmov	s16, r0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	f04f 020a 	mov.w	r2, #10
 800541e:	4641      	mov	r1, r8
 8005420:	4620      	mov	r0, r4
 8005422:	d106      	bne.n	8005432 <_dtoa_r+0xb0a>
 8005424:	f000 f8ea 	bl	80055fc <__multadd>
 8005428:	4680      	mov	r8, r0
 800542a:	4607      	mov	r7, r0
 800542c:	f109 0901 	add.w	r9, r9, #1
 8005430:	e772      	b.n	8005318 <_dtoa_r+0x9f0>
 8005432:	f000 f8e3 	bl	80055fc <__multadd>
 8005436:	4639      	mov	r1, r7
 8005438:	4680      	mov	r8, r0
 800543a:	2300      	movs	r3, #0
 800543c:	220a      	movs	r2, #10
 800543e:	4620      	mov	r0, r4
 8005440:	f000 f8dc 	bl	80055fc <__multadd>
 8005444:	4607      	mov	r7, r0
 8005446:	e7f1      	b.n	800542c <_dtoa_r+0xb04>
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	9302      	str	r3, [sp, #8]
 800544c:	9d01      	ldr	r5, [sp, #4]
 800544e:	ee18 0a10 	vmov	r0, s16
 8005452:	4631      	mov	r1, r6
 8005454:	f7ff f9dc 	bl	8004810 <quorem>
 8005458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800545c:	9b01      	ldr	r3, [sp, #4]
 800545e:	f805 ab01 	strb.w	sl, [r5], #1
 8005462:	1aea      	subs	r2, r5, r3
 8005464:	9b02      	ldr	r3, [sp, #8]
 8005466:	4293      	cmp	r3, r2
 8005468:	dd09      	ble.n	800547e <_dtoa_r+0xb56>
 800546a:	ee18 1a10 	vmov	r1, s16
 800546e:	2300      	movs	r3, #0
 8005470:	220a      	movs	r2, #10
 8005472:	4620      	mov	r0, r4
 8005474:	f000 f8c2 	bl	80055fc <__multadd>
 8005478:	ee08 0a10 	vmov	s16, r0
 800547c:	e7e7      	b.n	800544e <_dtoa_r+0xb26>
 800547e:	9b02      	ldr	r3, [sp, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	bfc8      	it	gt
 8005484:	461d      	movgt	r5, r3
 8005486:	9b01      	ldr	r3, [sp, #4]
 8005488:	bfd8      	it	le
 800548a:	2501      	movle	r5, #1
 800548c:	441d      	add	r5, r3
 800548e:	f04f 0800 	mov.w	r8, #0
 8005492:	ee18 1a10 	vmov	r1, s16
 8005496:	2201      	movs	r2, #1
 8005498:	4620      	mov	r0, r4
 800549a:	f000 fa5f 	bl	800595c <__lshift>
 800549e:	4631      	mov	r1, r6
 80054a0:	ee08 0a10 	vmov	s16, r0
 80054a4:	f000 faca 	bl	8005a3c <__mcmp>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	dc91      	bgt.n	80053d0 <_dtoa_r+0xaa8>
 80054ac:	d102      	bne.n	80054b4 <_dtoa_r+0xb8c>
 80054ae:	f01a 0f01 	tst.w	sl, #1
 80054b2:	d18d      	bne.n	80053d0 <_dtoa_r+0xaa8>
 80054b4:	462b      	mov	r3, r5
 80054b6:	461d      	mov	r5, r3
 80054b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054bc:	2a30      	cmp	r2, #48	; 0x30
 80054be:	d0fa      	beq.n	80054b6 <_dtoa_r+0xb8e>
 80054c0:	e6d7      	b.n	8005272 <_dtoa_r+0x94a>
 80054c2:	9a01      	ldr	r2, [sp, #4]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d184      	bne.n	80053d2 <_dtoa_r+0xaaa>
 80054c8:	9b00      	ldr	r3, [sp, #0]
 80054ca:	3301      	adds	r3, #1
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2331      	movs	r3, #49	; 0x31
 80054d0:	7013      	strb	r3, [r2, #0]
 80054d2:	e6ce      	b.n	8005272 <_dtoa_r+0x94a>
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <_dtoa_r+0xbd4>)
 80054d6:	f7ff ba95 	b.w	8004a04 <_dtoa_r+0xdc>
 80054da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f47f aa6e 	bne.w	80049be <_dtoa_r+0x96>
 80054e2:	4b07      	ldr	r3, [pc, #28]	; (8005500 <_dtoa_r+0xbd8>)
 80054e4:	f7ff ba8e 	b.w	8004a04 <_dtoa_r+0xdc>
 80054e8:	9b02      	ldr	r3, [sp, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	dcae      	bgt.n	800544c <_dtoa_r+0xb24>
 80054ee:	9b06      	ldr	r3, [sp, #24]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	f73f aea8 	bgt.w	8005246 <_dtoa_r+0x91e>
 80054f6:	e7a9      	b.n	800544c <_dtoa_r+0xb24>
 80054f8:	08006dc3 	.word	0x08006dc3
 80054fc:	08006d20 	.word	0x08006d20
 8005500:	08006d44 	.word	0x08006d44

08005504 <_localeconv_r>:
 8005504:	4800      	ldr	r0, [pc, #0]	; (8005508 <_localeconv_r+0x4>)
 8005506:	4770      	bx	lr
 8005508:	20000164 	.word	0x20000164

0800550c <malloc>:
 800550c:	4b02      	ldr	r3, [pc, #8]	; (8005518 <malloc+0xc>)
 800550e:	4601      	mov	r1, r0
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	f000 bc17 	b.w	8005d44 <_malloc_r>
 8005516:	bf00      	nop
 8005518:	20000010 	.word	0x20000010

0800551c <memcpy>:
 800551c:	440a      	add	r2, r1
 800551e:	4291      	cmp	r1, r2
 8005520:	f100 33ff 	add.w	r3, r0, #4294967295
 8005524:	d100      	bne.n	8005528 <memcpy+0xc>
 8005526:	4770      	bx	lr
 8005528:	b510      	push	{r4, lr}
 800552a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800552e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005532:	4291      	cmp	r1, r2
 8005534:	d1f9      	bne.n	800552a <memcpy+0xe>
 8005536:	bd10      	pop	{r4, pc}

08005538 <_Balloc>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800553c:	4604      	mov	r4, r0
 800553e:	460d      	mov	r5, r1
 8005540:	b976      	cbnz	r6, 8005560 <_Balloc+0x28>
 8005542:	2010      	movs	r0, #16
 8005544:	f7ff ffe2 	bl	800550c <malloc>
 8005548:	4602      	mov	r2, r0
 800554a:	6260      	str	r0, [r4, #36]	; 0x24
 800554c:	b920      	cbnz	r0, 8005558 <_Balloc+0x20>
 800554e:	4b18      	ldr	r3, [pc, #96]	; (80055b0 <_Balloc+0x78>)
 8005550:	4818      	ldr	r0, [pc, #96]	; (80055b4 <_Balloc+0x7c>)
 8005552:	2166      	movs	r1, #102	; 0x66
 8005554:	f000 fdd6 	bl	8006104 <__assert_func>
 8005558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800555c:	6006      	str	r6, [r0, #0]
 800555e:	60c6      	str	r6, [r0, #12]
 8005560:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005562:	68f3      	ldr	r3, [r6, #12]
 8005564:	b183      	cbz	r3, 8005588 <_Balloc+0x50>
 8005566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800556e:	b9b8      	cbnz	r0, 80055a0 <_Balloc+0x68>
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f605 	lsl.w	r6, r1, r5
 8005576:	1d72      	adds	r2, r6, #5
 8005578:	0092      	lsls	r2, r2, #2
 800557a:	4620      	mov	r0, r4
 800557c:	f000 fb60 	bl	8005c40 <_calloc_r>
 8005580:	b160      	cbz	r0, 800559c <_Balloc+0x64>
 8005582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005586:	e00e      	b.n	80055a6 <_Balloc+0x6e>
 8005588:	2221      	movs	r2, #33	; 0x21
 800558a:	2104      	movs	r1, #4
 800558c:	4620      	mov	r0, r4
 800558e:	f000 fb57 	bl	8005c40 <_calloc_r>
 8005592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005594:	60f0      	str	r0, [r6, #12]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e4      	bne.n	8005566 <_Balloc+0x2e>
 800559c:	2000      	movs	r0, #0
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	6802      	ldr	r2, [r0, #0]
 80055a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055a6:	2300      	movs	r3, #0
 80055a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055ac:	e7f7      	b.n	800559e <_Balloc+0x66>
 80055ae:	bf00      	nop
 80055b0:	08006d51 	.word	0x08006d51
 80055b4:	08006dd4 	.word	0x08006dd4

080055b8 <_Bfree>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055bc:	4605      	mov	r5, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	b976      	cbnz	r6, 80055e0 <_Bfree+0x28>
 80055c2:	2010      	movs	r0, #16
 80055c4:	f7ff ffa2 	bl	800550c <malloc>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6268      	str	r0, [r5, #36]	; 0x24
 80055cc:	b920      	cbnz	r0, 80055d8 <_Bfree+0x20>
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <_Bfree+0x3c>)
 80055d0:	4809      	ldr	r0, [pc, #36]	; (80055f8 <_Bfree+0x40>)
 80055d2:	218a      	movs	r1, #138	; 0x8a
 80055d4:	f000 fd96 	bl	8006104 <__assert_func>
 80055d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055dc:	6006      	str	r6, [r0, #0]
 80055de:	60c6      	str	r6, [r0, #12]
 80055e0:	b13c      	cbz	r4, 80055f2 <_Bfree+0x3a>
 80055e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055e4:	6862      	ldr	r2, [r4, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055ec:	6021      	str	r1, [r4, #0]
 80055ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	08006d51 	.word	0x08006d51
 80055f8:	08006dd4 	.word	0x08006dd4

080055fc <__multadd>:
 80055fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005600:	690d      	ldr	r5, [r1, #16]
 8005602:	4607      	mov	r7, r0
 8005604:	460c      	mov	r4, r1
 8005606:	461e      	mov	r6, r3
 8005608:	f101 0c14 	add.w	ip, r1, #20
 800560c:	2000      	movs	r0, #0
 800560e:	f8dc 3000 	ldr.w	r3, [ip]
 8005612:	b299      	uxth	r1, r3
 8005614:	fb02 6101 	mla	r1, r2, r1, r6
 8005618:	0c1e      	lsrs	r6, r3, #16
 800561a:	0c0b      	lsrs	r3, r1, #16
 800561c:	fb02 3306 	mla	r3, r2, r6, r3
 8005620:	b289      	uxth	r1, r1
 8005622:	3001      	adds	r0, #1
 8005624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005628:	4285      	cmp	r5, r0
 800562a:	f84c 1b04 	str.w	r1, [ip], #4
 800562e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005632:	dcec      	bgt.n	800560e <__multadd+0x12>
 8005634:	b30e      	cbz	r6, 800567a <__multadd+0x7e>
 8005636:	68a3      	ldr	r3, [r4, #8]
 8005638:	42ab      	cmp	r3, r5
 800563a:	dc19      	bgt.n	8005670 <__multadd+0x74>
 800563c:	6861      	ldr	r1, [r4, #4]
 800563e:	4638      	mov	r0, r7
 8005640:	3101      	adds	r1, #1
 8005642:	f7ff ff79 	bl	8005538 <_Balloc>
 8005646:	4680      	mov	r8, r0
 8005648:	b928      	cbnz	r0, 8005656 <__multadd+0x5a>
 800564a:	4602      	mov	r2, r0
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <__multadd+0x84>)
 800564e:	480d      	ldr	r0, [pc, #52]	; (8005684 <__multadd+0x88>)
 8005650:	21b5      	movs	r1, #181	; 0xb5
 8005652:	f000 fd57 	bl	8006104 <__assert_func>
 8005656:	6922      	ldr	r2, [r4, #16]
 8005658:	3202      	adds	r2, #2
 800565a:	f104 010c 	add.w	r1, r4, #12
 800565e:	0092      	lsls	r2, r2, #2
 8005660:	300c      	adds	r0, #12
 8005662:	f7ff ff5b 	bl	800551c <memcpy>
 8005666:	4621      	mov	r1, r4
 8005668:	4638      	mov	r0, r7
 800566a:	f7ff ffa5 	bl	80055b8 <_Bfree>
 800566e:	4644      	mov	r4, r8
 8005670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005674:	3501      	adds	r5, #1
 8005676:	615e      	str	r6, [r3, #20]
 8005678:	6125      	str	r5, [r4, #16]
 800567a:	4620      	mov	r0, r4
 800567c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005680:	08006dc3 	.word	0x08006dc3
 8005684:	08006dd4 	.word	0x08006dd4

08005688 <__hi0bits>:
 8005688:	0c03      	lsrs	r3, r0, #16
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	b9d3      	cbnz	r3, 80056c4 <__hi0bits+0x3c>
 800568e:	0400      	lsls	r0, r0, #16
 8005690:	2310      	movs	r3, #16
 8005692:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005696:	bf04      	itt	eq
 8005698:	0200      	lsleq	r0, r0, #8
 800569a:	3308      	addeq	r3, #8
 800569c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80056a0:	bf04      	itt	eq
 80056a2:	0100      	lsleq	r0, r0, #4
 80056a4:	3304      	addeq	r3, #4
 80056a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80056aa:	bf04      	itt	eq
 80056ac:	0080      	lsleq	r0, r0, #2
 80056ae:	3302      	addeq	r3, #2
 80056b0:	2800      	cmp	r0, #0
 80056b2:	db05      	blt.n	80056c0 <__hi0bits+0x38>
 80056b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80056b8:	f103 0301 	add.w	r3, r3, #1
 80056bc:	bf08      	it	eq
 80056be:	2320      	moveq	r3, #32
 80056c0:	4618      	mov	r0, r3
 80056c2:	4770      	bx	lr
 80056c4:	2300      	movs	r3, #0
 80056c6:	e7e4      	b.n	8005692 <__hi0bits+0xa>

080056c8 <__lo0bits>:
 80056c8:	6803      	ldr	r3, [r0, #0]
 80056ca:	f013 0207 	ands.w	r2, r3, #7
 80056ce:	4601      	mov	r1, r0
 80056d0:	d00b      	beq.n	80056ea <__lo0bits+0x22>
 80056d2:	07da      	lsls	r2, r3, #31
 80056d4:	d423      	bmi.n	800571e <__lo0bits+0x56>
 80056d6:	0798      	lsls	r0, r3, #30
 80056d8:	bf49      	itett	mi
 80056da:	085b      	lsrmi	r3, r3, #1
 80056dc:	089b      	lsrpl	r3, r3, #2
 80056de:	2001      	movmi	r0, #1
 80056e0:	600b      	strmi	r3, [r1, #0]
 80056e2:	bf5c      	itt	pl
 80056e4:	600b      	strpl	r3, [r1, #0]
 80056e6:	2002      	movpl	r0, #2
 80056e8:	4770      	bx	lr
 80056ea:	b298      	uxth	r0, r3
 80056ec:	b9a8      	cbnz	r0, 800571a <__lo0bits+0x52>
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	2010      	movs	r0, #16
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	b90a      	cbnz	r2, 80056fa <__lo0bits+0x32>
 80056f6:	3008      	adds	r0, #8
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	071a      	lsls	r2, r3, #28
 80056fc:	bf04      	itt	eq
 80056fe:	091b      	lsreq	r3, r3, #4
 8005700:	3004      	addeq	r0, #4
 8005702:	079a      	lsls	r2, r3, #30
 8005704:	bf04      	itt	eq
 8005706:	089b      	lsreq	r3, r3, #2
 8005708:	3002      	addeq	r0, #2
 800570a:	07da      	lsls	r2, r3, #31
 800570c:	d403      	bmi.n	8005716 <__lo0bits+0x4e>
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	f100 0001 	add.w	r0, r0, #1
 8005714:	d005      	beq.n	8005722 <__lo0bits+0x5a>
 8005716:	600b      	str	r3, [r1, #0]
 8005718:	4770      	bx	lr
 800571a:	4610      	mov	r0, r2
 800571c:	e7e9      	b.n	80056f2 <__lo0bits+0x2a>
 800571e:	2000      	movs	r0, #0
 8005720:	4770      	bx	lr
 8005722:	2020      	movs	r0, #32
 8005724:	4770      	bx	lr
	...

08005728 <__i2b>:
 8005728:	b510      	push	{r4, lr}
 800572a:	460c      	mov	r4, r1
 800572c:	2101      	movs	r1, #1
 800572e:	f7ff ff03 	bl	8005538 <_Balloc>
 8005732:	4602      	mov	r2, r0
 8005734:	b928      	cbnz	r0, 8005742 <__i2b+0x1a>
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <__i2b+0x24>)
 8005738:	4805      	ldr	r0, [pc, #20]	; (8005750 <__i2b+0x28>)
 800573a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800573e:	f000 fce1 	bl	8006104 <__assert_func>
 8005742:	2301      	movs	r3, #1
 8005744:	6144      	str	r4, [r0, #20]
 8005746:	6103      	str	r3, [r0, #16]
 8005748:	bd10      	pop	{r4, pc}
 800574a:	bf00      	nop
 800574c:	08006dc3 	.word	0x08006dc3
 8005750:	08006dd4 	.word	0x08006dd4

08005754 <__multiply>:
 8005754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	4691      	mov	r9, r2
 800575a:	690a      	ldr	r2, [r1, #16]
 800575c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	bfb8      	it	lt
 8005764:	460b      	movlt	r3, r1
 8005766:	460c      	mov	r4, r1
 8005768:	bfbc      	itt	lt
 800576a:	464c      	movlt	r4, r9
 800576c:	4699      	movlt	r9, r3
 800576e:	6927      	ldr	r7, [r4, #16]
 8005770:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005774:	68a3      	ldr	r3, [r4, #8]
 8005776:	6861      	ldr	r1, [r4, #4]
 8005778:	eb07 060a 	add.w	r6, r7, sl
 800577c:	42b3      	cmp	r3, r6
 800577e:	b085      	sub	sp, #20
 8005780:	bfb8      	it	lt
 8005782:	3101      	addlt	r1, #1
 8005784:	f7ff fed8 	bl	8005538 <_Balloc>
 8005788:	b930      	cbnz	r0, 8005798 <__multiply+0x44>
 800578a:	4602      	mov	r2, r0
 800578c:	4b44      	ldr	r3, [pc, #272]	; (80058a0 <__multiply+0x14c>)
 800578e:	4845      	ldr	r0, [pc, #276]	; (80058a4 <__multiply+0x150>)
 8005790:	f240 115d 	movw	r1, #349	; 0x15d
 8005794:	f000 fcb6 	bl	8006104 <__assert_func>
 8005798:	f100 0514 	add.w	r5, r0, #20
 800579c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057a0:	462b      	mov	r3, r5
 80057a2:	2200      	movs	r2, #0
 80057a4:	4543      	cmp	r3, r8
 80057a6:	d321      	bcc.n	80057ec <__multiply+0x98>
 80057a8:	f104 0314 	add.w	r3, r4, #20
 80057ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80057b0:	f109 0314 	add.w	r3, r9, #20
 80057b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80057b8:	9202      	str	r2, [sp, #8]
 80057ba:	1b3a      	subs	r2, r7, r4
 80057bc:	3a15      	subs	r2, #21
 80057be:	f022 0203 	bic.w	r2, r2, #3
 80057c2:	3204      	adds	r2, #4
 80057c4:	f104 0115 	add.w	r1, r4, #21
 80057c8:	428f      	cmp	r7, r1
 80057ca:	bf38      	it	cc
 80057cc:	2204      	movcc	r2, #4
 80057ce:	9201      	str	r2, [sp, #4]
 80057d0:	9a02      	ldr	r2, [sp, #8]
 80057d2:	9303      	str	r3, [sp, #12]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d80c      	bhi.n	80057f2 <__multiply+0x9e>
 80057d8:	2e00      	cmp	r6, #0
 80057da:	dd03      	ble.n	80057e4 <__multiply+0x90>
 80057dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d05a      	beq.n	800589a <__multiply+0x146>
 80057e4:	6106      	str	r6, [r0, #16]
 80057e6:	b005      	add	sp, #20
 80057e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ec:	f843 2b04 	str.w	r2, [r3], #4
 80057f0:	e7d8      	b.n	80057a4 <__multiply+0x50>
 80057f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80057f6:	f1ba 0f00 	cmp.w	sl, #0
 80057fa:	d024      	beq.n	8005846 <__multiply+0xf2>
 80057fc:	f104 0e14 	add.w	lr, r4, #20
 8005800:	46a9      	mov	r9, r5
 8005802:	f04f 0c00 	mov.w	ip, #0
 8005806:	f85e 2b04 	ldr.w	r2, [lr], #4
 800580a:	f8d9 1000 	ldr.w	r1, [r9]
 800580e:	fa1f fb82 	uxth.w	fp, r2
 8005812:	b289      	uxth	r1, r1
 8005814:	fb0a 110b 	mla	r1, sl, fp, r1
 8005818:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800581c:	f8d9 2000 	ldr.w	r2, [r9]
 8005820:	4461      	add	r1, ip
 8005822:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005826:	fb0a c20b 	mla	r2, sl, fp, ip
 800582a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800582e:	b289      	uxth	r1, r1
 8005830:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005834:	4577      	cmp	r7, lr
 8005836:	f849 1b04 	str.w	r1, [r9], #4
 800583a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800583e:	d8e2      	bhi.n	8005806 <__multiply+0xb2>
 8005840:	9a01      	ldr	r2, [sp, #4]
 8005842:	f845 c002 	str.w	ip, [r5, r2]
 8005846:	9a03      	ldr	r2, [sp, #12]
 8005848:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800584c:	3304      	adds	r3, #4
 800584e:	f1b9 0f00 	cmp.w	r9, #0
 8005852:	d020      	beq.n	8005896 <__multiply+0x142>
 8005854:	6829      	ldr	r1, [r5, #0]
 8005856:	f104 0c14 	add.w	ip, r4, #20
 800585a:	46ae      	mov	lr, r5
 800585c:	f04f 0a00 	mov.w	sl, #0
 8005860:	f8bc b000 	ldrh.w	fp, [ip]
 8005864:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005868:	fb09 220b 	mla	r2, r9, fp, r2
 800586c:	4492      	add	sl, r2
 800586e:	b289      	uxth	r1, r1
 8005870:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005874:	f84e 1b04 	str.w	r1, [lr], #4
 8005878:	f85c 2b04 	ldr.w	r2, [ip], #4
 800587c:	f8be 1000 	ldrh.w	r1, [lr]
 8005880:	0c12      	lsrs	r2, r2, #16
 8005882:	fb09 1102 	mla	r1, r9, r2, r1
 8005886:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800588a:	4567      	cmp	r7, ip
 800588c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005890:	d8e6      	bhi.n	8005860 <__multiply+0x10c>
 8005892:	9a01      	ldr	r2, [sp, #4]
 8005894:	50a9      	str	r1, [r5, r2]
 8005896:	3504      	adds	r5, #4
 8005898:	e79a      	b.n	80057d0 <__multiply+0x7c>
 800589a:	3e01      	subs	r6, #1
 800589c:	e79c      	b.n	80057d8 <__multiply+0x84>
 800589e:	bf00      	nop
 80058a0:	08006dc3 	.word	0x08006dc3
 80058a4:	08006dd4 	.word	0x08006dd4

080058a8 <__pow5mult>:
 80058a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ac:	4615      	mov	r5, r2
 80058ae:	f012 0203 	ands.w	r2, r2, #3
 80058b2:	4606      	mov	r6, r0
 80058b4:	460f      	mov	r7, r1
 80058b6:	d007      	beq.n	80058c8 <__pow5mult+0x20>
 80058b8:	4c25      	ldr	r4, [pc, #148]	; (8005950 <__pow5mult+0xa8>)
 80058ba:	3a01      	subs	r2, #1
 80058bc:	2300      	movs	r3, #0
 80058be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058c2:	f7ff fe9b 	bl	80055fc <__multadd>
 80058c6:	4607      	mov	r7, r0
 80058c8:	10ad      	asrs	r5, r5, #2
 80058ca:	d03d      	beq.n	8005948 <__pow5mult+0xa0>
 80058cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80058ce:	b97c      	cbnz	r4, 80058f0 <__pow5mult+0x48>
 80058d0:	2010      	movs	r0, #16
 80058d2:	f7ff fe1b 	bl	800550c <malloc>
 80058d6:	4602      	mov	r2, r0
 80058d8:	6270      	str	r0, [r6, #36]	; 0x24
 80058da:	b928      	cbnz	r0, 80058e8 <__pow5mult+0x40>
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <__pow5mult+0xac>)
 80058de:	481e      	ldr	r0, [pc, #120]	; (8005958 <__pow5mult+0xb0>)
 80058e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80058e4:	f000 fc0e 	bl	8006104 <__assert_func>
 80058e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058ec:	6004      	str	r4, [r0, #0]
 80058ee:	60c4      	str	r4, [r0, #12]
 80058f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80058f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80058f8:	b94c      	cbnz	r4, 800590e <__pow5mult+0x66>
 80058fa:	f240 2171 	movw	r1, #625	; 0x271
 80058fe:	4630      	mov	r0, r6
 8005900:	f7ff ff12 	bl	8005728 <__i2b>
 8005904:	2300      	movs	r3, #0
 8005906:	f8c8 0008 	str.w	r0, [r8, #8]
 800590a:	4604      	mov	r4, r0
 800590c:	6003      	str	r3, [r0, #0]
 800590e:	f04f 0900 	mov.w	r9, #0
 8005912:	07eb      	lsls	r3, r5, #31
 8005914:	d50a      	bpl.n	800592c <__pow5mult+0x84>
 8005916:	4639      	mov	r1, r7
 8005918:	4622      	mov	r2, r4
 800591a:	4630      	mov	r0, r6
 800591c:	f7ff ff1a 	bl	8005754 <__multiply>
 8005920:	4639      	mov	r1, r7
 8005922:	4680      	mov	r8, r0
 8005924:	4630      	mov	r0, r6
 8005926:	f7ff fe47 	bl	80055b8 <_Bfree>
 800592a:	4647      	mov	r7, r8
 800592c:	106d      	asrs	r5, r5, #1
 800592e:	d00b      	beq.n	8005948 <__pow5mult+0xa0>
 8005930:	6820      	ldr	r0, [r4, #0]
 8005932:	b938      	cbnz	r0, 8005944 <__pow5mult+0x9c>
 8005934:	4622      	mov	r2, r4
 8005936:	4621      	mov	r1, r4
 8005938:	4630      	mov	r0, r6
 800593a:	f7ff ff0b 	bl	8005754 <__multiply>
 800593e:	6020      	str	r0, [r4, #0]
 8005940:	f8c0 9000 	str.w	r9, [r0]
 8005944:	4604      	mov	r4, r0
 8005946:	e7e4      	b.n	8005912 <__pow5mult+0x6a>
 8005948:	4638      	mov	r0, r7
 800594a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800594e:	bf00      	nop
 8005950:	08006f20 	.word	0x08006f20
 8005954:	08006d51 	.word	0x08006d51
 8005958:	08006dd4 	.word	0x08006dd4

0800595c <__lshift>:
 800595c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005960:	460c      	mov	r4, r1
 8005962:	6849      	ldr	r1, [r1, #4]
 8005964:	6923      	ldr	r3, [r4, #16]
 8005966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800596a:	68a3      	ldr	r3, [r4, #8]
 800596c:	4607      	mov	r7, r0
 800596e:	4691      	mov	r9, r2
 8005970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005974:	f108 0601 	add.w	r6, r8, #1
 8005978:	42b3      	cmp	r3, r6
 800597a:	db0b      	blt.n	8005994 <__lshift+0x38>
 800597c:	4638      	mov	r0, r7
 800597e:	f7ff fddb 	bl	8005538 <_Balloc>
 8005982:	4605      	mov	r5, r0
 8005984:	b948      	cbnz	r0, 800599a <__lshift+0x3e>
 8005986:	4602      	mov	r2, r0
 8005988:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <__lshift+0xd8>)
 800598a:	482b      	ldr	r0, [pc, #172]	; (8005a38 <__lshift+0xdc>)
 800598c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005990:	f000 fbb8 	bl	8006104 <__assert_func>
 8005994:	3101      	adds	r1, #1
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	e7ee      	b.n	8005978 <__lshift+0x1c>
 800599a:	2300      	movs	r3, #0
 800599c:	f100 0114 	add.w	r1, r0, #20
 80059a0:	f100 0210 	add.w	r2, r0, #16
 80059a4:	4618      	mov	r0, r3
 80059a6:	4553      	cmp	r3, sl
 80059a8:	db37      	blt.n	8005a1a <__lshift+0xbe>
 80059aa:	6920      	ldr	r0, [r4, #16]
 80059ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059b0:	f104 0314 	add.w	r3, r4, #20
 80059b4:	f019 091f 	ands.w	r9, r9, #31
 80059b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80059c0:	d02f      	beq.n	8005a22 <__lshift+0xc6>
 80059c2:	f1c9 0e20 	rsb	lr, r9, #32
 80059c6:	468a      	mov	sl, r1
 80059c8:	f04f 0c00 	mov.w	ip, #0
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	fa02 f209 	lsl.w	r2, r2, r9
 80059d2:	ea42 020c 	orr.w	r2, r2, ip
 80059d6:	f84a 2b04 	str.w	r2, [sl], #4
 80059da:	f853 2b04 	ldr.w	r2, [r3], #4
 80059de:	4298      	cmp	r0, r3
 80059e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80059e4:	d8f2      	bhi.n	80059cc <__lshift+0x70>
 80059e6:	1b03      	subs	r3, r0, r4
 80059e8:	3b15      	subs	r3, #21
 80059ea:	f023 0303 	bic.w	r3, r3, #3
 80059ee:	3304      	adds	r3, #4
 80059f0:	f104 0215 	add.w	r2, r4, #21
 80059f4:	4290      	cmp	r0, r2
 80059f6:	bf38      	it	cc
 80059f8:	2304      	movcc	r3, #4
 80059fa:	f841 c003 	str.w	ip, [r1, r3]
 80059fe:	f1bc 0f00 	cmp.w	ip, #0
 8005a02:	d001      	beq.n	8005a08 <__lshift+0xac>
 8005a04:	f108 0602 	add.w	r6, r8, #2
 8005a08:	3e01      	subs	r6, #1
 8005a0a:	4638      	mov	r0, r7
 8005a0c:	612e      	str	r6, [r5, #16]
 8005a0e:	4621      	mov	r1, r4
 8005a10:	f7ff fdd2 	bl	80055b8 <_Bfree>
 8005a14:	4628      	mov	r0, r5
 8005a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a1e:	3301      	adds	r3, #1
 8005a20:	e7c1      	b.n	80059a6 <__lshift+0x4a>
 8005a22:	3904      	subs	r1, #4
 8005a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a28:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a2c:	4298      	cmp	r0, r3
 8005a2e:	d8f9      	bhi.n	8005a24 <__lshift+0xc8>
 8005a30:	e7ea      	b.n	8005a08 <__lshift+0xac>
 8005a32:	bf00      	nop
 8005a34:	08006dc3 	.word	0x08006dc3
 8005a38:	08006dd4 	.word	0x08006dd4

08005a3c <__mcmp>:
 8005a3c:	b530      	push	{r4, r5, lr}
 8005a3e:	6902      	ldr	r2, [r0, #16]
 8005a40:	690c      	ldr	r4, [r1, #16]
 8005a42:	1b12      	subs	r2, r2, r4
 8005a44:	d10e      	bne.n	8005a64 <__mcmp+0x28>
 8005a46:	f100 0314 	add.w	r3, r0, #20
 8005a4a:	3114      	adds	r1, #20
 8005a4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005a50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005a54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005a58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005a5c:	42a5      	cmp	r5, r4
 8005a5e:	d003      	beq.n	8005a68 <__mcmp+0x2c>
 8005a60:	d305      	bcc.n	8005a6e <__mcmp+0x32>
 8005a62:	2201      	movs	r2, #1
 8005a64:	4610      	mov	r0, r2
 8005a66:	bd30      	pop	{r4, r5, pc}
 8005a68:	4283      	cmp	r3, r0
 8005a6a:	d3f3      	bcc.n	8005a54 <__mcmp+0x18>
 8005a6c:	e7fa      	b.n	8005a64 <__mcmp+0x28>
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a72:	e7f7      	b.n	8005a64 <__mcmp+0x28>

08005a74 <__mdiff>:
 8005a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a78:	460c      	mov	r4, r1
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	4620      	mov	r0, r4
 8005a80:	4690      	mov	r8, r2
 8005a82:	f7ff ffdb 	bl	8005a3c <__mcmp>
 8005a86:	1e05      	subs	r5, r0, #0
 8005a88:	d110      	bne.n	8005aac <__mdiff+0x38>
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f7ff fd53 	bl	8005538 <_Balloc>
 8005a92:	b930      	cbnz	r0, 8005aa2 <__mdiff+0x2e>
 8005a94:	4b3a      	ldr	r3, [pc, #232]	; (8005b80 <__mdiff+0x10c>)
 8005a96:	4602      	mov	r2, r0
 8005a98:	f240 2132 	movw	r1, #562	; 0x232
 8005a9c:	4839      	ldr	r0, [pc, #228]	; (8005b84 <__mdiff+0x110>)
 8005a9e:	f000 fb31 	bl	8006104 <__assert_func>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005aa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aac:	bfa4      	itt	ge
 8005aae:	4643      	movge	r3, r8
 8005ab0:	46a0      	movge	r8, r4
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005ab8:	bfa6      	itte	ge
 8005aba:	461c      	movge	r4, r3
 8005abc:	2500      	movge	r5, #0
 8005abe:	2501      	movlt	r5, #1
 8005ac0:	f7ff fd3a 	bl	8005538 <_Balloc>
 8005ac4:	b920      	cbnz	r0, 8005ad0 <__mdiff+0x5c>
 8005ac6:	4b2e      	ldr	r3, [pc, #184]	; (8005b80 <__mdiff+0x10c>)
 8005ac8:	4602      	mov	r2, r0
 8005aca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005ace:	e7e5      	b.n	8005a9c <__mdiff+0x28>
 8005ad0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ad4:	6926      	ldr	r6, [r4, #16]
 8005ad6:	60c5      	str	r5, [r0, #12]
 8005ad8:	f104 0914 	add.w	r9, r4, #20
 8005adc:	f108 0514 	add.w	r5, r8, #20
 8005ae0:	f100 0e14 	add.w	lr, r0, #20
 8005ae4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005ae8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005aec:	f108 0210 	add.w	r2, r8, #16
 8005af0:	46f2      	mov	sl, lr
 8005af2:	2100      	movs	r1, #0
 8005af4:	f859 3b04 	ldr.w	r3, [r9], #4
 8005af8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005afc:	fa1f f883 	uxth.w	r8, r3
 8005b00:	fa11 f18b 	uxtah	r1, r1, fp
 8005b04:	0c1b      	lsrs	r3, r3, #16
 8005b06:	eba1 0808 	sub.w	r8, r1, r8
 8005b0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005b12:	fa1f f888 	uxth.w	r8, r8
 8005b16:	1419      	asrs	r1, r3, #16
 8005b18:	454e      	cmp	r6, r9
 8005b1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005b1e:	f84a 3b04 	str.w	r3, [sl], #4
 8005b22:	d8e7      	bhi.n	8005af4 <__mdiff+0x80>
 8005b24:	1b33      	subs	r3, r6, r4
 8005b26:	3b15      	subs	r3, #21
 8005b28:	f023 0303 	bic.w	r3, r3, #3
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	3415      	adds	r4, #21
 8005b30:	42a6      	cmp	r6, r4
 8005b32:	bf38      	it	cc
 8005b34:	2304      	movcc	r3, #4
 8005b36:	441d      	add	r5, r3
 8005b38:	4473      	add	r3, lr
 8005b3a:	469e      	mov	lr, r3
 8005b3c:	462e      	mov	r6, r5
 8005b3e:	4566      	cmp	r6, ip
 8005b40:	d30e      	bcc.n	8005b60 <__mdiff+0xec>
 8005b42:	f10c 0203 	add.w	r2, ip, #3
 8005b46:	1b52      	subs	r2, r2, r5
 8005b48:	f022 0203 	bic.w	r2, r2, #3
 8005b4c:	3d03      	subs	r5, #3
 8005b4e:	45ac      	cmp	ip, r5
 8005b50:	bf38      	it	cc
 8005b52:	2200      	movcc	r2, #0
 8005b54:	441a      	add	r2, r3
 8005b56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005b5a:	b17b      	cbz	r3, 8005b7c <__mdiff+0x108>
 8005b5c:	6107      	str	r7, [r0, #16]
 8005b5e:	e7a3      	b.n	8005aa8 <__mdiff+0x34>
 8005b60:	f856 8b04 	ldr.w	r8, [r6], #4
 8005b64:	fa11 f288 	uxtah	r2, r1, r8
 8005b68:	1414      	asrs	r4, r2, #16
 8005b6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005b6e:	b292      	uxth	r2, r2
 8005b70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005b74:	f84e 2b04 	str.w	r2, [lr], #4
 8005b78:	1421      	asrs	r1, r4, #16
 8005b7a:	e7e0      	b.n	8005b3e <__mdiff+0xca>
 8005b7c:	3f01      	subs	r7, #1
 8005b7e:	e7ea      	b.n	8005b56 <__mdiff+0xe2>
 8005b80:	08006dc3 	.word	0x08006dc3
 8005b84:	08006dd4 	.word	0x08006dd4

08005b88 <__d2b>:
 8005b88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b8c:	4689      	mov	r9, r1
 8005b8e:	2101      	movs	r1, #1
 8005b90:	ec57 6b10 	vmov	r6, r7, d0
 8005b94:	4690      	mov	r8, r2
 8005b96:	f7ff fccf 	bl	8005538 <_Balloc>
 8005b9a:	4604      	mov	r4, r0
 8005b9c:	b930      	cbnz	r0, 8005bac <__d2b+0x24>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <__d2b+0xb0>)
 8005ba2:	4826      	ldr	r0, [pc, #152]	; (8005c3c <__d2b+0xb4>)
 8005ba4:	f240 310a 	movw	r1, #778	; 0x30a
 8005ba8:	f000 faac 	bl	8006104 <__assert_func>
 8005bac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005bb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005bb4:	bb35      	cbnz	r5, 8005c04 <__d2b+0x7c>
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	9301      	str	r3, [sp, #4]
 8005bba:	d028      	beq.n	8005c0e <__d2b+0x86>
 8005bbc:	4668      	mov	r0, sp
 8005bbe:	9600      	str	r6, [sp, #0]
 8005bc0:	f7ff fd82 	bl	80056c8 <__lo0bits>
 8005bc4:	9900      	ldr	r1, [sp, #0]
 8005bc6:	b300      	cbz	r0, 8005c0a <__d2b+0x82>
 8005bc8:	9a01      	ldr	r2, [sp, #4]
 8005bca:	f1c0 0320 	rsb	r3, r0, #32
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	40c2      	lsrs	r2, r0
 8005bd6:	6163      	str	r3, [r4, #20]
 8005bd8:	9201      	str	r2, [sp, #4]
 8005bda:	9b01      	ldr	r3, [sp, #4]
 8005bdc:	61a3      	str	r3, [r4, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bf14      	ite	ne
 8005be2:	2202      	movne	r2, #2
 8005be4:	2201      	moveq	r2, #1
 8005be6:	6122      	str	r2, [r4, #16]
 8005be8:	b1d5      	cbz	r5, 8005c20 <__d2b+0x98>
 8005bea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005bee:	4405      	add	r5, r0
 8005bf0:	f8c9 5000 	str.w	r5, [r9]
 8005bf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005bf8:	f8c8 0000 	str.w	r0, [r8]
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	b003      	add	sp, #12
 8005c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c08:	e7d5      	b.n	8005bb6 <__d2b+0x2e>
 8005c0a:	6161      	str	r1, [r4, #20]
 8005c0c:	e7e5      	b.n	8005bda <__d2b+0x52>
 8005c0e:	a801      	add	r0, sp, #4
 8005c10:	f7ff fd5a 	bl	80056c8 <__lo0bits>
 8005c14:	9b01      	ldr	r3, [sp, #4]
 8005c16:	6163      	str	r3, [r4, #20]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	6122      	str	r2, [r4, #16]
 8005c1c:	3020      	adds	r0, #32
 8005c1e:	e7e3      	b.n	8005be8 <__d2b+0x60>
 8005c20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c28:	f8c9 0000 	str.w	r0, [r9]
 8005c2c:	6918      	ldr	r0, [r3, #16]
 8005c2e:	f7ff fd2b 	bl	8005688 <__hi0bits>
 8005c32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c36:	e7df      	b.n	8005bf8 <__d2b+0x70>
 8005c38:	08006dc3 	.word	0x08006dc3
 8005c3c:	08006dd4 	.word	0x08006dd4

08005c40 <_calloc_r>:
 8005c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c42:	fba1 2402 	umull	r2, r4, r1, r2
 8005c46:	b94c      	cbnz	r4, 8005c5c <_calloc_r+0x1c>
 8005c48:	4611      	mov	r1, r2
 8005c4a:	9201      	str	r2, [sp, #4]
 8005c4c:	f000 f87a 	bl	8005d44 <_malloc_r>
 8005c50:	9a01      	ldr	r2, [sp, #4]
 8005c52:	4605      	mov	r5, r0
 8005c54:	b930      	cbnz	r0, 8005c64 <_calloc_r+0x24>
 8005c56:	4628      	mov	r0, r5
 8005c58:	b003      	add	sp, #12
 8005c5a:	bd30      	pop	{r4, r5, pc}
 8005c5c:	220c      	movs	r2, #12
 8005c5e:	6002      	str	r2, [r0, #0]
 8005c60:	2500      	movs	r5, #0
 8005c62:	e7f8      	b.n	8005c56 <_calloc_r+0x16>
 8005c64:	4621      	mov	r1, r4
 8005c66:	f7fe f941 	bl	8003eec <memset>
 8005c6a:	e7f4      	b.n	8005c56 <_calloc_r+0x16>

08005c6c <_free_r>:
 8005c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c6e:	2900      	cmp	r1, #0
 8005c70:	d044      	beq.n	8005cfc <_free_r+0x90>
 8005c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c76:	9001      	str	r0, [sp, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c7e:	bfb8      	it	lt
 8005c80:	18e4      	addlt	r4, r4, r3
 8005c82:	f000 fa9b 	bl	80061bc <__malloc_lock>
 8005c86:	4a1e      	ldr	r2, [pc, #120]	; (8005d00 <_free_r+0x94>)
 8005c88:	9801      	ldr	r0, [sp, #4]
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	b933      	cbnz	r3, 8005c9c <_free_r+0x30>
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	6014      	str	r4, [r2, #0]
 8005c92:	b003      	add	sp, #12
 8005c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c98:	f000 ba96 	b.w	80061c8 <__malloc_unlock>
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	d908      	bls.n	8005cb2 <_free_r+0x46>
 8005ca0:	6825      	ldr	r5, [r4, #0]
 8005ca2:	1961      	adds	r1, r4, r5
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	bf01      	itttt	eq
 8005ca8:	6819      	ldreq	r1, [r3, #0]
 8005caa:	685b      	ldreq	r3, [r3, #4]
 8005cac:	1949      	addeq	r1, r1, r5
 8005cae:	6021      	streq	r1, [r4, #0]
 8005cb0:	e7ed      	b.n	8005c8e <_free_r+0x22>
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	b10b      	cbz	r3, 8005cbc <_free_r+0x50>
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d9fa      	bls.n	8005cb2 <_free_r+0x46>
 8005cbc:	6811      	ldr	r1, [r2, #0]
 8005cbe:	1855      	adds	r5, r2, r1
 8005cc0:	42a5      	cmp	r5, r4
 8005cc2:	d10b      	bne.n	8005cdc <_free_r+0x70>
 8005cc4:	6824      	ldr	r4, [r4, #0]
 8005cc6:	4421      	add	r1, r4
 8005cc8:	1854      	adds	r4, r2, r1
 8005cca:	42a3      	cmp	r3, r4
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	d1e0      	bne.n	8005c92 <_free_r+0x26>
 8005cd0:	681c      	ldr	r4, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	6053      	str	r3, [r2, #4]
 8005cd6:	4421      	add	r1, r4
 8005cd8:	6011      	str	r1, [r2, #0]
 8005cda:	e7da      	b.n	8005c92 <_free_r+0x26>
 8005cdc:	d902      	bls.n	8005ce4 <_free_r+0x78>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	6003      	str	r3, [r0, #0]
 8005ce2:	e7d6      	b.n	8005c92 <_free_r+0x26>
 8005ce4:	6825      	ldr	r5, [r4, #0]
 8005ce6:	1961      	adds	r1, r4, r5
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf04      	itt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	6063      	str	r3, [r4, #4]
 8005cf2:	bf04      	itt	eq
 8005cf4:	1949      	addeq	r1, r1, r5
 8005cf6:	6021      	streq	r1, [r4, #0]
 8005cf8:	6054      	str	r4, [r2, #4]
 8005cfa:	e7ca      	b.n	8005c92 <_free_r+0x26>
 8005cfc:	b003      	add	sp, #12
 8005cfe:	bd30      	pop	{r4, r5, pc}
 8005d00:	20000294 	.word	0x20000294

08005d04 <sbrk_aligned>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	4e0e      	ldr	r6, [pc, #56]	; (8005d40 <sbrk_aligned+0x3c>)
 8005d08:	460c      	mov	r4, r1
 8005d0a:	6831      	ldr	r1, [r6, #0]
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	b911      	cbnz	r1, 8005d16 <sbrk_aligned+0x12>
 8005d10:	f000 f9e8 	bl	80060e4 <_sbrk_r>
 8005d14:	6030      	str	r0, [r6, #0]
 8005d16:	4621      	mov	r1, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 f9e3 	bl	80060e4 <_sbrk_r>
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	d00a      	beq.n	8005d38 <sbrk_aligned+0x34>
 8005d22:	1cc4      	adds	r4, r0, #3
 8005d24:	f024 0403 	bic.w	r4, r4, #3
 8005d28:	42a0      	cmp	r0, r4
 8005d2a:	d007      	beq.n	8005d3c <sbrk_aligned+0x38>
 8005d2c:	1a21      	subs	r1, r4, r0
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f9d8 	bl	80060e4 <_sbrk_r>
 8005d34:	3001      	adds	r0, #1
 8005d36:	d101      	bne.n	8005d3c <sbrk_aligned+0x38>
 8005d38:	f04f 34ff 	mov.w	r4, #4294967295
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	20000298 	.word	0x20000298

08005d44 <_malloc_r>:
 8005d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d48:	1ccd      	adds	r5, r1, #3
 8005d4a:	f025 0503 	bic.w	r5, r5, #3
 8005d4e:	3508      	adds	r5, #8
 8005d50:	2d0c      	cmp	r5, #12
 8005d52:	bf38      	it	cc
 8005d54:	250c      	movcc	r5, #12
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	4607      	mov	r7, r0
 8005d5a:	db01      	blt.n	8005d60 <_malloc_r+0x1c>
 8005d5c:	42a9      	cmp	r1, r5
 8005d5e:	d905      	bls.n	8005d6c <_malloc_r+0x28>
 8005d60:	230c      	movs	r3, #12
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	2600      	movs	r6, #0
 8005d66:	4630      	mov	r0, r6
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6c:	4e2e      	ldr	r6, [pc, #184]	; (8005e28 <_malloc_r+0xe4>)
 8005d6e:	f000 fa25 	bl	80061bc <__malloc_lock>
 8005d72:	6833      	ldr	r3, [r6, #0]
 8005d74:	461c      	mov	r4, r3
 8005d76:	bb34      	cbnz	r4, 8005dc6 <_malloc_r+0x82>
 8005d78:	4629      	mov	r1, r5
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	f7ff ffc2 	bl	8005d04 <sbrk_aligned>
 8005d80:	1c43      	adds	r3, r0, #1
 8005d82:	4604      	mov	r4, r0
 8005d84:	d14d      	bne.n	8005e22 <_malloc_r+0xde>
 8005d86:	6834      	ldr	r4, [r6, #0]
 8005d88:	4626      	mov	r6, r4
 8005d8a:	2e00      	cmp	r6, #0
 8005d8c:	d140      	bne.n	8005e10 <_malloc_r+0xcc>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	4631      	mov	r1, r6
 8005d92:	4638      	mov	r0, r7
 8005d94:	eb04 0803 	add.w	r8, r4, r3
 8005d98:	f000 f9a4 	bl	80060e4 <_sbrk_r>
 8005d9c:	4580      	cmp	r8, r0
 8005d9e:	d13a      	bne.n	8005e16 <_malloc_r+0xd2>
 8005da0:	6821      	ldr	r1, [r4, #0]
 8005da2:	3503      	adds	r5, #3
 8005da4:	1a6d      	subs	r5, r5, r1
 8005da6:	f025 0503 	bic.w	r5, r5, #3
 8005daa:	3508      	adds	r5, #8
 8005dac:	2d0c      	cmp	r5, #12
 8005dae:	bf38      	it	cc
 8005db0:	250c      	movcc	r5, #12
 8005db2:	4629      	mov	r1, r5
 8005db4:	4638      	mov	r0, r7
 8005db6:	f7ff ffa5 	bl	8005d04 <sbrk_aligned>
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d02b      	beq.n	8005e16 <_malloc_r+0xd2>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	442b      	add	r3, r5
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	e00e      	b.n	8005de4 <_malloc_r+0xa0>
 8005dc6:	6822      	ldr	r2, [r4, #0]
 8005dc8:	1b52      	subs	r2, r2, r5
 8005dca:	d41e      	bmi.n	8005e0a <_malloc_r+0xc6>
 8005dcc:	2a0b      	cmp	r2, #11
 8005dce:	d916      	bls.n	8005dfe <_malloc_r+0xba>
 8005dd0:	1961      	adds	r1, r4, r5
 8005dd2:	42a3      	cmp	r3, r4
 8005dd4:	6025      	str	r5, [r4, #0]
 8005dd6:	bf18      	it	ne
 8005dd8:	6059      	strne	r1, [r3, #4]
 8005dda:	6863      	ldr	r3, [r4, #4]
 8005ddc:	bf08      	it	eq
 8005dde:	6031      	streq	r1, [r6, #0]
 8005de0:	5162      	str	r2, [r4, r5]
 8005de2:	604b      	str	r3, [r1, #4]
 8005de4:	4638      	mov	r0, r7
 8005de6:	f104 060b 	add.w	r6, r4, #11
 8005dea:	f000 f9ed 	bl	80061c8 <__malloc_unlock>
 8005dee:	f026 0607 	bic.w	r6, r6, #7
 8005df2:	1d23      	adds	r3, r4, #4
 8005df4:	1af2      	subs	r2, r6, r3
 8005df6:	d0b6      	beq.n	8005d66 <_malloc_r+0x22>
 8005df8:	1b9b      	subs	r3, r3, r6
 8005dfa:	50a3      	str	r3, [r4, r2]
 8005dfc:	e7b3      	b.n	8005d66 <_malloc_r+0x22>
 8005dfe:	6862      	ldr	r2, [r4, #4]
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	bf0c      	ite	eq
 8005e04:	6032      	streq	r2, [r6, #0]
 8005e06:	605a      	strne	r2, [r3, #4]
 8005e08:	e7ec      	b.n	8005de4 <_malloc_r+0xa0>
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	6864      	ldr	r4, [r4, #4]
 8005e0e:	e7b2      	b.n	8005d76 <_malloc_r+0x32>
 8005e10:	4634      	mov	r4, r6
 8005e12:	6876      	ldr	r6, [r6, #4]
 8005e14:	e7b9      	b.n	8005d8a <_malloc_r+0x46>
 8005e16:	230c      	movs	r3, #12
 8005e18:	603b      	str	r3, [r7, #0]
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	f000 f9d4 	bl	80061c8 <__malloc_unlock>
 8005e20:	e7a1      	b.n	8005d66 <_malloc_r+0x22>
 8005e22:	6025      	str	r5, [r4, #0]
 8005e24:	e7de      	b.n	8005de4 <_malloc_r+0xa0>
 8005e26:	bf00      	nop
 8005e28:	20000294 	.word	0x20000294

08005e2c <__ssputs_r>:
 8005e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e30:	688e      	ldr	r6, [r1, #8]
 8005e32:	429e      	cmp	r6, r3
 8005e34:	4682      	mov	sl, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	4690      	mov	r8, r2
 8005e3a:	461f      	mov	r7, r3
 8005e3c:	d838      	bhi.n	8005eb0 <__ssputs_r+0x84>
 8005e3e:	898a      	ldrh	r2, [r1, #12]
 8005e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e44:	d032      	beq.n	8005eac <__ssputs_r+0x80>
 8005e46:	6825      	ldr	r5, [r4, #0]
 8005e48:	6909      	ldr	r1, [r1, #16]
 8005e4a:	eba5 0901 	sub.w	r9, r5, r1
 8005e4e:	6965      	ldr	r5, [r4, #20]
 8005e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e58:	3301      	adds	r3, #1
 8005e5a:	444b      	add	r3, r9
 8005e5c:	106d      	asrs	r5, r5, #1
 8005e5e:	429d      	cmp	r5, r3
 8005e60:	bf38      	it	cc
 8005e62:	461d      	movcc	r5, r3
 8005e64:	0553      	lsls	r3, r2, #21
 8005e66:	d531      	bpl.n	8005ecc <__ssputs_r+0xa0>
 8005e68:	4629      	mov	r1, r5
 8005e6a:	f7ff ff6b 	bl	8005d44 <_malloc_r>
 8005e6e:	4606      	mov	r6, r0
 8005e70:	b950      	cbnz	r0, 8005e88 <__ssputs_r+0x5c>
 8005e72:	230c      	movs	r3, #12
 8005e74:	f8ca 3000 	str.w	r3, [sl]
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e7e:	81a3      	strh	r3, [r4, #12]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e88:	6921      	ldr	r1, [r4, #16]
 8005e8a:	464a      	mov	r2, r9
 8005e8c:	f7ff fb46 	bl	800551c <memcpy>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9a:	81a3      	strh	r3, [r4, #12]
 8005e9c:	6126      	str	r6, [r4, #16]
 8005e9e:	6165      	str	r5, [r4, #20]
 8005ea0:	444e      	add	r6, r9
 8005ea2:	eba5 0509 	sub.w	r5, r5, r9
 8005ea6:	6026      	str	r6, [r4, #0]
 8005ea8:	60a5      	str	r5, [r4, #8]
 8005eaa:	463e      	mov	r6, r7
 8005eac:	42be      	cmp	r6, r7
 8005eae:	d900      	bls.n	8005eb2 <__ssputs_r+0x86>
 8005eb0:	463e      	mov	r6, r7
 8005eb2:	6820      	ldr	r0, [r4, #0]
 8005eb4:	4632      	mov	r2, r6
 8005eb6:	4641      	mov	r1, r8
 8005eb8:	f000 f966 	bl	8006188 <memmove>
 8005ebc:	68a3      	ldr	r3, [r4, #8]
 8005ebe:	1b9b      	subs	r3, r3, r6
 8005ec0:	60a3      	str	r3, [r4, #8]
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	4433      	add	r3, r6
 8005ec6:	6023      	str	r3, [r4, #0]
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e7db      	b.n	8005e84 <__ssputs_r+0x58>
 8005ecc:	462a      	mov	r2, r5
 8005ece:	f000 f981 	bl	80061d4 <_realloc_r>
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d1e1      	bne.n	8005e9c <__ssputs_r+0x70>
 8005ed8:	6921      	ldr	r1, [r4, #16]
 8005eda:	4650      	mov	r0, sl
 8005edc:	f7ff fec6 	bl	8005c6c <_free_r>
 8005ee0:	e7c7      	b.n	8005e72 <__ssputs_r+0x46>
	...

08005ee4 <_svfiprintf_r>:
 8005ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee8:	4698      	mov	r8, r3
 8005eea:	898b      	ldrh	r3, [r1, #12]
 8005eec:	061b      	lsls	r3, r3, #24
 8005eee:	b09d      	sub	sp, #116	; 0x74
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	4614      	mov	r4, r2
 8005ef6:	d50e      	bpl.n	8005f16 <_svfiprintf_r+0x32>
 8005ef8:	690b      	ldr	r3, [r1, #16]
 8005efa:	b963      	cbnz	r3, 8005f16 <_svfiprintf_r+0x32>
 8005efc:	2140      	movs	r1, #64	; 0x40
 8005efe:	f7ff ff21 	bl	8005d44 <_malloc_r>
 8005f02:	6028      	str	r0, [r5, #0]
 8005f04:	6128      	str	r0, [r5, #16]
 8005f06:	b920      	cbnz	r0, 8005f12 <_svfiprintf_r+0x2e>
 8005f08:	230c      	movs	r3, #12
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	e0d1      	b.n	80060b6 <_svfiprintf_r+0x1d2>
 8005f12:	2340      	movs	r3, #64	; 0x40
 8005f14:	616b      	str	r3, [r5, #20]
 8005f16:	2300      	movs	r3, #0
 8005f18:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1a:	2320      	movs	r3, #32
 8005f1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f24:	2330      	movs	r3, #48	; 0x30
 8005f26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060d0 <_svfiprintf_r+0x1ec>
 8005f2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f2e:	f04f 0901 	mov.w	r9, #1
 8005f32:	4623      	mov	r3, r4
 8005f34:	469a      	mov	sl, r3
 8005f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f3a:	b10a      	cbz	r2, 8005f40 <_svfiprintf_r+0x5c>
 8005f3c:	2a25      	cmp	r2, #37	; 0x25
 8005f3e:	d1f9      	bne.n	8005f34 <_svfiprintf_r+0x50>
 8005f40:	ebba 0b04 	subs.w	fp, sl, r4
 8005f44:	d00b      	beq.n	8005f5e <_svfiprintf_r+0x7a>
 8005f46:	465b      	mov	r3, fp
 8005f48:	4622      	mov	r2, r4
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	f7ff ff6d 	bl	8005e2c <__ssputs_r>
 8005f52:	3001      	adds	r0, #1
 8005f54:	f000 80aa 	beq.w	80060ac <_svfiprintf_r+0x1c8>
 8005f58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f5a:	445a      	add	r2, fp
 8005f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80a2 	beq.w	80060ac <_svfiprintf_r+0x1c8>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f72:	f10a 0a01 	add.w	sl, sl, #1
 8005f76:	9304      	str	r3, [sp, #16]
 8005f78:	9307      	str	r3, [sp, #28]
 8005f7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f7e:	931a      	str	r3, [sp, #104]	; 0x68
 8005f80:	4654      	mov	r4, sl
 8005f82:	2205      	movs	r2, #5
 8005f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f88:	4851      	ldr	r0, [pc, #324]	; (80060d0 <_svfiprintf_r+0x1ec>)
 8005f8a:	f7fa f929 	bl	80001e0 <memchr>
 8005f8e:	9a04      	ldr	r2, [sp, #16]
 8005f90:	b9d8      	cbnz	r0, 8005fca <_svfiprintf_r+0xe6>
 8005f92:	06d0      	lsls	r0, r2, #27
 8005f94:	bf44      	itt	mi
 8005f96:	2320      	movmi	r3, #32
 8005f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f9c:	0711      	lsls	r1, r2, #28
 8005f9e:	bf44      	itt	mi
 8005fa0:	232b      	movmi	r3, #43	; 0x2b
 8005fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8005faa:	2b2a      	cmp	r3, #42	; 0x2a
 8005fac:	d015      	beq.n	8005fda <_svfiprintf_r+0xf6>
 8005fae:	9a07      	ldr	r2, [sp, #28]
 8005fb0:	4654      	mov	r4, sl
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	f04f 0c0a 	mov.w	ip, #10
 8005fb8:	4621      	mov	r1, r4
 8005fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fbe:	3b30      	subs	r3, #48	; 0x30
 8005fc0:	2b09      	cmp	r3, #9
 8005fc2:	d94e      	bls.n	8006062 <_svfiprintf_r+0x17e>
 8005fc4:	b1b0      	cbz	r0, 8005ff4 <_svfiprintf_r+0x110>
 8005fc6:	9207      	str	r2, [sp, #28]
 8005fc8:	e014      	b.n	8005ff4 <_svfiprintf_r+0x110>
 8005fca:	eba0 0308 	sub.w	r3, r0, r8
 8005fce:	fa09 f303 	lsl.w	r3, r9, r3
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	9304      	str	r3, [sp, #16]
 8005fd6:	46a2      	mov	sl, r4
 8005fd8:	e7d2      	b.n	8005f80 <_svfiprintf_r+0x9c>
 8005fda:	9b03      	ldr	r3, [sp, #12]
 8005fdc:	1d19      	adds	r1, r3, #4
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	9103      	str	r1, [sp, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	bfbb      	ittet	lt
 8005fe6:	425b      	neglt	r3, r3
 8005fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8005fec:	9307      	strge	r3, [sp, #28]
 8005fee:	9307      	strlt	r3, [sp, #28]
 8005ff0:	bfb8      	it	lt
 8005ff2:	9204      	strlt	r2, [sp, #16]
 8005ff4:	7823      	ldrb	r3, [r4, #0]
 8005ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff8:	d10c      	bne.n	8006014 <_svfiprintf_r+0x130>
 8005ffa:	7863      	ldrb	r3, [r4, #1]
 8005ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ffe:	d135      	bne.n	800606c <_svfiprintf_r+0x188>
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	9203      	str	r2, [sp, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	bfb8      	it	lt
 800600c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006010:	3402      	adds	r4, #2
 8006012:	9305      	str	r3, [sp, #20]
 8006014:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060e0 <_svfiprintf_r+0x1fc>
 8006018:	7821      	ldrb	r1, [r4, #0]
 800601a:	2203      	movs	r2, #3
 800601c:	4650      	mov	r0, sl
 800601e:	f7fa f8df 	bl	80001e0 <memchr>
 8006022:	b140      	cbz	r0, 8006036 <_svfiprintf_r+0x152>
 8006024:	2340      	movs	r3, #64	; 0x40
 8006026:	eba0 000a 	sub.w	r0, r0, sl
 800602a:	fa03 f000 	lsl.w	r0, r3, r0
 800602e:	9b04      	ldr	r3, [sp, #16]
 8006030:	4303      	orrs	r3, r0
 8006032:	3401      	adds	r4, #1
 8006034:	9304      	str	r3, [sp, #16]
 8006036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800603a:	4826      	ldr	r0, [pc, #152]	; (80060d4 <_svfiprintf_r+0x1f0>)
 800603c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006040:	2206      	movs	r2, #6
 8006042:	f7fa f8cd 	bl	80001e0 <memchr>
 8006046:	2800      	cmp	r0, #0
 8006048:	d038      	beq.n	80060bc <_svfiprintf_r+0x1d8>
 800604a:	4b23      	ldr	r3, [pc, #140]	; (80060d8 <_svfiprintf_r+0x1f4>)
 800604c:	bb1b      	cbnz	r3, 8006096 <_svfiprintf_r+0x1b2>
 800604e:	9b03      	ldr	r3, [sp, #12]
 8006050:	3307      	adds	r3, #7
 8006052:	f023 0307 	bic.w	r3, r3, #7
 8006056:	3308      	adds	r3, #8
 8006058:	9303      	str	r3, [sp, #12]
 800605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605c:	4433      	add	r3, r6
 800605e:	9309      	str	r3, [sp, #36]	; 0x24
 8006060:	e767      	b.n	8005f32 <_svfiprintf_r+0x4e>
 8006062:	fb0c 3202 	mla	r2, ip, r2, r3
 8006066:	460c      	mov	r4, r1
 8006068:	2001      	movs	r0, #1
 800606a:	e7a5      	b.n	8005fb8 <_svfiprintf_r+0xd4>
 800606c:	2300      	movs	r3, #0
 800606e:	3401      	adds	r4, #1
 8006070:	9305      	str	r3, [sp, #20]
 8006072:	4619      	mov	r1, r3
 8006074:	f04f 0c0a 	mov.w	ip, #10
 8006078:	4620      	mov	r0, r4
 800607a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800607e:	3a30      	subs	r2, #48	; 0x30
 8006080:	2a09      	cmp	r2, #9
 8006082:	d903      	bls.n	800608c <_svfiprintf_r+0x1a8>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0c5      	beq.n	8006014 <_svfiprintf_r+0x130>
 8006088:	9105      	str	r1, [sp, #20]
 800608a:	e7c3      	b.n	8006014 <_svfiprintf_r+0x130>
 800608c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006090:	4604      	mov	r4, r0
 8006092:	2301      	movs	r3, #1
 8006094:	e7f0      	b.n	8006078 <_svfiprintf_r+0x194>
 8006096:	ab03      	add	r3, sp, #12
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	462a      	mov	r2, r5
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <_svfiprintf_r+0x1f8>)
 800609e:	a904      	add	r1, sp, #16
 80060a0:	4638      	mov	r0, r7
 80060a2:	f7fd ffcb 	bl	800403c <_printf_float>
 80060a6:	1c42      	adds	r2, r0, #1
 80060a8:	4606      	mov	r6, r0
 80060aa:	d1d6      	bne.n	800605a <_svfiprintf_r+0x176>
 80060ac:	89ab      	ldrh	r3, [r5, #12]
 80060ae:	065b      	lsls	r3, r3, #25
 80060b0:	f53f af2c 	bmi.w	8005f0c <_svfiprintf_r+0x28>
 80060b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060b6:	b01d      	add	sp, #116	; 0x74
 80060b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060bc:	ab03      	add	r3, sp, #12
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	462a      	mov	r2, r5
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <_svfiprintf_r+0x1f8>)
 80060c4:	a904      	add	r1, sp, #16
 80060c6:	4638      	mov	r0, r7
 80060c8:	f7fe fa5c 	bl	8004584 <_printf_i>
 80060cc:	e7eb      	b.n	80060a6 <_svfiprintf_r+0x1c2>
 80060ce:	bf00      	nop
 80060d0:	08006f2c 	.word	0x08006f2c
 80060d4:	08006f36 	.word	0x08006f36
 80060d8:	0800403d 	.word	0x0800403d
 80060dc:	08005e2d 	.word	0x08005e2d
 80060e0:	08006f32 	.word	0x08006f32

080060e4 <_sbrk_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	4d06      	ldr	r5, [pc, #24]	; (8006100 <_sbrk_r+0x1c>)
 80060e8:	2300      	movs	r3, #0
 80060ea:	4604      	mov	r4, r0
 80060ec:	4608      	mov	r0, r1
 80060ee:	602b      	str	r3, [r5, #0]
 80060f0:	f7fb feb8 	bl	8001e64 <_sbrk>
 80060f4:	1c43      	adds	r3, r0, #1
 80060f6:	d102      	bne.n	80060fe <_sbrk_r+0x1a>
 80060f8:	682b      	ldr	r3, [r5, #0]
 80060fa:	b103      	cbz	r3, 80060fe <_sbrk_r+0x1a>
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	bd38      	pop	{r3, r4, r5, pc}
 8006100:	2000029c 	.word	0x2000029c

08006104 <__assert_func>:
 8006104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006106:	4614      	mov	r4, r2
 8006108:	461a      	mov	r2, r3
 800610a:	4b09      	ldr	r3, [pc, #36]	; (8006130 <__assert_func+0x2c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4605      	mov	r5, r0
 8006110:	68d8      	ldr	r0, [r3, #12]
 8006112:	b14c      	cbz	r4, 8006128 <__assert_func+0x24>
 8006114:	4b07      	ldr	r3, [pc, #28]	; (8006134 <__assert_func+0x30>)
 8006116:	9100      	str	r1, [sp, #0]
 8006118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800611c:	4906      	ldr	r1, [pc, #24]	; (8006138 <__assert_func+0x34>)
 800611e:	462b      	mov	r3, r5
 8006120:	f000 f80e 	bl	8006140 <fiprintf>
 8006124:	f000 faac 	bl	8006680 <abort>
 8006128:	4b04      	ldr	r3, [pc, #16]	; (800613c <__assert_func+0x38>)
 800612a:	461c      	mov	r4, r3
 800612c:	e7f3      	b.n	8006116 <__assert_func+0x12>
 800612e:	bf00      	nop
 8006130:	20000010 	.word	0x20000010
 8006134:	08006f3d 	.word	0x08006f3d
 8006138:	08006f4a 	.word	0x08006f4a
 800613c:	08006f78 	.word	0x08006f78

08006140 <fiprintf>:
 8006140:	b40e      	push	{r1, r2, r3}
 8006142:	b503      	push	{r0, r1, lr}
 8006144:	4601      	mov	r1, r0
 8006146:	ab03      	add	r3, sp, #12
 8006148:	4805      	ldr	r0, [pc, #20]	; (8006160 <fiprintf+0x20>)
 800614a:	f853 2b04 	ldr.w	r2, [r3], #4
 800614e:	6800      	ldr	r0, [r0, #0]
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	f000 f897 	bl	8006284 <_vfiprintf_r>
 8006156:	b002      	add	sp, #8
 8006158:	f85d eb04 	ldr.w	lr, [sp], #4
 800615c:	b003      	add	sp, #12
 800615e:	4770      	bx	lr
 8006160:	20000010 	.word	0x20000010

08006164 <__ascii_mbtowc>:
 8006164:	b082      	sub	sp, #8
 8006166:	b901      	cbnz	r1, 800616a <__ascii_mbtowc+0x6>
 8006168:	a901      	add	r1, sp, #4
 800616a:	b142      	cbz	r2, 800617e <__ascii_mbtowc+0x1a>
 800616c:	b14b      	cbz	r3, 8006182 <__ascii_mbtowc+0x1e>
 800616e:	7813      	ldrb	r3, [r2, #0]
 8006170:	600b      	str	r3, [r1, #0]
 8006172:	7812      	ldrb	r2, [r2, #0]
 8006174:	1e10      	subs	r0, r2, #0
 8006176:	bf18      	it	ne
 8006178:	2001      	movne	r0, #1
 800617a:	b002      	add	sp, #8
 800617c:	4770      	bx	lr
 800617e:	4610      	mov	r0, r2
 8006180:	e7fb      	b.n	800617a <__ascii_mbtowc+0x16>
 8006182:	f06f 0001 	mvn.w	r0, #1
 8006186:	e7f8      	b.n	800617a <__ascii_mbtowc+0x16>

08006188 <memmove>:
 8006188:	4288      	cmp	r0, r1
 800618a:	b510      	push	{r4, lr}
 800618c:	eb01 0402 	add.w	r4, r1, r2
 8006190:	d902      	bls.n	8006198 <memmove+0x10>
 8006192:	4284      	cmp	r4, r0
 8006194:	4623      	mov	r3, r4
 8006196:	d807      	bhi.n	80061a8 <memmove+0x20>
 8006198:	1e43      	subs	r3, r0, #1
 800619a:	42a1      	cmp	r1, r4
 800619c:	d008      	beq.n	80061b0 <memmove+0x28>
 800619e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061a6:	e7f8      	b.n	800619a <memmove+0x12>
 80061a8:	4402      	add	r2, r0
 80061aa:	4601      	mov	r1, r0
 80061ac:	428a      	cmp	r2, r1
 80061ae:	d100      	bne.n	80061b2 <memmove+0x2a>
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ba:	e7f7      	b.n	80061ac <memmove+0x24>

080061bc <__malloc_lock>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__malloc_lock+0x8>)
 80061be:	f000 bc1f 	b.w	8006a00 <__retarget_lock_acquire_recursive>
 80061c2:	bf00      	nop
 80061c4:	200002a0 	.word	0x200002a0

080061c8 <__malloc_unlock>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__malloc_unlock+0x8>)
 80061ca:	f000 bc1a 	b.w	8006a02 <__retarget_lock_release_recursive>
 80061ce:	bf00      	nop
 80061d0:	200002a0 	.word	0x200002a0

080061d4 <_realloc_r>:
 80061d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d8:	4680      	mov	r8, r0
 80061da:	4614      	mov	r4, r2
 80061dc:	460e      	mov	r6, r1
 80061de:	b921      	cbnz	r1, 80061ea <_realloc_r+0x16>
 80061e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e4:	4611      	mov	r1, r2
 80061e6:	f7ff bdad 	b.w	8005d44 <_malloc_r>
 80061ea:	b92a      	cbnz	r2, 80061f8 <_realloc_r+0x24>
 80061ec:	f7ff fd3e 	bl	8005c6c <_free_r>
 80061f0:	4625      	mov	r5, r4
 80061f2:	4628      	mov	r0, r5
 80061f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f8:	f000 fc6a 	bl	8006ad0 <_malloc_usable_size_r>
 80061fc:	4284      	cmp	r4, r0
 80061fe:	4607      	mov	r7, r0
 8006200:	d802      	bhi.n	8006208 <_realloc_r+0x34>
 8006202:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006206:	d812      	bhi.n	800622e <_realloc_r+0x5a>
 8006208:	4621      	mov	r1, r4
 800620a:	4640      	mov	r0, r8
 800620c:	f7ff fd9a 	bl	8005d44 <_malloc_r>
 8006210:	4605      	mov	r5, r0
 8006212:	2800      	cmp	r0, #0
 8006214:	d0ed      	beq.n	80061f2 <_realloc_r+0x1e>
 8006216:	42bc      	cmp	r4, r7
 8006218:	4622      	mov	r2, r4
 800621a:	4631      	mov	r1, r6
 800621c:	bf28      	it	cs
 800621e:	463a      	movcs	r2, r7
 8006220:	f7ff f97c 	bl	800551c <memcpy>
 8006224:	4631      	mov	r1, r6
 8006226:	4640      	mov	r0, r8
 8006228:	f7ff fd20 	bl	8005c6c <_free_r>
 800622c:	e7e1      	b.n	80061f2 <_realloc_r+0x1e>
 800622e:	4635      	mov	r5, r6
 8006230:	e7df      	b.n	80061f2 <_realloc_r+0x1e>

08006232 <__sfputc_r>:
 8006232:	6893      	ldr	r3, [r2, #8]
 8006234:	3b01      	subs	r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	b410      	push	{r4}
 800623a:	6093      	str	r3, [r2, #8]
 800623c:	da08      	bge.n	8006250 <__sfputc_r+0x1e>
 800623e:	6994      	ldr	r4, [r2, #24]
 8006240:	42a3      	cmp	r3, r4
 8006242:	db01      	blt.n	8006248 <__sfputc_r+0x16>
 8006244:	290a      	cmp	r1, #10
 8006246:	d103      	bne.n	8006250 <__sfputc_r+0x1e>
 8006248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800624c:	f000 b94a 	b.w	80064e4 <__swbuf_r>
 8006250:	6813      	ldr	r3, [r2, #0]
 8006252:	1c58      	adds	r0, r3, #1
 8006254:	6010      	str	r0, [r2, #0]
 8006256:	7019      	strb	r1, [r3, #0]
 8006258:	4608      	mov	r0, r1
 800625a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800625e:	4770      	bx	lr

08006260 <__sfputs_r>:
 8006260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006262:	4606      	mov	r6, r0
 8006264:	460f      	mov	r7, r1
 8006266:	4614      	mov	r4, r2
 8006268:	18d5      	adds	r5, r2, r3
 800626a:	42ac      	cmp	r4, r5
 800626c:	d101      	bne.n	8006272 <__sfputs_r+0x12>
 800626e:	2000      	movs	r0, #0
 8006270:	e007      	b.n	8006282 <__sfputs_r+0x22>
 8006272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006276:	463a      	mov	r2, r7
 8006278:	4630      	mov	r0, r6
 800627a:	f7ff ffda 	bl	8006232 <__sfputc_r>
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	d1f3      	bne.n	800626a <__sfputs_r+0xa>
 8006282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006284 <_vfiprintf_r>:
 8006284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	460d      	mov	r5, r1
 800628a:	b09d      	sub	sp, #116	; 0x74
 800628c:	4614      	mov	r4, r2
 800628e:	4698      	mov	r8, r3
 8006290:	4606      	mov	r6, r0
 8006292:	b118      	cbz	r0, 800629c <_vfiprintf_r+0x18>
 8006294:	6983      	ldr	r3, [r0, #24]
 8006296:	b90b      	cbnz	r3, 800629c <_vfiprintf_r+0x18>
 8006298:	f000 fb14 	bl	80068c4 <__sinit>
 800629c:	4b89      	ldr	r3, [pc, #548]	; (80064c4 <_vfiprintf_r+0x240>)
 800629e:	429d      	cmp	r5, r3
 80062a0:	d11b      	bne.n	80062da <_vfiprintf_r+0x56>
 80062a2:	6875      	ldr	r5, [r6, #4]
 80062a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062a6:	07d9      	lsls	r1, r3, #31
 80062a8:	d405      	bmi.n	80062b6 <_vfiprintf_r+0x32>
 80062aa:	89ab      	ldrh	r3, [r5, #12]
 80062ac:	059a      	lsls	r2, r3, #22
 80062ae:	d402      	bmi.n	80062b6 <_vfiprintf_r+0x32>
 80062b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062b2:	f000 fba5 	bl	8006a00 <__retarget_lock_acquire_recursive>
 80062b6:	89ab      	ldrh	r3, [r5, #12]
 80062b8:	071b      	lsls	r3, r3, #28
 80062ba:	d501      	bpl.n	80062c0 <_vfiprintf_r+0x3c>
 80062bc:	692b      	ldr	r3, [r5, #16]
 80062be:	b9eb      	cbnz	r3, 80062fc <_vfiprintf_r+0x78>
 80062c0:	4629      	mov	r1, r5
 80062c2:	4630      	mov	r0, r6
 80062c4:	f000 f96e 	bl	80065a4 <__swsetup_r>
 80062c8:	b1c0      	cbz	r0, 80062fc <_vfiprintf_r+0x78>
 80062ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062cc:	07dc      	lsls	r4, r3, #31
 80062ce:	d50e      	bpl.n	80062ee <_vfiprintf_r+0x6a>
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	b01d      	add	sp, #116	; 0x74
 80062d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062da:	4b7b      	ldr	r3, [pc, #492]	; (80064c8 <_vfiprintf_r+0x244>)
 80062dc:	429d      	cmp	r5, r3
 80062de:	d101      	bne.n	80062e4 <_vfiprintf_r+0x60>
 80062e0:	68b5      	ldr	r5, [r6, #8]
 80062e2:	e7df      	b.n	80062a4 <_vfiprintf_r+0x20>
 80062e4:	4b79      	ldr	r3, [pc, #484]	; (80064cc <_vfiprintf_r+0x248>)
 80062e6:	429d      	cmp	r5, r3
 80062e8:	bf08      	it	eq
 80062ea:	68f5      	ldreq	r5, [r6, #12]
 80062ec:	e7da      	b.n	80062a4 <_vfiprintf_r+0x20>
 80062ee:	89ab      	ldrh	r3, [r5, #12]
 80062f0:	0598      	lsls	r0, r3, #22
 80062f2:	d4ed      	bmi.n	80062d0 <_vfiprintf_r+0x4c>
 80062f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062f6:	f000 fb84 	bl	8006a02 <__retarget_lock_release_recursive>
 80062fa:	e7e9      	b.n	80062d0 <_vfiprintf_r+0x4c>
 80062fc:	2300      	movs	r3, #0
 80062fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006300:	2320      	movs	r3, #32
 8006302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006306:	f8cd 800c 	str.w	r8, [sp, #12]
 800630a:	2330      	movs	r3, #48	; 0x30
 800630c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064d0 <_vfiprintf_r+0x24c>
 8006310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006314:	f04f 0901 	mov.w	r9, #1
 8006318:	4623      	mov	r3, r4
 800631a:	469a      	mov	sl, r3
 800631c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006320:	b10a      	cbz	r2, 8006326 <_vfiprintf_r+0xa2>
 8006322:	2a25      	cmp	r2, #37	; 0x25
 8006324:	d1f9      	bne.n	800631a <_vfiprintf_r+0x96>
 8006326:	ebba 0b04 	subs.w	fp, sl, r4
 800632a:	d00b      	beq.n	8006344 <_vfiprintf_r+0xc0>
 800632c:	465b      	mov	r3, fp
 800632e:	4622      	mov	r2, r4
 8006330:	4629      	mov	r1, r5
 8006332:	4630      	mov	r0, r6
 8006334:	f7ff ff94 	bl	8006260 <__sfputs_r>
 8006338:	3001      	adds	r0, #1
 800633a:	f000 80aa 	beq.w	8006492 <_vfiprintf_r+0x20e>
 800633e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006340:	445a      	add	r2, fp
 8006342:	9209      	str	r2, [sp, #36]	; 0x24
 8006344:	f89a 3000 	ldrb.w	r3, [sl]
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 80a2 	beq.w	8006492 <_vfiprintf_r+0x20e>
 800634e:	2300      	movs	r3, #0
 8006350:	f04f 32ff 	mov.w	r2, #4294967295
 8006354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006358:	f10a 0a01 	add.w	sl, sl, #1
 800635c:	9304      	str	r3, [sp, #16]
 800635e:	9307      	str	r3, [sp, #28]
 8006360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006364:	931a      	str	r3, [sp, #104]	; 0x68
 8006366:	4654      	mov	r4, sl
 8006368:	2205      	movs	r2, #5
 800636a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636e:	4858      	ldr	r0, [pc, #352]	; (80064d0 <_vfiprintf_r+0x24c>)
 8006370:	f7f9 ff36 	bl	80001e0 <memchr>
 8006374:	9a04      	ldr	r2, [sp, #16]
 8006376:	b9d8      	cbnz	r0, 80063b0 <_vfiprintf_r+0x12c>
 8006378:	06d1      	lsls	r1, r2, #27
 800637a:	bf44      	itt	mi
 800637c:	2320      	movmi	r3, #32
 800637e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006382:	0713      	lsls	r3, r2, #28
 8006384:	bf44      	itt	mi
 8006386:	232b      	movmi	r3, #43	; 0x2b
 8006388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800638c:	f89a 3000 	ldrb.w	r3, [sl]
 8006390:	2b2a      	cmp	r3, #42	; 0x2a
 8006392:	d015      	beq.n	80063c0 <_vfiprintf_r+0x13c>
 8006394:	9a07      	ldr	r2, [sp, #28]
 8006396:	4654      	mov	r4, sl
 8006398:	2000      	movs	r0, #0
 800639a:	f04f 0c0a 	mov.w	ip, #10
 800639e:	4621      	mov	r1, r4
 80063a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a4:	3b30      	subs	r3, #48	; 0x30
 80063a6:	2b09      	cmp	r3, #9
 80063a8:	d94e      	bls.n	8006448 <_vfiprintf_r+0x1c4>
 80063aa:	b1b0      	cbz	r0, 80063da <_vfiprintf_r+0x156>
 80063ac:	9207      	str	r2, [sp, #28]
 80063ae:	e014      	b.n	80063da <_vfiprintf_r+0x156>
 80063b0:	eba0 0308 	sub.w	r3, r0, r8
 80063b4:	fa09 f303 	lsl.w	r3, r9, r3
 80063b8:	4313      	orrs	r3, r2
 80063ba:	9304      	str	r3, [sp, #16]
 80063bc:	46a2      	mov	sl, r4
 80063be:	e7d2      	b.n	8006366 <_vfiprintf_r+0xe2>
 80063c0:	9b03      	ldr	r3, [sp, #12]
 80063c2:	1d19      	adds	r1, r3, #4
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	9103      	str	r1, [sp, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	bfbb      	ittet	lt
 80063cc:	425b      	neglt	r3, r3
 80063ce:	f042 0202 	orrlt.w	r2, r2, #2
 80063d2:	9307      	strge	r3, [sp, #28]
 80063d4:	9307      	strlt	r3, [sp, #28]
 80063d6:	bfb8      	it	lt
 80063d8:	9204      	strlt	r2, [sp, #16]
 80063da:	7823      	ldrb	r3, [r4, #0]
 80063dc:	2b2e      	cmp	r3, #46	; 0x2e
 80063de:	d10c      	bne.n	80063fa <_vfiprintf_r+0x176>
 80063e0:	7863      	ldrb	r3, [r4, #1]
 80063e2:	2b2a      	cmp	r3, #42	; 0x2a
 80063e4:	d135      	bne.n	8006452 <_vfiprintf_r+0x1ce>
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	1d1a      	adds	r2, r3, #4
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	9203      	str	r2, [sp, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bfb8      	it	lt
 80063f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80063f6:	3402      	adds	r4, #2
 80063f8:	9305      	str	r3, [sp, #20]
 80063fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80064e0 <_vfiprintf_r+0x25c>
 80063fe:	7821      	ldrb	r1, [r4, #0]
 8006400:	2203      	movs	r2, #3
 8006402:	4650      	mov	r0, sl
 8006404:	f7f9 feec 	bl	80001e0 <memchr>
 8006408:	b140      	cbz	r0, 800641c <_vfiprintf_r+0x198>
 800640a:	2340      	movs	r3, #64	; 0x40
 800640c:	eba0 000a 	sub.w	r0, r0, sl
 8006410:	fa03 f000 	lsl.w	r0, r3, r0
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	4303      	orrs	r3, r0
 8006418:	3401      	adds	r4, #1
 800641a:	9304      	str	r3, [sp, #16]
 800641c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006420:	482c      	ldr	r0, [pc, #176]	; (80064d4 <_vfiprintf_r+0x250>)
 8006422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006426:	2206      	movs	r2, #6
 8006428:	f7f9 feda 	bl	80001e0 <memchr>
 800642c:	2800      	cmp	r0, #0
 800642e:	d03f      	beq.n	80064b0 <_vfiprintf_r+0x22c>
 8006430:	4b29      	ldr	r3, [pc, #164]	; (80064d8 <_vfiprintf_r+0x254>)
 8006432:	bb1b      	cbnz	r3, 800647c <_vfiprintf_r+0x1f8>
 8006434:	9b03      	ldr	r3, [sp, #12]
 8006436:	3307      	adds	r3, #7
 8006438:	f023 0307 	bic.w	r3, r3, #7
 800643c:	3308      	adds	r3, #8
 800643e:	9303      	str	r3, [sp, #12]
 8006440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006442:	443b      	add	r3, r7
 8006444:	9309      	str	r3, [sp, #36]	; 0x24
 8006446:	e767      	b.n	8006318 <_vfiprintf_r+0x94>
 8006448:	fb0c 3202 	mla	r2, ip, r2, r3
 800644c:	460c      	mov	r4, r1
 800644e:	2001      	movs	r0, #1
 8006450:	e7a5      	b.n	800639e <_vfiprintf_r+0x11a>
 8006452:	2300      	movs	r3, #0
 8006454:	3401      	adds	r4, #1
 8006456:	9305      	str	r3, [sp, #20]
 8006458:	4619      	mov	r1, r3
 800645a:	f04f 0c0a 	mov.w	ip, #10
 800645e:	4620      	mov	r0, r4
 8006460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006464:	3a30      	subs	r2, #48	; 0x30
 8006466:	2a09      	cmp	r2, #9
 8006468:	d903      	bls.n	8006472 <_vfiprintf_r+0x1ee>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0c5      	beq.n	80063fa <_vfiprintf_r+0x176>
 800646e:	9105      	str	r1, [sp, #20]
 8006470:	e7c3      	b.n	80063fa <_vfiprintf_r+0x176>
 8006472:	fb0c 2101 	mla	r1, ip, r1, r2
 8006476:	4604      	mov	r4, r0
 8006478:	2301      	movs	r3, #1
 800647a:	e7f0      	b.n	800645e <_vfiprintf_r+0x1da>
 800647c:	ab03      	add	r3, sp, #12
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	462a      	mov	r2, r5
 8006482:	4b16      	ldr	r3, [pc, #88]	; (80064dc <_vfiprintf_r+0x258>)
 8006484:	a904      	add	r1, sp, #16
 8006486:	4630      	mov	r0, r6
 8006488:	f7fd fdd8 	bl	800403c <_printf_float>
 800648c:	4607      	mov	r7, r0
 800648e:	1c78      	adds	r0, r7, #1
 8006490:	d1d6      	bne.n	8006440 <_vfiprintf_r+0x1bc>
 8006492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006494:	07d9      	lsls	r1, r3, #31
 8006496:	d405      	bmi.n	80064a4 <_vfiprintf_r+0x220>
 8006498:	89ab      	ldrh	r3, [r5, #12]
 800649a:	059a      	lsls	r2, r3, #22
 800649c:	d402      	bmi.n	80064a4 <_vfiprintf_r+0x220>
 800649e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064a0:	f000 faaf 	bl	8006a02 <__retarget_lock_release_recursive>
 80064a4:	89ab      	ldrh	r3, [r5, #12]
 80064a6:	065b      	lsls	r3, r3, #25
 80064a8:	f53f af12 	bmi.w	80062d0 <_vfiprintf_r+0x4c>
 80064ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ae:	e711      	b.n	80062d4 <_vfiprintf_r+0x50>
 80064b0:	ab03      	add	r3, sp, #12
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	462a      	mov	r2, r5
 80064b6:	4b09      	ldr	r3, [pc, #36]	; (80064dc <_vfiprintf_r+0x258>)
 80064b8:	a904      	add	r1, sp, #16
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7fe f862 	bl	8004584 <_printf_i>
 80064c0:	e7e4      	b.n	800648c <_vfiprintf_r+0x208>
 80064c2:	bf00      	nop
 80064c4:	080070a4 	.word	0x080070a4
 80064c8:	080070c4 	.word	0x080070c4
 80064cc:	08007084 	.word	0x08007084
 80064d0:	08006f2c 	.word	0x08006f2c
 80064d4:	08006f36 	.word	0x08006f36
 80064d8:	0800403d 	.word	0x0800403d
 80064dc:	08006261 	.word	0x08006261
 80064e0:	08006f32 	.word	0x08006f32

080064e4 <__swbuf_r>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	460e      	mov	r6, r1
 80064e8:	4614      	mov	r4, r2
 80064ea:	4605      	mov	r5, r0
 80064ec:	b118      	cbz	r0, 80064f6 <__swbuf_r+0x12>
 80064ee:	6983      	ldr	r3, [r0, #24]
 80064f0:	b90b      	cbnz	r3, 80064f6 <__swbuf_r+0x12>
 80064f2:	f000 f9e7 	bl	80068c4 <__sinit>
 80064f6:	4b21      	ldr	r3, [pc, #132]	; (800657c <__swbuf_r+0x98>)
 80064f8:	429c      	cmp	r4, r3
 80064fa:	d12b      	bne.n	8006554 <__swbuf_r+0x70>
 80064fc:	686c      	ldr	r4, [r5, #4]
 80064fe:	69a3      	ldr	r3, [r4, #24]
 8006500:	60a3      	str	r3, [r4, #8]
 8006502:	89a3      	ldrh	r3, [r4, #12]
 8006504:	071a      	lsls	r2, r3, #28
 8006506:	d52f      	bpl.n	8006568 <__swbuf_r+0x84>
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	b36b      	cbz	r3, 8006568 <__swbuf_r+0x84>
 800650c:	6923      	ldr	r3, [r4, #16]
 800650e:	6820      	ldr	r0, [r4, #0]
 8006510:	1ac0      	subs	r0, r0, r3
 8006512:	6963      	ldr	r3, [r4, #20]
 8006514:	b2f6      	uxtb	r6, r6
 8006516:	4283      	cmp	r3, r0
 8006518:	4637      	mov	r7, r6
 800651a:	dc04      	bgt.n	8006526 <__swbuf_r+0x42>
 800651c:	4621      	mov	r1, r4
 800651e:	4628      	mov	r0, r5
 8006520:	f000 f93c 	bl	800679c <_fflush_r>
 8006524:	bb30      	cbnz	r0, 8006574 <__swbuf_r+0x90>
 8006526:	68a3      	ldr	r3, [r4, #8]
 8006528:	3b01      	subs	r3, #1
 800652a:	60a3      	str	r3, [r4, #8]
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	6022      	str	r2, [r4, #0]
 8006532:	701e      	strb	r6, [r3, #0]
 8006534:	6963      	ldr	r3, [r4, #20]
 8006536:	3001      	adds	r0, #1
 8006538:	4283      	cmp	r3, r0
 800653a:	d004      	beq.n	8006546 <__swbuf_r+0x62>
 800653c:	89a3      	ldrh	r3, [r4, #12]
 800653e:	07db      	lsls	r3, r3, #31
 8006540:	d506      	bpl.n	8006550 <__swbuf_r+0x6c>
 8006542:	2e0a      	cmp	r6, #10
 8006544:	d104      	bne.n	8006550 <__swbuf_r+0x6c>
 8006546:	4621      	mov	r1, r4
 8006548:	4628      	mov	r0, r5
 800654a:	f000 f927 	bl	800679c <_fflush_r>
 800654e:	b988      	cbnz	r0, 8006574 <__swbuf_r+0x90>
 8006550:	4638      	mov	r0, r7
 8006552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006554:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <__swbuf_r+0x9c>)
 8006556:	429c      	cmp	r4, r3
 8006558:	d101      	bne.n	800655e <__swbuf_r+0x7a>
 800655a:	68ac      	ldr	r4, [r5, #8]
 800655c:	e7cf      	b.n	80064fe <__swbuf_r+0x1a>
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <__swbuf_r+0xa0>)
 8006560:	429c      	cmp	r4, r3
 8006562:	bf08      	it	eq
 8006564:	68ec      	ldreq	r4, [r5, #12]
 8006566:	e7ca      	b.n	80064fe <__swbuf_r+0x1a>
 8006568:	4621      	mov	r1, r4
 800656a:	4628      	mov	r0, r5
 800656c:	f000 f81a 	bl	80065a4 <__swsetup_r>
 8006570:	2800      	cmp	r0, #0
 8006572:	d0cb      	beq.n	800650c <__swbuf_r+0x28>
 8006574:	f04f 37ff 	mov.w	r7, #4294967295
 8006578:	e7ea      	b.n	8006550 <__swbuf_r+0x6c>
 800657a:	bf00      	nop
 800657c:	080070a4 	.word	0x080070a4
 8006580:	080070c4 	.word	0x080070c4
 8006584:	08007084 	.word	0x08007084

08006588 <__ascii_wctomb>:
 8006588:	b149      	cbz	r1, 800659e <__ascii_wctomb+0x16>
 800658a:	2aff      	cmp	r2, #255	; 0xff
 800658c:	bf85      	ittet	hi
 800658e:	238a      	movhi	r3, #138	; 0x8a
 8006590:	6003      	strhi	r3, [r0, #0]
 8006592:	700a      	strbls	r2, [r1, #0]
 8006594:	f04f 30ff 	movhi.w	r0, #4294967295
 8006598:	bf98      	it	ls
 800659a:	2001      	movls	r0, #1
 800659c:	4770      	bx	lr
 800659e:	4608      	mov	r0, r1
 80065a0:	4770      	bx	lr
	...

080065a4 <__swsetup_r>:
 80065a4:	4b32      	ldr	r3, [pc, #200]	; (8006670 <__swsetup_r+0xcc>)
 80065a6:	b570      	push	{r4, r5, r6, lr}
 80065a8:	681d      	ldr	r5, [r3, #0]
 80065aa:	4606      	mov	r6, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	b125      	cbz	r5, 80065ba <__swsetup_r+0x16>
 80065b0:	69ab      	ldr	r3, [r5, #24]
 80065b2:	b913      	cbnz	r3, 80065ba <__swsetup_r+0x16>
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 f985 	bl	80068c4 <__sinit>
 80065ba:	4b2e      	ldr	r3, [pc, #184]	; (8006674 <__swsetup_r+0xd0>)
 80065bc:	429c      	cmp	r4, r3
 80065be:	d10f      	bne.n	80065e0 <__swsetup_r+0x3c>
 80065c0:	686c      	ldr	r4, [r5, #4]
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065c8:	0719      	lsls	r1, r3, #28
 80065ca:	d42c      	bmi.n	8006626 <__swsetup_r+0x82>
 80065cc:	06dd      	lsls	r5, r3, #27
 80065ce:	d411      	bmi.n	80065f4 <__swsetup_r+0x50>
 80065d0:	2309      	movs	r3, #9
 80065d2:	6033      	str	r3, [r6, #0]
 80065d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065d8:	81a3      	strh	r3, [r4, #12]
 80065da:	f04f 30ff 	mov.w	r0, #4294967295
 80065de:	e03e      	b.n	800665e <__swsetup_r+0xba>
 80065e0:	4b25      	ldr	r3, [pc, #148]	; (8006678 <__swsetup_r+0xd4>)
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d101      	bne.n	80065ea <__swsetup_r+0x46>
 80065e6:	68ac      	ldr	r4, [r5, #8]
 80065e8:	e7eb      	b.n	80065c2 <__swsetup_r+0x1e>
 80065ea:	4b24      	ldr	r3, [pc, #144]	; (800667c <__swsetup_r+0xd8>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	bf08      	it	eq
 80065f0:	68ec      	ldreq	r4, [r5, #12]
 80065f2:	e7e6      	b.n	80065c2 <__swsetup_r+0x1e>
 80065f4:	0758      	lsls	r0, r3, #29
 80065f6:	d512      	bpl.n	800661e <__swsetup_r+0x7a>
 80065f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065fa:	b141      	cbz	r1, 800660e <__swsetup_r+0x6a>
 80065fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006600:	4299      	cmp	r1, r3
 8006602:	d002      	beq.n	800660a <__swsetup_r+0x66>
 8006604:	4630      	mov	r0, r6
 8006606:	f7ff fb31 	bl	8005c6c <_free_r>
 800660a:	2300      	movs	r3, #0
 800660c:	6363      	str	r3, [r4, #52]	; 0x34
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006614:	81a3      	strh	r3, [r4, #12]
 8006616:	2300      	movs	r3, #0
 8006618:	6063      	str	r3, [r4, #4]
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	f043 0308 	orr.w	r3, r3, #8
 8006624:	81a3      	strh	r3, [r4, #12]
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	b94b      	cbnz	r3, 800663e <__swsetup_r+0x9a>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006634:	d003      	beq.n	800663e <__swsetup_r+0x9a>
 8006636:	4621      	mov	r1, r4
 8006638:	4630      	mov	r0, r6
 800663a:	f000 fa09 	bl	8006a50 <__smakebuf_r>
 800663e:	89a0      	ldrh	r0, [r4, #12]
 8006640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006644:	f010 0301 	ands.w	r3, r0, #1
 8006648:	d00a      	beq.n	8006660 <__swsetup_r+0xbc>
 800664a:	2300      	movs	r3, #0
 800664c:	60a3      	str	r3, [r4, #8]
 800664e:	6963      	ldr	r3, [r4, #20]
 8006650:	425b      	negs	r3, r3
 8006652:	61a3      	str	r3, [r4, #24]
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	b943      	cbnz	r3, 800666a <__swsetup_r+0xc6>
 8006658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800665c:	d1ba      	bne.n	80065d4 <__swsetup_r+0x30>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	0781      	lsls	r1, r0, #30
 8006662:	bf58      	it	pl
 8006664:	6963      	ldrpl	r3, [r4, #20]
 8006666:	60a3      	str	r3, [r4, #8]
 8006668:	e7f4      	b.n	8006654 <__swsetup_r+0xb0>
 800666a:	2000      	movs	r0, #0
 800666c:	e7f7      	b.n	800665e <__swsetup_r+0xba>
 800666e:	bf00      	nop
 8006670:	20000010 	.word	0x20000010
 8006674:	080070a4 	.word	0x080070a4
 8006678:	080070c4 	.word	0x080070c4
 800667c:	08007084 	.word	0x08007084

08006680 <abort>:
 8006680:	b508      	push	{r3, lr}
 8006682:	2006      	movs	r0, #6
 8006684:	f000 fa54 	bl	8006b30 <raise>
 8006688:	2001      	movs	r0, #1
 800668a:	f7fb fb73 	bl	8001d74 <_exit>
	...

08006690 <__sflush_r>:
 8006690:	898a      	ldrh	r2, [r1, #12]
 8006692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006696:	4605      	mov	r5, r0
 8006698:	0710      	lsls	r0, r2, #28
 800669a:	460c      	mov	r4, r1
 800669c:	d458      	bmi.n	8006750 <__sflush_r+0xc0>
 800669e:	684b      	ldr	r3, [r1, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	dc05      	bgt.n	80066b0 <__sflush_r+0x20>
 80066a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dc02      	bgt.n	80066b0 <__sflush_r+0x20>
 80066aa:	2000      	movs	r0, #0
 80066ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066b2:	2e00      	cmp	r6, #0
 80066b4:	d0f9      	beq.n	80066aa <__sflush_r+0x1a>
 80066b6:	2300      	movs	r3, #0
 80066b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066bc:	682f      	ldr	r7, [r5, #0]
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	d032      	beq.n	8006728 <__sflush_r+0x98>
 80066c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	075a      	lsls	r2, r3, #29
 80066c8:	d505      	bpl.n	80066d6 <__sflush_r+0x46>
 80066ca:	6863      	ldr	r3, [r4, #4]
 80066cc:	1ac0      	subs	r0, r0, r3
 80066ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066d0:	b10b      	cbz	r3, 80066d6 <__sflush_r+0x46>
 80066d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066d4:	1ac0      	subs	r0, r0, r3
 80066d6:	2300      	movs	r3, #0
 80066d8:	4602      	mov	r2, r0
 80066da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066dc:	6a21      	ldr	r1, [r4, #32]
 80066de:	4628      	mov	r0, r5
 80066e0:	47b0      	blx	r6
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	d106      	bne.n	80066f6 <__sflush_r+0x66>
 80066e8:	6829      	ldr	r1, [r5, #0]
 80066ea:	291d      	cmp	r1, #29
 80066ec:	d82c      	bhi.n	8006748 <__sflush_r+0xb8>
 80066ee:	4a2a      	ldr	r2, [pc, #168]	; (8006798 <__sflush_r+0x108>)
 80066f0:	40ca      	lsrs	r2, r1
 80066f2:	07d6      	lsls	r6, r2, #31
 80066f4:	d528      	bpl.n	8006748 <__sflush_r+0xb8>
 80066f6:	2200      	movs	r2, #0
 80066f8:	6062      	str	r2, [r4, #4]
 80066fa:	04d9      	lsls	r1, r3, #19
 80066fc:	6922      	ldr	r2, [r4, #16]
 80066fe:	6022      	str	r2, [r4, #0]
 8006700:	d504      	bpl.n	800670c <__sflush_r+0x7c>
 8006702:	1c42      	adds	r2, r0, #1
 8006704:	d101      	bne.n	800670a <__sflush_r+0x7a>
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	b903      	cbnz	r3, 800670c <__sflush_r+0x7c>
 800670a:	6560      	str	r0, [r4, #84]	; 0x54
 800670c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800670e:	602f      	str	r7, [r5, #0]
 8006710:	2900      	cmp	r1, #0
 8006712:	d0ca      	beq.n	80066aa <__sflush_r+0x1a>
 8006714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006718:	4299      	cmp	r1, r3
 800671a:	d002      	beq.n	8006722 <__sflush_r+0x92>
 800671c:	4628      	mov	r0, r5
 800671e:	f7ff faa5 	bl	8005c6c <_free_r>
 8006722:	2000      	movs	r0, #0
 8006724:	6360      	str	r0, [r4, #52]	; 0x34
 8006726:	e7c1      	b.n	80066ac <__sflush_r+0x1c>
 8006728:	6a21      	ldr	r1, [r4, #32]
 800672a:	2301      	movs	r3, #1
 800672c:	4628      	mov	r0, r5
 800672e:	47b0      	blx	r6
 8006730:	1c41      	adds	r1, r0, #1
 8006732:	d1c7      	bne.n	80066c4 <__sflush_r+0x34>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0c4      	beq.n	80066c4 <__sflush_r+0x34>
 800673a:	2b1d      	cmp	r3, #29
 800673c:	d001      	beq.n	8006742 <__sflush_r+0xb2>
 800673e:	2b16      	cmp	r3, #22
 8006740:	d101      	bne.n	8006746 <__sflush_r+0xb6>
 8006742:	602f      	str	r7, [r5, #0]
 8006744:	e7b1      	b.n	80066aa <__sflush_r+0x1a>
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674c:	81a3      	strh	r3, [r4, #12]
 800674e:	e7ad      	b.n	80066ac <__sflush_r+0x1c>
 8006750:	690f      	ldr	r7, [r1, #16]
 8006752:	2f00      	cmp	r7, #0
 8006754:	d0a9      	beq.n	80066aa <__sflush_r+0x1a>
 8006756:	0793      	lsls	r3, r2, #30
 8006758:	680e      	ldr	r6, [r1, #0]
 800675a:	bf08      	it	eq
 800675c:	694b      	ldreq	r3, [r1, #20]
 800675e:	600f      	str	r7, [r1, #0]
 8006760:	bf18      	it	ne
 8006762:	2300      	movne	r3, #0
 8006764:	eba6 0807 	sub.w	r8, r6, r7
 8006768:	608b      	str	r3, [r1, #8]
 800676a:	f1b8 0f00 	cmp.w	r8, #0
 800676e:	dd9c      	ble.n	80066aa <__sflush_r+0x1a>
 8006770:	6a21      	ldr	r1, [r4, #32]
 8006772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006774:	4643      	mov	r3, r8
 8006776:	463a      	mov	r2, r7
 8006778:	4628      	mov	r0, r5
 800677a:	47b0      	blx	r6
 800677c:	2800      	cmp	r0, #0
 800677e:	dc06      	bgt.n	800678e <__sflush_r+0xfe>
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006786:	81a3      	strh	r3, [r4, #12]
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	e78e      	b.n	80066ac <__sflush_r+0x1c>
 800678e:	4407      	add	r7, r0
 8006790:	eba8 0800 	sub.w	r8, r8, r0
 8006794:	e7e9      	b.n	800676a <__sflush_r+0xda>
 8006796:	bf00      	nop
 8006798:	20400001 	.word	0x20400001

0800679c <_fflush_r>:
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	690b      	ldr	r3, [r1, #16]
 80067a0:	4605      	mov	r5, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	b913      	cbnz	r3, 80067ac <_fflush_r+0x10>
 80067a6:	2500      	movs	r5, #0
 80067a8:	4628      	mov	r0, r5
 80067aa:	bd38      	pop	{r3, r4, r5, pc}
 80067ac:	b118      	cbz	r0, 80067b6 <_fflush_r+0x1a>
 80067ae:	6983      	ldr	r3, [r0, #24]
 80067b0:	b90b      	cbnz	r3, 80067b6 <_fflush_r+0x1a>
 80067b2:	f000 f887 	bl	80068c4 <__sinit>
 80067b6:	4b14      	ldr	r3, [pc, #80]	; (8006808 <_fflush_r+0x6c>)
 80067b8:	429c      	cmp	r4, r3
 80067ba:	d11b      	bne.n	80067f4 <_fflush_r+0x58>
 80067bc:	686c      	ldr	r4, [r5, #4]
 80067be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0ef      	beq.n	80067a6 <_fflush_r+0xa>
 80067c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067c8:	07d0      	lsls	r0, r2, #31
 80067ca:	d404      	bmi.n	80067d6 <_fflush_r+0x3a>
 80067cc:	0599      	lsls	r1, r3, #22
 80067ce:	d402      	bmi.n	80067d6 <_fflush_r+0x3a>
 80067d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d2:	f000 f915 	bl	8006a00 <__retarget_lock_acquire_recursive>
 80067d6:	4628      	mov	r0, r5
 80067d8:	4621      	mov	r1, r4
 80067da:	f7ff ff59 	bl	8006690 <__sflush_r>
 80067de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067e0:	07da      	lsls	r2, r3, #31
 80067e2:	4605      	mov	r5, r0
 80067e4:	d4e0      	bmi.n	80067a8 <_fflush_r+0xc>
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	059b      	lsls	r3, r3, #22
 80067ea:	d4dd      	bmi.n	80067a8 <_fflush_r+0xc>
 80067ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ee:	f000 f908 	bl	8006a02 <__retarget_lock_release_recursive>
 80067f2:	e7d9      	b.n	80067a8 <_fflush_r+0xc>
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <_fflush_r+0x70>)
 80067f6:	429c      	cmp	r4, r3
 80067f8:	d101      	bne.n	80067fe <_fflush_r+0x62>
 80067fa:	68ac      	ldr	r4, [r5, #8]
 80067fc:	e7df      	b.n	80067be <_fflush_r+0x22>
 80067fe:	4b04      	ldr	r3, [pc, #16]	; (8006810 <_fflush_r+0x74>)
 8006800:	429c      	cmp	r4, r3
 8006802:	bf08      	it	eq
 8006804:	68ec      	ldreq	r4, [r5, #12]
 8006806:	e7da      	b.n	80067be <_fflush_r+0x22>
 8006808:	080070a4 	.word	0x080070a4
 800680c:	080070c4 	.word	0x080070c4
 8006810:	08007084 	.word	0x08007084

08006814 <std>:
 8006814:	2300      	movs	r3, #0
 8006816:	b510      	push	{r4, lr}
 8006818:	4604      	mov	r4, r0
 800681a:	e9c0 3300 	strd	r3, r3, [r0]
 800681e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006822:	6083      	str	r3, [r0, #8]
 8006824:	8181      	strh	r1, [r0, #12]
 8006826:	6643      	str	r3, [r0, #100]	; 0x64
 8006828:	81c2      	strh	r2, [r0, #14]
 800682a:	6183      	str	r3, [r0, #24]
 800682c:	4619      	mov	r1, r3
 800682e:	2208      	movs	r2, #8
 8006830:	305c      	adds	r0, #92	; 0x5c
 8006832:	f7fd fb5b 	bl	8003eec <memset>
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <std+0x38>)
 8006838:	6263      	str	r3, [r4, #36]	; 0x24
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <std+0x3c>)
 800683c:	62a3      	str	r3, [r4, #40]	; 0x28
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <std+0x40>)
 8006840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006842:	4b05      	ldr	r3, [pc, #20]	; (8006858 <std+0x44>)
 8006844:	6224      	str	r4, [r4, #32]
 8006846:	6323      	str	r3, [r4, #48]	; 0x30
 8006848:	bd10      	pop	{r4, pc}
 800684a:	bf00      	nop
 800684c:	08006b69 	.word	0x08006b69
 8006850:	08006b8b 	.word	0x08006b8b
 8006854:	08006bc3 	.word	0x08006bc3
 8006858:	08006be7 	.word	0x08006be7

0800685c <_cleanup_r>:
 800685c:	4901      	ldr	r1, [pc, #4]	; (8006864 <_cleanup_r+0x8>)
 800685e:	f000 b8af 	b.w	80069c0 <_fwalk_reent>
 8006862:	bf00      	nop
 8006864:	0800679d 	.word	0x0800679d

08006868 <__sfmoreglue>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	2268      	movs	r2, #104	; 0x68
 800686c:	1e4d      	subs	r5, r1, #1
 800686e:	4355      	muls	r5, r2
 8006870:	460e      	mov	r6, r1
 8006872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006876:	f7ff fa65 	bl	8005d44 <_malloc_r>
 800687a:	4604      	mov	r4, r0
 800687c:	b140      	cbz	r0, 8006890 <__sfmoreglue+0x28>
 800687e:	2100      	movs	r1, #0
 8006880:	e9c0 1600 	strd	r1, r6, [r0]
 8006884:	300c      	adds	r0, #12
 8006886:	60a0      	str	r0, [r4, #8]
 8006888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800688c:	f7fd fb2e 	bl	8003eec <memset>
 8006890:	4620      	mov	r0, r4
 8006892:	bd70      	pop	{r4, r5, r6, pc}

08006894 <__sfp_lock_acquire>:
 8006894:	4801      	ldr	r0, [pc, #4]	; (800689c <__sfp_lock_acquire+0x8>)
 8006896:	f000 b8b3 	b.w	8006a00 <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	200002a1 	.word	0x200002a1

080068a0 <__sfp_lock_release>:
 80068a0:	4801      	ldr	r0, [pc, #4]	; (80068a8 <__sfp_lock_release+0x8>)
 80068a2:	f000 b8ae 	b.w	8006a02 <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	200002a1 	.word	0x200002a1

080068ac <__sinit_lock_acquire>:
 80068ac:	4801      	ldr	r0, [pc, #4]	; (80068b4 <__sinit_lock_acquire+0x8>)
 80068ae:	f000 b8a7 	b.w	8006a00 <__retarget_lock_acquire_recursive>
 80068b2:	bf00      	nop
 80068b4:	200002a2 	.word	0x200002a2

080068b8 <__sinit_lock_release>:
 80068b8:	4801      	ldr	r0, [pc, #4]	; (80068c0 <__sinit_lock_release+0x8>)
 80068ba:	f000 b8a2 	b.w	8006a02 <__retarget_lock_release_recursive>
 80068be:	bf00      	nop
 80068c0:	200002a2 	.word	0x200002a2

080068c4 <__sinit>:
 80068c4:	b510      	push	{r4, lr}
 80068c6:	4604      	mov	r4, r0
 80068c8:	f7ff fff0 	bl	80068ac <__sinit_lock_acquire>
 80068cc:	69a3      	ldr	r3, [r4, #24]
 80068ce:	b11b      	cbz	r3, 80068d8 <__sinit+0x14>
 80068d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d4:	f7ff bff0 	b.w	80068b8 <__sinit_lock_release>
 80068d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068dc:	6523      	str	r3, [r4, #80]	; 0x50
 80068de:	4b13      	ldr	r3, [pc, #76]	; (800692c <__sinit+0x68>)
 80068e0:	4a13      	ldr	r2, [pc, #76]	; (8006930 <__sinit+0x6c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80068e6:	42a3      	cmp	r3, r4
 80068e8:	bf04      	itt	eq
 80068ea:	2301      	moveq	r3, #1
 80068ec:	61a3      	streq	r3, [r4, #24]
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 f820 	bl	8006934 <__sfp>
 80068f4:	6060      	str	r0, [r4, #4]
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 f81c 	bl	8006934 <__sfp>
 80068fc:	60a0      	str	r0, [r4, #8]
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 f818 	bl	8006934 <__sfp>
 8006904:	2200      	movs	r2, #0
 8006906:	60e0      	str	r0, [r4, #12]
 8006908:	2104      	movs	r1, #4
 800690a:	6860      	ldr	r0, [r4, #4]
 800690c:	f7ff ff82 	bl	8006814 <std>
 8006910:	68a0      	ldr	r0, [r4, #8]
 8006912:	2201      	movs	r2, #1
 8006914:	2109      	movs	r1, #9
 8006916:	f7ff ff7d 	bl	8006814 <std>
 800691a:	68e0      	ldr	r0, [r4, #12]
 800691c:	2202      	movs	r2, #2
 800691e:	2112      	movs	r1, #18
 8006920:	f7ff ff78 	bl	8006814 <std>
 8006924:	2301      	movs	r3, #1
 8006926:	61a3      	str	r3, [r4, #24]
 8006928:	e7d2      	b.n	80068d0 <__sinit+0xc>
 800692a:	bf00      	nop
 800692c:	08006d0c 	.word	0x08006d0c
 8006930:	0800685d 	.word	0x0800685d

08006934 <__sfp>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	4607      	mov	r7, r0
 8006938:	f7ff ffac 	bl	8006894 <__sfp_lock_acquire>
 800693c:	4b1e      	ldr	r3, [pc, #120]	; (80069b8 <__sfp+0x84>)
 800693e:	681e      	ldr	r6, [r3, #0]
 8006940:	69b3      	ldr	r3, [r6, #24]
 8006942:	b913      	cbnz	r3, 800694a <__sfp+0x16>
 8006944:	4630      	mov	r0, r6
 8006946:	f7ff ffbd 	bl	80068c4 <__sinit>
 800694a:	3648      	adds	r6, #72	; 0x48
 800694c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006950:	3b01      	subs	r3, #1
 8006952:	d503      	bpl.n	800695c <__sfp+0x28>
 8006954:	6833      	ldr	r3, [r6, #0]
 8006956:	b30b      	cbz	r3, 800699c <__sfp+0x68>
 8006958:	6836      	ldr	r6, [r6, #0]
 800695a:	e7f7      	b.n	800694c <__sfp+0x18>
 800695c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006960:	b9d5      	cbnz	r5, 8006998 <__sfp+0x64>
 8006962:	4b16      	ldr	r3, [pc, #88]	; (80069bc <__sfp+0x88>)
 8006964:	60e3      	str	r3, [r4, #12]
 8006966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800696a:	6665      	str	r5, [r4, #100]	; 0x64
 800696c:	f000 f847 	bl	80069fe <__retarget_lock_init_recursive>
 8006970:	f7ff ff96 	bl	80068a0 <__sfp_lock_release>
 8006974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800697c:	6025      	str	r5, [r4, #0]
 800697e:	61a5      	str	r5, [r4, #24]
 8006980:	2208      	movs	r2, #8
 8006982:	4629      	mov	r1, r5
 8006984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006988:	f7fd fab0 	bl	8003eec <memset>
 800698c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006994:	4620      	mov	r0, r4
 8006996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006998:	3468      	adds	r4, #104	; 0x68
 800699a:	e7d9      	b.n	8006950 <__sfp+0x1c>
 800699c:	2104      	movs	r1, #4
 800699e:	4638      	mov	r0, r7
 80069a0:	f7ff ff62 	bl	8006868 <__sfmoreglue>
 80069a4:	4604      	mov	r4, r0
 80069a6:	6030      	str	r0, [r6, #0]
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d1d5      	bne.n	8006958 <__sfp+0x24>
 80069ac:	f7ff ff78 	bl	80068a0 <__sfp_lock_release>
 80069b0:	230c      	movs	r3, #12
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	e7ee      	b.n	8006994 <__sfp+0x60>
 80069b6:	bf00      	nop
 80069b8:	08006d0c 	.word	0x08006d0c
 80069bc:	ffff0001 	.word	0xffff0001

080069c0 <_fwalk_reent>:
 80069c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c4:	4606      	mov	r6, r0
 80069c6:	4688      	mov	r8, r1
 80069c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069cc:	2700      	movs	r7, #0
 80069ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069d2:	f1b9 0901 	subs.w	r9, r9, #1
 80069d6:	d505      	bpl.n	80069e4 <_fwalk_reent+0x24>
 80069d8:	6824      	ldr	r4, [r4, #0]
 80069da:	2c00      	cmp	r4, #0
 80069dc:	d1f7      	bne.n	80069ce <_fwalk_reent+0xe>
 80069de:	4638      	mov	r0, r7
 80069e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069e4:	89ab      	ldrh	r3, [r5, #12]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d907      	bls.n	80069fa <_fwalk_reent+0x3a>
 80069ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069ee:	3301      	adds	r3, #1
 80069f0:	d003      	beq.n	80069fa <_fwalk_reent+0x3a>
 80069f2:	4629      	mov	r1, r5
 80069f4:	4630      	mov	r0, r6
 80069f6:	47c0      	blx	r8
 80069f8:	4307      	orrs	r7, r0
 80069fa:	3568      	adds	r5, #104	; 0x68
 80069fc:	e7e9      	b.n	80069d2 <_fwalk_reent+0x12>

080069fe <__retarget_lock_init_recursive>:
 80069fe:	4770      	bx	lr

08006a00 <__retarget_lock_acquire_recursive>:
 8006a00:	4770      	bx	lr

08006a02 <__retarget_lock_release_recursive>:
 8006a02:	4770      	bx	lr

08006a04 <__swhatbuf_r>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	460e      	mov	r6, r1
 8006a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0c:	2900      	cmp	r1, #0
 8006a0e:	b096      	sub	sp, #88	; 0x58
 8006a10:	4614      	mov	r4, r2
 8006a12:	461d      	mov	r5, r3
 8006a14:	da08      	bge.n	8006a28 <__swhatbuf_r+0x24>
 8006a16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	602a      	str	r2, [r5, #0]
 8006a1e:	061a      	lsls	r2, r3, #24
 8006a20:	d410      	bmi.n	8006a44 <__swhatbuf_r+0x40>
 8006a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a26:	e00e      	b.n	8006a46 <__swhatbuf_r+0x42>
 8006a28:	466a      	mov	r2, sp
 8006a2a:	f000 f903 	bl	8006c34 <_fstat_r>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	dbf1      	blt.n	8006a16 <__swhatbuf_r+0x12>
 8006a32:	9a01      	ldr	r2, [sp, #4]
 8006a34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a3c:	425a      	negs	r2, r3
 8006a3e:	415a      	adcs	r2, r3
 8006a40:	602a      	str	r2, [r5, #0]
 8006a42:	e7ee      	b.n	8006a22 <__swhatbuf_r+0x1e>
 8006a44:	2340      	movs	r3, #64	; 0x40
 8006a46:	2000      	movs	r0, #0
 8006a48:	6023      	str	r3, [r4, #0]
 8006a4a:	b016      	add	sp, #88	; 0x58
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a50 <__smakebuf_r>:
 8006a50:	898b      	ldrh	r3, [r1, #12]
 8006a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a54:	079d      	lsls	r5, r3, #30
 8006a56:	4606      	mov	r6, r0
 8006a58:	460c      	mov	r4, r1
 8006a5a:	d507      	bpl.n	8006a6c <__smakebuf_r+0x1c>
 8006a5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	2301      	movs	r3, #1
 8006a66:	6163      	str	r3, [r4, #20]
 8006a68:	b002      	add	sp, #8
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	ab01      	add	r3, sp, #4
 8006a6e:	466a      	mov	r2, sp
 8006a70:	f7ff ffc8 	bl	8006a04 <__swhatbuf_r>
 8006a74:	9900      	ldr	r1, [sp, #0]
 8006a76:	4605      	mov	r5, r0
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f7ff f963 	bl	8005d44 <_malloc_r>
 8006a7e:	b948      	cbnz	r0, 8006a94 <__smakebuf_r+0x44>
 8006a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a84:	059a      	lsls	r2, r3, #22
 8006a86:	d4ef      	bmi.n	8006a68 <__smakebuf_r+0x18>
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	f043 0302 	orr.w	r3, r3, #2
 8006a90:	81a3      	strh	r3, [r4, #12]
 8006a92:	e7e3      	b.n	8006a5c <__smakebuf_r+0xc>
 8006a94:	4b0d      	ldr	r3, [pc, #52]	; (8006acc <__smakebuf_r+0x7c>)
 8006a96:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	6020      	str	r0, [r4, #0]
 8006a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa0:	81a3      	strh	r3, [r4, #12]
 8006aa2:	9b00      	ldr	r3, [sp, #0]
 8006aa4:	6163      	str	r3, [r4, #20]
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	6120      	str	r0, [r4, #16]
 8006aaa:	b15b      	cbz	r3, 8006ac4 <__smakebuf_r+0x74>
 8006aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f000 f8d1 	bl	8006c58 <_isatty_r>
 8006ab6:	b128      	cbz	r0, 8006ac4 <__smakebuf_r+0x74>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f023 0303 	bic.w	r3, r3, #3
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	89a0      	ldrh	r0, [r4, #12]
 8006ac6:	4305      	orrs	r5, r0
 8006ac8:	81a5      	strh	r5, [r4, #12]
 8006aca:	e7cd      	b.n	8006a68 <__smakebuf_r+0x18>
 8006acc:	0800685d 	.word	0x0800685d

08006ad0 <_malloc_usable_size_r>:
 8006ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad4:	1f18      	subs	r0, r3, #4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	bfbc      	itt	lt
 8006ada:	580b      	ldrlt	r3, [r1, r0]
 8006adc:	18c0      	addlt	r0, r0, r3
 8006ade:	4770      	bx	lr

08006ae0 <_raise_r>:
 8006ae0:	291f      	cmp	r1, #31
 8006ae2:	b538      	push	{r3, r4, r5, lr}
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	460d      	mov	r5, r1
 8006ae8:	d904      	bls.n	8006af4 <_raise_r+0x14>
 8006aea:	2316      	movs	r3, #22
 8006aec:	6003      	str	r3, [r0, #0]
 8006aee:	f04f 30ff 	mov.w	r0, #4294967295
 8006af2:	bd38      	pop	{r3, r4, r5, pc}
 8006af4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006af6:	b112      	cbz	r2, 8006afe <_raise_r+0x1e>
 8006af8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006afc:	b94b      	cbnz	r3, 8006b12 <_raise_r+0x32>
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 f830 	bl	8006b64 <_getpid_r>
 8006b04:	462a      	mov	r2, r5
 8006b06:	4601      	mov	r1, r0
 8006b08:	4620      	mov	r0, r4
 8006b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b0e:	f000 b817 	b.w	8006b40 <_kill_r>
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d00a      	beq.n	8006b2c <_raise_r+0x4c>
 8006b16:	1c59      	adds	r1, r3, #1
 8006b18:	d103      	bne.n	8006b22 <_raise_r+0x42>
 8006b1a:	2316      	movs	r3, #22
 8006b1c:	6003      	str	r3, [r0, #0]
 8006b1e:	2001      	movs	r0, #1
 8006b20:	e7e7      	b.n	8006af2 <_raise_r+0x12>
 8006b22:	2400      	movs	r4, #0
 8006b24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b28:	4628      	mov	r0, r5
 8006b2a:	4798      	blx	r3
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	e7e0      	b.n	8006af2 <_raise_r+0x12>

08006b30 <raise>:
 8006b30:	4b02      	ldr	r3, [pc, #8]	; (8006b3c <raise+0xc>)
 8006b32:	4601      	mov	r1, r0
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	f7ff bfd3 	b.w	8006ae0 <_raise_r>
 8006b3a:	bf00      	nop
 8006b3c:	20000010 	.word	0x20000010

08006b40 <_kill_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d07      	ldr	r5, [pc, #28]	; (8006b60 <_kill_r+0x20>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	602b      	str	r3, [r5, #0]
 8006b4e:	f7fb f901 	bl	8001d54 <_kill>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	d102      	bne.n	8006b5c <_kill_r+0x1c>
 8006b56:	682b      	ldr	r3, [r5, #0]
 8006b58:	b103      	cbz	r3, 8006b5c <_kill_r+0x1c>
 8006b5a:	6023      	str	r3, [r4, #0]
 8006b5c:	bd38      	pop	{r3, r4, r5, pc}
 8006b5e:	bf00      	nop
 8006b60:	2000029c 	.word	0x2000029c

08006b64 <_getpid_r>:
 8006b64:	f7fb b8ee 	b.w	8001d44 <_getpid>

08006b68 <__sread>:
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b70:	f000 f894 	bl	8006c9c <_read_r>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	bfab      	itete	ge
 8006b78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b7c:	181b      	addge	r3, r3, r0
 8006b7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b82:	bfac      	ite	ge
 8006b84:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b86:	81a3      	strhlt	r3, [r4, #12]
 8006b88:	bd10      	pop	{r4, pc}

08006b8a <__swrite>:
 8006b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8e:	461f      	mov	r7, r3
 8006b90:	898b      	ldrh	r3, [r1, #12]
 8006b92:	05db      	lsls	r3, r3, #23
 8006b94:	4605      	mov	r5, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	4616      	mov	r6, r2
 8006b9a:	d505      	bpl.n	8006ba8 <__swrite+0x1e>
 8006b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f000 f868 	bl	8006c78 <_lseek_r>
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	4632      	mov	r2, r6
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	4628      	mov	r0, r5
 8006bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbe:	f000 b817 	b.w	8006bf0 <_write_r>

08006bc2 <__sseek>:
 8006bc2:	b510      	push	{r4, lr}
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bca:	f000 f855 	bl	8006c78 <_lseek_r>
 8006bce:	1c43      	adds	r3, r0, #1
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	bf15      	itete	ne
 8006bd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006bda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006bde:	81a3      	strheq	r3, [r4, #12]
 8006be0:	bf18      	it	ne
 8006be2:	81a3      	strhne	r3, [r4, #12]
 8006be4:	bd10      	pop	{r4, pc}

08006be6 <__sclose>:
 8006be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bea:	f000 b813 	b.w	8006c14 <_close_r>
	...

08006bf0 <_write_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	4d07      	ldr	r5, [pc, #28]	; (8006c10 <_write_r+0x20>)
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	4608      	mov	r0, r1
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	602a      	str	r2, [r5, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f7fb f8df 	bl	8001dc2 <_write>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_write_r+0x1e>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_write_r+0x1e>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	2000029c 	.word	0x2000029c

08006c14 <_close_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4d06      	ldr	r5, [pc, #24]	; (8006c30 <_close_r+0x1c>)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	602b      	str	r3, [r5, #0]
 8006c20:	f7fb f8eb 	bl	8001dfa <_close>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d102      	bne.n	8006c2e <_close_r+0x1a>
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	b103      	cbz	r3, 8006c2e <_close_r+0x1a>
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	bd38      	pop	{r3, r4, r5, pc}
 8006c30:	2000029c 	.word	0x2000029c

08006c34 <_fstat_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4d07      	ldr	r5, [pc, #28]	; (8006c54 <_fstat_r+0x20>)
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	f7fb f8e6 	bl	8001e12 <_fstat>
 8006c46:	1c43      	adds	r3, r0, #1
 8006c48:	d102      	bne.n	8006c50 <_fstat_r+0x1c>
 8006c4a:	682b      	ldr	r3, [r5, #0]
 8006c4c:	b103      	cbz	r3, 8006c50 <_fstat_r+0x1c>
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	bd38      	pop	{r3, r4, r5, pc}
 8006c52:	bf00      	nop
 8006c54:	2000029c 	.word	0x2000029c

08006c58 <_isatty_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4d06      	ldr	r5, [pc, #24]	; (8006c74 <_isatty_r+0x1c>)
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	602b      	str	r3, [r5, #0]
 8006c64:	f7fb f8e5 	bl	8001e32 <_isatty>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d102      	bne.n	8006c72 <_isatty_r+0x1a>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	b103      	cbz	r3, 8006c72 <_isatty_r+0x1a>
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	2000029c 	.word	0x2000029c

08006c78 <_lseek_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4d07      	ldr	r5, [pc, #28]	; (8006c98 <_lseek_r+0x20>)
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	4608      	mov	r0, r1
 8006c80:	4611      	mov	r1, r2
 8006c82:	2200      	movs	r2, #0
 8006c84:	602a      	str	r2, [r5, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	f7fb f8de 	bl	8001e48 <_lseek>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_lseek_r+0x1e>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_lseek_r+0x1e>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	2000029c 	.word	0x2000029c

08006c9c <_read_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d07      	ldr	r5, [pc, #28]	; (8006cbc <_read_r+0x20>)
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	4608      	mov	r0, r1
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	602a      	str	r2, [r5, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f7fb f86c 	bl	8001d88 <_read>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_read_r+0x1e>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_read_r+0x1e>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	2000029c 	.word	0x2000029c

08006cc0 <_init>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	bf00      	nop
 8006cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc6:	bc08      	pop	{r3}
 8006cc8:	469e      	mov	lr, r3
 8006cca:	4770      	bx	lr

08006ccc <_fini>:
 8006ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cce:	bf00      	nop
 8006cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd2:	bc08      	pop	{r3}
 8006cd4:	469e      	mov	lr, r3
 8006cd6:	4770      	bx	lr
